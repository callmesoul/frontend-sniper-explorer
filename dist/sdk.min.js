(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('uuid'), require('dotwallet-jssdk'), require('qs'), require('axios')) :
    typeof define === 'function' && define.amd ? define(['exports', 'uuid', 'dotwallet-jssdk', 'qs', 'axios'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.SDK = {}, global.uuid, global.DotWallet, global.qs, global.axios));
}(this, (function (exports, uuid, DotWallet, qs, axios) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var DotWallet__default = /*#__PURE__*/_interopDefaultLegacy(DotWallet);
    var qs__default = /*#__PURE__*/_interopDefaultLegacy(qs);
    var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    var __assign$1 = function () {
      __assign$1 = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }

        return t;
      };

      return __assign$1.apply(this, arguments);
    };
    function __rest(s, e) {
      var t = {};

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

      if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
      }
      return t;
    }
    function __awaiter$1(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function (resolve) {
          resolve(value);
        });
      }

      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }

        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }

        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }

        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }
    function __generator$1(thisArg, body) {
      var _ = {
        label: 0,
        sent: function () {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      },
          f,
          y,
          t,
          g;
      return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
      }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
      }), g;

      function verb(n) {
        return function (v) {
          return step([n, v]);
        };
      }

      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");

        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];

          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;

            case 4:
              _.label++;
              return {
                value: op[1],
                done: false
              };

            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;

            case 7:
              op = _.ops.pop();

              _.trys.pop();

              continue;

            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }

              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }

              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }

              if (t && _.label < t[2]) {
                _.label = t[2];

                _.ops.push(op);

                break;
              }

              if (t[2]) _.ops.pop();

              _.trys.pop();

              continue;
          }

          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }

        if (op[0] & 5) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
      __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }

        return t;
      };

      return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }

        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }

        function step(result) {
          result.done ? resolve(result.value) : new P(function (resolve) {
            resolve(result.value);
          }).then(fulfilled, rejected);
        }

        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }

    function __generator(thisArg, body) {
      var _ = {
        label: 0,
        sent: function () {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      },
          f,
          y,
          t,
          g;
      return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
      }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
      }), g;

      function verb(n) {
        return function (v) {
          return step([n, v]);
        };
      }

      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");

        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];

          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;

            case 4:
              _.label++;
              return {
                value: op[1],
                done: false
              };

            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;

            case 7:
              op = _.ops.pop();

              _.trys.pop();

              continue;

            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }

              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }

              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }

              if (t && _.label < t[2]) {
                _.label = t[2];

                _.ops.push(op);

                break;
              }

              if (t[2]) _.ops.pop();

              _.trys.pop();

              continue;
          }

          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }

        if (op[0] & 5) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    }

    function styleInject(css, ref) {
      if (ref === void 0) ref = {};
      var insertAt = ref.insertAt;

      if (!css || typeof document === 'undefined') {
        return;
      }

      var head = document.head || document.getElementsByTagName('head')[0];
      var style = document.createElement('style');
      style.type = 'text/css';

      if (insertAt === 'top') {
        if (head.firstChild) {
          head.insertBefore(style, head.firstChild);
        } else {
          head.appendChild(style);
        }
      } else {
        head.appendChild(style);
      }

      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }
    }

    var css_248z = "#showmoney-popup,\n#mainframewrapper {\n  font-size: 16px;\n  position: fixed;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n}\n#showmoney-popup {\n  z-index: 9999;\n  display: none;\n  animation: smfadeOut 0.3s cubic-bezier(0, 0, 0.2, 1);\n}\n#showmoney-main-frame {\n  display: inline-block;\n  max-width: 500px;\n  width: 90vw;\n  height: 218px;\n  border-radius: 0.5em;\n  overflow: hidden;\n}\n#mainframewrapper {\n  z-index: 9998;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n#showmoney-popup.active,\n#mainframewrapper.active {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  animation: smfadeIn 0.3s cubic-bezier(0, 0, 0.2, 1);\n}\n\n.sm-popup-box {\n  width: 90vw;\n  max-width: 500px;\n  max-height: 90vh;\n  overflow-y: auto;\n  background: #FFF;\n  border-radius: 0.5em;\n  border-top: 0.8em solid #2196F3;\n  box-shadow: 0 0 0.8em rgba(0,0,0, .4);\n}\n.error-popup .sm-popup-box {\n  border-top: 0.8em solid #FF5252;\n}\n#showmoney-popup.active .sm-popup-box {\n  animation: smslideIn .3s cubic-bezier(0, 0, .2, 1);\n}\n#showmoney-popup .sm-popup-box {\n  animation: smslideOut .3s cubic-bezier(0, 0, .2, 1);\n}\n.sm-linear-progress {\n  display: none;\n  background: #bbdefb;\n  height: 6px;\n  position: relative;\n  width: 100%;\n  margin: 0 auto;\n  overflow: hidden;\n  animation: start 0.3s ease-in;\n}\n.loading .sm-linear-progress {\n  display: inherit;\n}\n.sm-linear-progress .bar {\n  position: absolute;\n  background: #2196F3;\n  /* background: #eab300; */\n  transition: transform 0.2s linear;\n  transition: transform 0.2s linear;\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  width: 100%;\n}\n.sm-linear-progress .bar1 {\n  animation: progressLinearMovement 2.5s infinite;\n  animation-delay: 0;\n}\n.sm-linear-progress .bar2 {\n  left: -100%;\n  animation: progressLinearMovement 2.5s infinite;\n  animation-delay: 0.7s;\n}\n@keyframes progressLinearMovement {\n  0% {\n    left: -100%;\n  }\n  50% {\n    left: 100%;\n  }\n  100% {\n    left: 100%;\n  }\n}\n\n.sm-popup-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: relative;\n}\n.sm-popup-title {\n  font-weight: 600;\n  font-size: 1.25em;\n  line-height: 1.25;\n  color: #222;\n  box-sizing: border-box;\n  text-align: center;\n  width: 100%;\n  padding: 1em;\n}\n.sm-popup-close {\n  cursor: pointer;\n  font-family: inherit;\n  font-size: 120%;\n  line-height: 1.8;\n  border: 0;\n  background: transparent;\n  position: absolute;\n  right: 0.5em;\n  top: 0;\n  outline: none;\n}\n.sm-popup-close:before {\n  content: \"\\2715\";\n}\n.sm-popup-content {\n  margin: 1.5em 1em;\n  line-height: 1.5;\n  text-align: center;\n  color: #333;\n}\n.sm-popup-footer {\n  display: flex;\n  border-top: 1px solid #EEE;\n  justify-content: space-between;\n}\n.sm-popup-btn {\n  font-size: .875em;\n  padding: 1em;\n  border-radius: .25em;\n  border: 0;\n  cursor: pointer;\n  background: transparent;\n  will-change: transform;\n  transform: translateZ(0);\n  transition: transform .25s ease-out;\n  line-height: 1.15;\n  display: inline-block;\n  width: 49.99%;\n  outline: none;\n}\n.sm-popup-btn1 {\n  color: #888;\n  border-right: 1px solid #EEE;\n}\n.loading .sm-popup-btn2 {\n  color: #999;\n  cursor: not-allowed\n}\n.confirm-popup .amount-btn {\n  background: #eab300;\n  margin: 0 auto;\n  padding: 0.5em;\n  border-radius: 100px;\n  text-align: center;\n  width: 70%;\n  color: #FFF;\n  font-size: 1.2em;\n}\n.confirm-popup .amount-btn span {\n  font-size: 0.75em;\n  color: #EEE;\n}\n.confirm-popup .checkbox-group {\n  text-align: center;\n  margin: 1em 0;\n  color: #888;\n  font-size: 0.8em;\n  cursor: pointer;\n}\n.confirm-popup .checkbox-group input {\n  margin-right: 0.5em;\n}\n.confirm-popup .checkbox-group input:checked + label {\n  color: #eab300\n}\n\n@keyframes smslideIn {\n  from { transform: translateY(15%); }\n    to { transform: translateY(0); }\n}\n@keyframes smfadeIn {\n  from { opacity: 0; }\n    to { opacity: 1; }\n}\n@keyframes smfadeOut {\n  from { opacity: 1; }\n    to { opacity: 0; }\n}\n@keyframes smslideOut {\n  from { transform: translateY(0); }\n  to { transform: translateY(-10%); }\n}";
    styleInject(css_248z);
    /*
     * @Author: ohosanna
     * @Date: 2020-03-18 14:45:22
     * @Last Modified by: ohosanna
     * @Last Modified time: 2020-07-08 16:48:53
     */

    var Popup = function () {
      function Popup() {
        var popupEl = document.createElement('div');
        popupEl.setAttribute('id', 'showmoney-popup');
        document.body.appendChild(popupEl);
        this.popupWrapper = popupEl;
      }

      Popup.prototype.info = function (options) {
        this.show('info', options);
      };

      Popup.prototype.error = function (options) {
        this.show('error', options);
      };

      Popup.prototype.loading = function () {
        console.log(this.popupWrapper);
        this.show('info', {
          message: 'test'
        });
      };

      Popup.prototype.confirm = function (options) {
        var _this = this;

        if (!options.buttonAction) {
          options.buttonAction = function () {
            _this.close();
          };
        }

        this.show('confirm', options);
      };

      Popup.prototype.show = function (type, options) {
        if (type === void 0) {
          type = 'info';
        }

        var popupDom = this.generatePopupContent(options);
        this.popupWrapper.appendChild(popupDom);
        this.popupWrapper.className = type + '-popup' + ' active';
      };

      Popup.prototype.close = function () {
        this.popupWrapper.className = '';
        this.popupWrapper.innerHTML = '';
      };

      Popup.prototype.generatePopupContent = function (options) {
        var _this = this;

        var box = document.createElement('div');
        box.className = 'sm-popup-box ' + (options.className ? options.className : ''); // progress

        var progress = document.createElement('div');
        progress.className = 'sm-linear-progress';
        var bar1 = document.createElement('div');
        bar1.className = 'bar bar1';
        var bar2 = document.createElement('div');
        bar2.className = 'bar bar2';
        progress.appendChild(bar1);
        progress.appendChild(bar2);
        box.appendChild(progress); // header

        var popupHeader = document.createElement('header');
        popupHeader.className = 'sm-popup-header';
        var popupTitle = document.createElement('h2');
        popupTitle.className = 'sm-popup-title';

        if (options.title) {
          popupTitle.innerHTML = options.title;
          popupHeader.appendChild(popupTitle);
        }

        var closeBtn = document.createElement('button');
        closeBtn.className = 'sm-popup-close';

        closeBtn.onclick = function () {
          _this.close();
        };

        if (options.showClose !== false) {
          popupHeader.appendChild(closeBtn);
        } // content


        var popupContent = document.createElement('div');
        popupContent.className = 'sm-popup-content';
        popupContent.innerHTML = options.message; // footer

        var popupFooter = document.createElement('footer');
        popupFooter.className = 'sm-popup-footer';

        if (options.buttonText) {
          var button = document.createElement('button');
          button.className = 'sm-popup-btn sm-popup-btn1';
          button.innerText = options.buttonText;

          if (options.buttonUrl) {
            var url_1 = options.buttonUrl;

            button.onclick = function () {
              window.open(url_1, '_blank');
            };
          }

          if (options.buttonAction) {
            button.onclick = function () {
              if (typeof options.buttonAction === 'function') options.buttonAction();
            };
          }

          popupFooter.appendChild(button);
        }

        if (options.buttonText2) {
          var button2 = document.createElement('button');
          button2.className = 'sm-popup-btn sm-popup-btn2';
          button2.innerText = options.buttonText2;

          if (options.buttonUrl2) {
            var url_2 = options.buttonUrl2;

            button2.onclick = function () {
              if (options.useCurrentWindow) {
                window.open(url_2);
              } else {
                window.open(url_2, '_blank');
              }
            };
          }

          if (options.buttonAction2) {
            button2.onclick = function () {
              if (typeof options.buttonAction2 === 'function') options.buttonAction2();
            };
          }

          popupFooter.appendChild(button2);
        }

        box.appendChild(popupHeader);
        box.appendChild(popupContent);
        box.appendChild(popupFooter);
        return box;
      };

      return Popup;
    }();

    var Popup$1 = new Popup(); // Import here Polyfills if needed. Recommended core-js (npm i -D core-js)

    var generateRandomId = function () {
      return Math.floor(Math.random() * 100000000000000000).toString();
    };

    var PostmessageClient = function () {
      function PostmessageClient(window) {
        var _this = this;

        this._onMessageReceived = function (event) {
          return __awaiter(_this, void 0, void 0, function () {
            var message, handler, response, e_1;
            return __generator(this, function (_a) {
              switch (_a.label) {
                case 0:
                  if (!event.data || !event.data.v1) {
                    return [2
                    /*return*/
                    ];
                  }

                  message = event.data.v1;
                  handler = this.handlers[message.topic];
                  if (!handler) return [3
                  /*break*/
                  , 4];
                  _a.label = 1;

                case 1:
                  _a.trys.push([1, 3,, 4]);

                  return [4
                  /*yield*/
                  , handler(message)];

                case 2:
                  response = _a.sent();

                  if (message.reply) {
                    this.send(message.topic + ":reply", response, {
                      repliesTo: message.messageId
                    });
                  }

                  return [3
                  /*break*/
                  , 4];

                case 3:
                  e_1 = _a.sent();
                  console.error(e_1);
                  throw e_1;

                case 4:
                  return [2
                  /*return*/
                  ];
              }
            });
          });
        };

        this.handlers = {};
        this.targetWindow = window;
        this._pendingMessages = [];
        this._deliverMessages = false;
        this._replayQueue = {};
      }

      PostmessageClient.prototype.start = function () {
        window.addEventListener('message', this._onMessageReceived, false);
      };

      PostmessageClient.prototype.finalize = function () {
        window.removeEventListener('message', this._onMessageReceived, false);
      };

      PostmessageClient.prototype.subscribe = function (topic, handler) {
        this.handlers[topic] = handler;
      };

      PostmessageClient.prototype.send = function (topic, payload, metadata) {
        if (metadata === void 0) {
          metadata = {};
        }

        if (!this.targetWindow) {
          return console.log('请指定目标窗口');
        }

        var messageId = generateRandomId();
        var message = {
          v1: __assign({
            topic: topic,
            payload: payload,
            messageId: messageId
          }, metadata)
        };
        this.targetWindow.postMessage(message, '*');
        return message;
      };

      return PostmessageClient;
    }();

    var generateRandomId$1 = function () {
      return Math.floor(Math.random() * 100000000000000000).toString();
    };

    var hasClass = function (el, cls) {
      return el.className.match(new RegExp('(\\s|^)' + cls + '(\\s|$)'));
    };

    var addClass = function (el, cls) {
      if (!hasClass(el, cls)) el.className += " " + cls;
    };

    var MetaIdJs = function () {
      function MetaIdJs(options) {
        var _this = this;

        this.postMessage = new PostmessageClient(window);
        this.mainFrameEl = null;
        this.accessToken = '';
        this.isInjectMainFrame = false;
        this.isLoaded = false;
        this._handlers = {};

        this.onError = function (res) {
          Popup$1.error({
            message: res.data.message
          });
        };

        this.handleCreateNodeSuccess = function (res) {
          var _a, _b;

          Popup$1.close();
          (_b = (_a = _this.mainFrameEl) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.setAttribute('style', 'display: none;');
          var payload = res.payload;
          var callback = _this._handlers[payload.handlerId].callback;

          if (callback) {
            callback(payload);
          }
        };

        this.handleCreateNodeError = function (res) {
          var payload = res.payload;
          Popup$1.close();
          Popup$1.error({
            message: payload.data && payload.data.message ? payload.data.message : res
          });
        };

        this.handleConfirmCreateNode = function (res) {
          var _a, _b; // console.log("confirm", res);


          Popup$1.close();
          (_b = (_a = _this.mainFrameEl) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.removeAttribute('style');
        };

        this.handleCloseCreateNode = function (res) {
          var _a, _b;

          Popup$1.close();
          (_b = (_a = _this.mainFrameEl) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.setAttribute('style', 'display: none;');
          var payload = res.payload;
          var callback = _this._handlers[payload.handlerId].onCancel;

          if (callback) {
            delete payload.handlerId;
            callback(payload);
          }
        };

        this.handleCallback = function (res) {
          var payload = res.payload;
          var callback = _this._handlers[payload.handlerId].callback;

          if (callback) {
            delete payload.handlerId;
            callback(payload);
          }
        };

        this.handleSdkLoaded = function () {
          _this.isLoaded = true;

          if (typeof _this.onLoaded === 'function') {
            _this.onLoaded();
          }
        };

        this.handleCommonError = function (res) {
          console.log('error', res);
          var payload = res.payload;
          Popup$1.close();

          if (payload.code === 202) {
            Popup$1.confirm({
              message: 'User authentication expired.',
              showClose: false,
              buttonText: 'Cancel',
              buttonText2: 'Login',
              buttonUrl2: _this.SHOWMONEY_URL + "/userLogin?response_type=code&client_id=" + _this.oauthSettings.clientId + "&redirect_uri=" + _this.oauthSettings.redirectUri + "&scope=app&from=" + _this.oauthSettings.redirectUri
            });
          } else {
            _this.onError(payload);
          }
        };

        this.handleLoading = function () {
          _this.showLoadingPopup();
        };

        this.handleNotEnoughMoney = function (res) {
          var payload = res.payload;
          var message = payload.data.message;
          Popup$1.close();
          Popup$1.confirm({
            message: message ? message : 'Not enough money',
            showClose: false,
            buttonText: 'Cancel',
            buttonText2: 'Top up BSV',
            buttonUrl2: _this.SHOWMONEY_URL
          });
        };

        this.SHOWMONEY_URL = options.baseUri || "https://www.showmoney.app";
        this.onLoaded = options.onLoaded;

        if (typeof options.onError === 'function') {
          this.onError = options.onError;
        }

        this.oauthSettings = __assign(__assign({}, options.oauthSettings), {
          clientSecret: '',
          scope: 'app',
          responseType: 'code'
        });
        this.init();
      }
      /**
       * injectMainFrame  注入主框架
       */


      MetaIdJs.prototype.injectMainFrame = function () {
        var _this = this;

        var mainFrame = document.createElement('iframe');
        var mainFrameWrapper = document.createElement('div');
        mainFrame.setAttribute('id', 'showmoney-main-frame');
        mainFrame.setAttribute('src', this.SHOWMONEY_URL + '/iframe');
        mainFrameWrapper.setAttribute('id', 'mainframewrapper');
        mainFrameWrapper.setAttribute('style', 'display: none;');
        mainFrameWrapper.appendChild(mainFrame);
        document.body.appendChild(mainFrameWrapper); // 报告 main-frame 载入完成

        mainFrame.onload = function () {
          if (mainFrame.contentWindow) {
            _this.mainFrameEl = mainFrame; // 无法把postmessage实例保留，会报跨域错误

            window.mainFrameMessage = new PostmessageClient(mainFrame.contentWindow);
            window.mainFrameMessage.send('send-options', _this.oauthSettings); // window.mainFrameMessage = mainFrameMessage

            _this.isInjectMainFrame = true; // console.log('mainFrame loaded')
          }
        };
      };

      MetaIdJs.prototype.initHandle = function () {
        var functionObj = ["swapreqswapargs", "estimateSwapToken2Amount", "estimateSwapToken1Amount", "isSupportedFt", "swapft", "getBalance"];

        var _loop_1 = function (item) {
          this_1[item] = function (params) {
            var defParams = params;

            if (params.callback) {
              var handlerId = generateRandomId$1();
              this._handlers[handlerId] = {};
              this._handlers[handlerId].callback = params.callback;
              defParams.handlerId = handlerId;
            }

            delete defParams.callback;
            window.mainFrameMessage.send(item, defParams);
          };
        };

        var this_1 = this;

        for (var _i = 0, functionObj_1 = functionObj; _i < functionObj_1.length; _i++) {
          var item = functionObj_1[_i];

          _loop_1(item);
        }
      };
      /**
       * getUserInfo
       */


      MetaIdJs.prototype.getUserInfo = function (params) {
        var defParams = params;

        if (params.callback) {
          var handlerId = generateRandomId$1();
          this._handlers[handlerId] = {};
          this._handlers[handlerId].callback = params.callback;
          defParams.handlerId = handlerId;
        }

        delete defParams.callback;
        window.mainFrameMessage.send('get-user-info', defParams);
      };
      /**
       * signMessage
       */


      MetaIdJs.prototype.signMessage = function (params) {
        var defParams = params;

        if (params.callback) {
          var handlerId = generateRandomId$1();
          this._handlers[handlerId] = {};
          this._handlers[handlerId].callback = params.callback;
          defParams.handlerId = handlerId;
        }

        delete defParams.callback;
        window.mainFrameMessage.send('sign-messgae', defParams);
      };
      /**
       * eciesEncryptData
       */


      MetaIdJs.prototype.eciesEncryptData = function (params) {
        var defParams = params;

        if (params.callback) {
          var handlerId = generateRandomId$1();
          this._handlers[handlerId] = {};
          this._handlers[handlerId].callback = params.callback;
          defParams.handlerId = handlerId;
        }

        delete defParams.callback;
        window.mainFrameMessage.send('ecies-encrypt-data', defParams);
      };

      MetaIdJs.prototype.eciesDecryptData = function (params) {
        var defParams = params;

        if (params.callback) {
          var handlerId = generateRandomId$1();
          this._handlers[handlerId] = {};
          this._handlers[handlerId].callback = params.callback;
          defParams.handlerId = handlerId;
        }

        delete defParams.callback;
        window.mainFrameMessage.send('ecies-decrypt-data', defParams);
      };
      /**
       * ecdhEncryptData
       */


      MetaIdJs.prototype.ecdhEncryptData = function (params) {
        var defParams = params;

        if (params.callback) {
          var handlerId = generateRandomId$1();
          this._handlers[handlerId] = {};
          this._handlers[handlerId].callback = params.callback;
          defParams.handlerId = handlerId;
        }

        delete defParams.callback;
        window.mainFrameMessage.send('ecdh-encrypt-data', defParams);
      };

      MetaIdJs.prototype.ecdhDecryptData = function (params) {
        var defParams = params;

        if (params.callback) {
          var handlerId = generateRandomId$1();
          this._handlers[handlerId] = {};
          this._handlers[handlerId].callback = params.callback;
          defParams.handlerId = handlerId;
        }

        delete defParams.callback;
        window.mainFrameMessage.send('ecdh-decrypt-data', defParams);
      };

      MetaIdJs.prototype.getFTList = function (params) {
        var defParams = params;

        if (params.callback) {
          var handlerId = generateRandomId$1();
          this._handlers[handlerId] = {};
          this._handlers[handlerId].callback = params.callback;
          defParams.handlerId = handlerId;
        }

        delete defParams.callback;
        window.mainFrameMessage.send('get-ftlist', defParams);
      }; // 版本兼容


      MetaIdJs.prototype.addProtocolNode = function (params) {
        this.sendMetaDataTx(params);
      };
      /**
       * createProtocolNode
       */


      MetaIdJs.prototype.sendMetaDataTx = function (params) {
        if (!params.checkOnly) {
          this.showLoadingPopup();
        }

        if (params.callback || params.onCancel) {
          var handlerId = generateRandomId$1();
          this._handlers[handlerId] = {};

          if (params.callback) {
            this._handlers[handlerId]['callback'] = params.callback;
          }

          if (params.onCancel) {
            this._handlers[handlerId]['onCancel'] = params.onCancel;
          }

          params = __assign(__assign({}, params), {
            handlerId: handlerId
          });
          delete params.callback;
          delete params.onCancel;
        }

        if (this.isInjectMainFrame) {
          window.mainFrameMessage.send('create-node', params); // console.log(this._handlers)
        } else {
          throw new Error('showmoney frame 未加载');
        }
      };

      MetaIdJs.prototype.payToAddress = function (params) {
        var defParams = params;

        if (params.callback) {
          var handlerId = generateRandomId$1();
          this._handlers[handlerId] = {};
          this._handlers[handlerId].callback = params.callback;
          defParams.handlerId = handlerId;
        }

        delete defParams.callback;
        window.mainFrameMessage.send('pay-to-address', defParams);
      };

      MetaIdJs.prototype.showLoadingPopup = function () {
        var popupEl = document.getElementById('showmoney-popup');
        if (!popupEl) return;
        Popup$1.info({
          message: 'Processing data...',
          showClose: false
        });
        addClass(popupEl, 'loading');
      };

      MetaIdJs.prototype.handleErrorNotLoggedIn = function (resolve) {
        var message = resolve.payload;
        Popup$1.close();
        Popup$1.info(message.popup);
      };

      MetaIdJs.prototype.init = function () {
        this.injectMainFrame(); // 监听信息

        this.postMessage.start();
        this.initHandle();
        this.postMessage.subscribe('sdk-loaded', this.handleSdkLoaded);
        this.postMessage.subscribe('error.not-logged-in', this.handleErrorNotLoggedIn);
        this.postMessage.subscribe('loading', this.handleLoading);
        this.postMessage.subscribe('success.create-node', this.handleCreateNodeSuccess);
        this.postMessage.subscribe('confirm.create-node', this.handleConfirmCreateNode);
        this.postMessage.subscribe('close.create-node', this.handleCloseCreateNode);
        this.postMessage.subscribe('error.create-node', this.handleCreateNodeError);
        this.postMessage.subscribe('error.not-enough-money', this.handleNotEnoughMoney);
        this.postMessage.subscribe('receive-callback', this.handleCallback);
        this.postMessage.subscribe('error.common', this.handleCommonError);
      };

      return MetaIdJs;
    }();

    window.MetaIdJs = MetaIdJs;

    /*
     *  decimal.js-light v2.5.1
     *  An arbitrary-precision Decimal type for JavaScript.
     *  https://github.com/MikeMcl/decimal.js-light
     *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>
     *  MIT Expat Licence
     */
    // ------------------------------------  EDITABLE DEFAULTS  ------------------------------------- //
    // The limit on the value of `precision`, and on the value of the first argument to
    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
    var MAX_DIGITS = 1e9,
        // 0 to 1e9
    // The initial configuration properties of the Decimal constructor.
    defaults = {
      // These values must be integers within the stated ranges (inclusive).
      // Most of these values can be changed during run-time using `Decimal.config`.
      // The maximum number of significant digits of the result of a calculation or base conversion.
      // E.g. `Decimal.config({ precision: 20 });`
      precision: 20,
      // 1 to MAX_DIGITS
      // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,
      // `toFixed`, `toPrecision` and `toSignificantDigits`.
      //
      // ROUND_UP         0 Away from zero.
      // ROUND_DOWN       1 Towards zero.
      // ROUND_CEIL       2 Towards +Infinity.
      // ROUND_FLOOR      3 Towards -Infinity.
      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
      //
      // E.g.
      // `Decimal.rounding = 4;`
      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
      rounding: 4,
      // 0 to 8
      // The exponent value at and beneath which `toString` returns exponential notation.
      // JavaScript numbers: -7
      toExpNeg: -7,
      // 0 to -MAX_E
      // The exponent value at and above which `toString` returns exponential notation.
      // JavaScript numbers: 21
      toExpPos: 21,
      // 0 to MAX_E
      // The natural logarithm of 10.
      // 115 digits
      LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'
    },
        // ------------------------------------ END OF EDITABLE DEFAULTS -------------------------------- //
    Decimal,
        external = true,
        decimalError = '[DecimalError] ',
        invalidArgument = decimalError + 'Invalid argument: ',
        exponentOutOfRange = decimalError + 'Exponent out of range: ',
        mathfloor = Math.floor,
        mathpow = Math.pow,
        isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
        ONE,
        BASE = 1e7,
        LOG_BASE = 7,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE),
        // 1286742750677284
    // Decimal.prototype object
    P = {}; // Decimal prototype methods

    /*
     *  absoluteValue                       abs
     *  comparedTo                          cmp
     *  decimalPlaces                       dp
     *  dividedBy                           div
     *  dividedToIntegerBy                  idiv
     *  equals                              eq
     *  exponent
     *  greaterThan                         gt
     *  greaterThanOrEqualTo                gte
     *  isInteger                           isint
     *  isNegative                          isneg
     *  isPositive                          ispos
     *  isZero
     *  lessThan                            lt
     *  lessThanOrEqualTo                   lte
     *  logarithm                           log
     *  minus                               sub
     *  modulo                              mod
     *  naturalExponential                  exp
     *  naturalLogarithm                    ln
     *  negated                             neg
     *  plus                                add
     *  precision                           sd
     *  squareRoot                          sqrt
     *  times                               mul
     *  toDecimalPlaces                     todp
     *  toExponential
     *  toFixed
     *  toInteger                           toint
     *  toNumber
     *  toPower                             pow
     *  toPrecision
     *  toSignificantDigits                 tosd
     *  toString
     *  valueOf                             val
     */

    /*
     * Return a new Decimal whose value is the absolute value of this Decimal.
     *
     */

    P.absoluteValue = P.abs = function () {
      var x = new this.constructor(this);
      if (x.s) x.s = 1;
      return x;
    };
    /*
     * Return
     *   1    if the value of this Decimal is greater than the value of `y`,
     *  -1    if the value of this Decimal is less than the value of `y`,
     *   0    if they have the same value
     *
     */


    P.comparedTo = P.cmp = function (y) {
      var i,
          j,
          xdL,
          ydL,
          x = this;
      y = new x.constructor(y); // Signs differ?

      if (x.s !== y.s) return x.s || -y.s; // Compare exponents.

      if (x.e !== y.e) return x.e > y.e ^ x.s < 0 ? 1 : -1;
      xdL = x.d.length;
      ydL = y.d.length; // Compare digit by digit.

      for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
        if (x.d[i] !== y.d[i]) return x.d[i] > y.d[i] ^ x.s < 0 ? 1 : -1;
      } // Compare lengths.


      return xdL === ydL ? 0 : xdL > ydL ^ x.s < 0 ? 1 : -1;
    };
    /*
     * Return the number of decimal places of the value of this Decimal.
     *
     */


    P.decimalPlaces = P.dp = function () {
      var x = this,
          w = x.d.length - 1,
          dp = (w - x.e) * LOG_BASE; // Subtract the number of trailing zeros of the last word.

      w = x.d[w];
      if (w) for (; w % 10 == 0; w /= 10) dp--;
      return dp < 0 ? 0 : dp;
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to
     * `precision` significant digits.
     *
     */


    P.dividedBy = P.div = function (y) {
      return divide(this, new this.constructor(y));
    };
    /*
     * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
     * by the value of `y`, truncated to `precision` significant digits.
     *
     */


    P.dividedToIntegerBy = P.idiv = function (y) {
      var x = this,
          Ctor = x.constructor;
      return round(divide(x, new Ctor(y), 0, 1), Ctor.precision);
    };
    /*
     * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
     *
     */


    P.equals = P.eq = function (y) {
      return !this.cmp(y);
    };
    /*
     * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).
     *
     */


    P.exponent = function () {
      return getBase10Exponent(this);
    };
    /*
     * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
     * false.
     *
     */


    P.greaterThan = P.gt = function (y) {
      return this.cmp(y) > 0;
    };
    /*
     * Return true if the value of this Decimal is greater than or equal to the value of `y`,
     * otherwise return false.
     *
     */


    P.greaterThanOrEqualTo = P.gte = function (y) {
      return this.cmp(y) >= 0;
    };
    /*
     * Return true if the value of this Decimal is an integer, otherwise return false.
     *
     */


    P.isInteger = P.isint = function () {
      return this.e > this.d.length - 2;
    };
    /*
     * Return true if the value of this Decimal is negative, otherwise return false.
     *
     */


    P.isNegative = P.isneg = function () {
      return this.s < 0;
    };
    /*
     * Return true if the value of this Decimal is positive, otherwise return false.
     *
     */


    P.isPositive = P.ispos = function () {
      return this.s > 0;
    };
    /*
     * Return true if the value of this Decimal is 0, otherwise return false.
     *
     */


    P.isZero = function () {
      return this.s === 0;
    };
    /*
     * Return true if the value of this Decimal is less than `y`, otherwise return false.
     *
     */


    P.lessThan = P.lt = function (y) {
      return this.cmp(y) < 0;
    };
    /*
     * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
     *
     */


    P.lessThanOrEqualTo = P.lte = function (y) {
      return this.cmp(y) < 1;
    };
    /*
     * Return the logarithm of the value of this Decimal to the specified base, truncated to
     * `precision` significant digits.
     *
     * If no base is specified, return log[10](x).
     *
     * log[base](x) = ln(x) / ln(base)
     *
     * The maximum error of the result is 1 ulp (unit in the last place).
     *
     * [base] {number|string|Decimal} The base of the logarithm.
     *
     */


    P.logarithm = P.log = function (base) {
      var r,
          x = this,
          Ctor = x.constructor,
          pr = Ctor.precision,
          wpr = pr + 5; // Default base is 10.

      if (base === void 0) {
        base = new Ctor(10);
      } else {
        base = new Ctor(base); // log[-b](x) = NaN
        // log[0](x)  = NaN
        // log[1](x)  = NaN

        if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN');
      } // log[b](-x) = NaN
      // log[b](0) = -Infinity


      if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity')); // log[b](1) = 0

      if (x.eq(ONE)) return new Ctor(0);
      external = false;
      r = divide(ln(x, wpr), ln(base, wpr), wpr);
      external = true;
      return round(r, pr);
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to
     * `precision` significant digits.
     *
     */


    P.minus = P.sub = function (y) {
      var x = this;
      y = new x.constructor(y);
      return x.s == y.s ? subtract(x, y) : add(x, (y.s = -y.s, y));
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to
     * `precision` significant digits.
     *
     */


    P.modulo = P.mod = function (y) {
      var q,
          x = this,
          Ctor = x.constructor,
          pr = Ctor.precision;
      y = new Ctor(y); // x % 0 = NaN

      if (!y.s) throw Error(decimalError + 'NaN'); // Return x if x is 0.

      if (!x.s) return round(new Ctor(x), pr); // Prevent rounding of intermediate calculations.

      external = false;
      q = divide(x, y, 0, 1).times(y);
      external = true;
      return x.minus(q);
    };
    /*
     * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
     * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`
     * significant digits.
     *
     */


    P.naturalExponential = P.exp = function () {
      return exp(this);
    };
    /*
     * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
     * truncated to `precision` significant digits.
     *
     */


    P.naturalLogarithm = P.ln = function () {
      return ln(this);
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
     * -1.
     *
     */


    P.negated = P.neg = function () {
      var x = new this.constructor(this);
      x.s = -x.s || 0;
      return x;
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to
     * `precision` significant digits.
     *
     */


    P.plus = P.add = function (y) {
      var x = this;
      y = new x.constructor(y);
      return x.s == y.s ? add(x, y) : subtract(x, (y.s = -y.s, y));
    };
    /*
     * Return the number of significant digits of the value of this Decimal.
     *
     * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
     *
     */


    P.precision = P.sd = function (z) {
      var e,
          sd,
          w,
          x = this;
      if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);
      e = getBase10Exponent(x) + 1;
      w = x.d.length - 1;
      sd = w * LOG_BASE + 1;
      w = x.d[w]; // If non-zero...

      if (w) {
        // Subtract the number of trailing zeros of the last word.
        for (; w % 10 == 0; w /= 10) sd--; // Add the number of digits of the first word.


        for (w = x.d[0]; w >= 10; w /= 10) sd++;
      }

      return z && e > sd ? e : sd;
    };
    /*
     * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`
     * significant digits.
     *
     */


    P.squareRoot = P.sqrt = function () {
      var e,
          n,
          pr,
          r,
          s,
          t,
          wpr,
          x = this,
          Ctor = x.constructor; // Negative or zero?

      if (x.s < 1) {
        if (!x.s) return new Ctor(0); // sqrt(-x) = NaN

        throw Error(decimalError + 'NaN');
      }

      e = getBase10Exponent(x);
      external = false; // Initial estimate.

      s = Math.sqrt(+x); // Math.sqrt underflow/overflow?
      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.

      if (s == 0 || s == 1 / 0) {
        n = digitsToString(x.d);
        if ((n.length + e) % 2 == 0) n += '0';
        s = Math.sqrt(n);
        e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

        if (s == 1 / 0) {
          n = '5e' + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf('e') + 1) + e;
        }

        r = new Ctor(n);
      } else {
        r = new Ctor(s.toString());
      }

      pr = Ctor.precision;
      s = wpr = pr + 3; // Newton-Raphson iteration.

      for (;;) {
        t = r;
        r = t.plus(divide(x, t, wpr + 2)).times(0.5);

        if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r.d)).slice(0, wpr)) {
          n = n.slice(wpr - 3, wpr + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
          // 4999, i.e. approaching a rounding boundary, continue the iteration.

          if (s == wpr && n == '4999') {
            // On the first iteration only, check to see if rounding up gives the exact result as the
            // nines may infinitely repeat.
            round(t, pr + 1, 0);

            if (t.times(t).eq(x)) {
              r = t;
              break;
            }
          } else if (n != '9999') {
            break;
          }

          wpr += 4;
        }
      }

      external = true;
      return round(r, pr);
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to
     * `precision` significant digits.
     *
     */


    P.times = P.mul = function (y) {
      var carry,
          e,
          i,
          k,
          r,
          rL,
          t,
          xdL,
          ydL,
          x = this,
          Ctor = x.constructor,
          xd = x.d,
          yd = (y = new Ctor(y)).d; // Return 0 if either is 0.

      if (!x.s || !y.s) return new Ctor(0);
      y.s *= x.s;
      e = x.e + y.e;
      xdL = xd.length;
      ydL = yd.length; // Ensure xd points to the longer array.

      if (xdL < ydL) {
        r = xd;
        xd = yd;
        yd = r;
        rL = xdL;
        xdL = ydL;
        ydL = rL;
      } // Initialise the result array with zeros.


      r = [];
      rL = xdL + ydL;

      for (i = rL; i--;) r.push(0); // Multiply!


      for (i = ydL; --i >= 0;) {
        carry = 0;

        for (k = xdL + i; k > i;) {
          t = r[k] + yd[i] * xd[k - i - 1] + carry;
          r[k--] = t % BASE | 0;
          carry = t / BASE | 0;
        }

        r[k] = (r[k] + carry) % BASE | 0;
      } // Remove trailing zeros.


      for (; !r[--rL];) r.pop();

      if (carry) ++e;else r.shift();
      y.d = r;
      y.e = e;
      return external ? round(y, Ctor.precision) : y;
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
     * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
     *
     * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */


    P.toDecimalPlaces = P.todp = function (dp, rm) {
      var x = this,
          Ctor = x.constructor;
      x = new Ctor(x);
      if (dp === void 0) return x;
      checkInt32(dp, 0, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
      return round(x, dp + getBase10Exponent(x) + 1, rm);
    };
    /*
     * Return a string representing the value of this Decimal in exponential notation rounded to
     * `dp` fixed decimal places using rounding mode `rounding`.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */


    P.toExponential = function (dp, rm) {
      var str,
          x = this,
          Ctor = x.constructor;

      if (dp === void 0) {
        str = toString(x, true);
      } else {
        checkInt32(dp, 0, MAX_DIGITS);
        if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
        x = round(new Ctor(x), dp + 1, rm);
        str = toString(x, true, dp + 1);
      }

      return str;
    };
    /*
     * Return a string representing the value of this Decimal in normal (fixed-point) notation to
     * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
     * omitted.
     *
     * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
     * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
     * (-0).toFixed(3) is '0.000'.
     * (-0.5).toFixed(0) is '-0'.
     *
     */


    P.toFixed = function (dp, rm) {
      var str,
          y,
          x = this,
          Ctor = x.constructor;
      if (dp === void 0) return toString(x);
      checkInt32(dp, 0, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
      y = round(new Ctor(x), dp + getBase10Exponent(x) + 1, rm);
      str = toString(y.abs(), false, dp + getBase10Exponent(y) + 1); // To determine whether to add the minus sign look at the value before it was rounded,
      // i.e. look at `x` rather than `y`.

      return x.isneg() && !x.isZero() ? '-' + str : str;
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
     * rounding mode `rounding`.
     *
     */


    P.toInteger = P.toint = function () {
      var x = this,
          Ctor = x.constructor;
      return round(new Ctor(x), getBase10Exponent(x) + 1, Ctor.rounding);
    };
    /*
     * Return the value of this Decimal converted to a number primitive.
     *
     */


    P.toNumber = function () {
      return +this;
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,
     * truncated to `precision` significant digits.
     *
     * For non-integer or very large exponents pow(x, y) is calculated using
     *
     *   x^y = exp(y*ln(x))
     *
     * The maximum error is 1 ulp (unit in last place).
     *
     * y {number|string|Decimal} The power to which to raise this Decimal.
     *
     */


    P.toPower = P.pow = function (y) {
      var e,
          k,
          pr,
          r,
          sign,
          yIsInt,
          x = this,
          Ctor = x.constructor,
          guard = 12,
          yn = +(y = new Ctor(y)); // pow(x, 0) = 1

      if (!y.s) return new Ctor(ONE);
      x = new Ctor(x); // pow(0, y > 0) = 0
      // pow(0, y < 0) = Infinity

      if (!x.s) {
        if (y.s < 1) throw Error(decimalError + 'Infinity');
        return x;
      } // pow(1, y) = 1


      if (x.eq(ONE)) return x;
      pr = Ctor.precision; // pow(x, 1) = x

      if (y.eq(ONE)) return round(x, pr);
      e = y.e;
      k = y.d.length - 1;
      yIsInt = e >= k;
      sign = x.s;

      if (!yIsInt) {
        // pow(x < 0, y non-integer) = NaN
        if (sign < 0) throw Error(decimalError + 'NaN'); // If y is a small integer use the 'exponentiation by squaring' algorithm.
      } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
        r = new Ctor(ONE); // Max k of 9007199254740991 takes 53 loop iterations.
        // Maximum digits array length; leaves [28, 34] guard digits.

        e = Math.ceil(pr / LOG_BASE + 4);
        external = false;

        for (;;) {
          if (k % 2) {
            r = r.times(x);
            truncate(r.d, e);
          }

          k = mathfloor(k / 2);
          if (k === 0) break;
          x = x.times(x);
          truncate(x.d, e);
        }

        external = true;
        return y.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);
      } // Result is negative if x is negative and the last digit of integer y is odd.


      sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;
      x.s = 1;
      external = false;
      r = y.times(ln(x, pr + guard));
      external = true;
      r = exp(r);
      r.s = sign;
      return r;
    };
    /*
     * Return a string representing the value of this Decimal rounded to `sd` significant digits
     * using rounding mode `rounding`.
     *
     * Return exponential notation if `sd` is less than the number of digits necessary to represent
     * the integer part of the value in normal notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */


    P.toPrecision = function (sd, rm) {
      var e,
          str,
          x = this,
          Ctor = x.constructor;

      if (sd === void 0) {
        e = getBase10Exponent(x);
        str = toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);
      } else {
        checkInt32(sd, 1, MAX_DIGITS);
        if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
        x = round(new Ctor(x), sd, rm);
        e = getBase10Exponent(x);
        str = toString(x, sd <= e || e <= Ctor.toExpNeg, sd);
      }

      return str;
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
     * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
     * omitted.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */


    P.toSignificantDigits = P.tosd = function (sd, rm) {
      var x = this,
          Ctor = x.constructor;

      if (sd === void 0) {
        sd = Ctor.precision;
        rm = Ctor.rounding;
      } else {
        checkInt32(sd, 1, MAX_DIGITS);
        if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
      }

      return round(new Ctor(x), sd, rm);
    };
    /*
     * Return a string representing the value of this Decimal.
     *
     * Return exponential notation if this Decimal has a positive exponent equal to or greater than
     * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
     *
     */


    P.toString = P.valueOf = P.val = P.toJSON = P[Symbol.for('nodejs.util.inspect.custom')] = function () {
      var x = this,
          e = getBase10Exponent(x),
          Ctor = x.constructor;
      return toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);
    }; // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.

    /*
     *  add                 P.minus, P.plus
     *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd
     *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln
     *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln
     *  exp                 P.exp, P.pow
     *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,
     *                      P.toString, divide, round, toString, exp, ln
     *  getLn10             P.log, ln
     *  getZeroString       digitsToString, toString
     *  ln                  P.log, P.ln, P.pow, exp
     *  parseDecimal        Decimal
     *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,
     *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,
     *                      divide, getLn10, exp, ln
     *  subtract            P.minus, P.plus
     *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf
     *  truncate            P.pow
     *
     *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,
     *                      getLn10, exp, ln, parseDecimal, Decimal, config
     */


    function add(x, y) {
      var carry,
          d,
          e,
          i,
          k,
          len,
          xd,
          yd,
          Ctor = x.constructor,
          pr = Ctor.precision; // If either is zero...

      if (!x.s || !y.s) {
        // Return x if y is zero.
        // Return y if y is non-zero.
        if (!y.s) y = new Ctor(x);
        return external ? round(y, pr) : y;
      }

      xd = x.d;
      yd = y.d; // x and y are finite, non-zero numbers with the same sign.

      k = x.e;
      e = y.e;
      xd = xd.slice();
      i = k - e; // If base 1e7 exponents differ...

      if (i) {
        if (i < 0) {
          d = xd;
          i = -i;
          len = yd.length;
        } else {
          d = yd;
          e = k;
          len = xd.length;
        } // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.


        k = Math.ceil(pr / LOG_BASE);
        len = k > len ? k + 1 : len + 1;

        if (i > len) {
          i = len;
          d.length = 1;
        } // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.


        d.reverse();

        for (; i--;) d.push(0);

        d.reverse();
      }

      len = xd.length;
      i = yd.length; // If yd is longer than xd, swap xd and yd so xd points to the longer array.

      if (len - i < 0) {
        i = len;
        d = yd;
        yd = xd;
        xd = d;
      } // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.


      for (carry = 0; i;) {
        carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
        xd[i] %= BASE;
      }

      if (carry) {
        xd.unshift(carry);
        ++e;
      } // Remove trailing zeros.
      // No need to check for zero, as +x + +y != 0 && -x + -y != 0


      for (len = xd.length; xd[--len] == 0;) xd.pop();

      y.d = xd;
      y.e = e;
      return external ? round(y, pr) : y;
    }

    function checkInt32(i, min, max) {
      if (i !== ~~i || i < min || i > max) {
        throw Error(invalidArgument + i);
      }
    }

    function digitsToString(d) {
      var i,
          k,
          ws,
          indexOfLastWord = d.length - 1,
          str = '',
          w = d[0];

      if (indexOfLastWord > 0) {
        str += w;

        for (i = 1; i < indexOfLastWord; i++) {
          ws = d[i] + '';
          k = LOG_BASE - ws.length;
          if (k) str += getZeroString(k);
          str += ws;
        }

        w = d[i];
        ws = w + '';
        k = LOG_BASE - ws.length;
        if (k) str += getZeroString(k);
      } else if (w === 0) {
        return '0';
      } // Remove trailing zeros of last w.


      for (; w % 10 === 0;) w /= 10;

      return str + w;
    }

    var divide = function () {
      // Assumes non-zero x and k, and hence non-zero result.
      function multiplyInteger(x, k) {
        var temp,
            carry = 0,
            i = x.length;

        for (x = x.slice(); i--;) {
          temp = x[i] * k + carry;
          x[i] = temp % BASE | 0;
          carry = temp / BASE | 0;
        }

        if (carry) x.unshift(carry);
        return x;
      }

      function compare(a, b, aL, bL) {
        var i, r;

        if (aL != bL) {
          r = aL > bL ? 1 : -1;
        } else {
          for (i = r = 0; i < aL; i++) {
            if (a[i] != b[i]) {
              r = a[i] > b[i] ? 1 : -1;
              break;
            }
          }
        }

        return r;
      }

      function subtract(a, b, aL) {
        var i = 0; // Subtract b from a.

        for (; aL--;) {
          a[aL] -= i;
          i = a[aL] < b[aL] ? 1 : 0;
          a[aL] = i * BASE + a[aL] - b[aL];
        } // Remove leading zeros.


        for (; !a[0] && a.length > 1;) a.shift();
      }

      return function (x, y, pr, dp) {
        var cmp,
            e,
            i,
            k,
            prod,
            prodL,
            q,
            qd,
            rem,
            remL,
            rem0,
            sd,
            t,
            xi,
            xL,
            yd0,
            yL,
            yz,
            Ctor = x.constructor,
            sign = x.s == y.s ? 1 : -1,
            xd = x.d,
            yd = y.d; // Either 0?

        if (!x.s) return new Ctor(x);
        if (!y.s) throw Error(decimalError + 'Division by zero');
        e = x.e - y.e;
        yL = yd.length;
        xL = xd.length;
        q = new Ctor(sign);
        qd = q.d = []; // Result exponent may be one less than e.

        for (i = 0; yd[i] == (xd[i] || 0);) ++i;

        if (yd[i] > (xd[i] || 0)) --e;

        if (pr == null) {
          sd = pr = Ctor.precision;
        } else if (dp) {
          sd = pr + (getBase10Exponent(x) - getBase10Exponent(y)) + 1;
        } else {
          sd = pr;
        }

        if (sd < 0) return new Ctor(0); // Convert precision in number of base 10 digits to base 1e7 digits.

        sd = sd / LOG_BASE + 2 | 0;
        i = 0; // divisor < 1e7

        if (yL == 1) {
          k = 0;
          yd = yd[0];
          sd++; // k is the carry.

          for (; (i < xL || k) && sd--; i++) {
            t = k * BASE + (xd[i] || 0);
            qd[i] = t / yd | 0;
            k = t % yd | 0;
          } // divisor >= 1e7

        } else {
          // Normalise xd and yd so highest order digit of yd is >= BASE/2
          k = BASE / (yd[0] + 1) | 0;

          if (k > 1) {
            yd = multiplyInteger(yd, k);
            xd = multiplyInteger(xd, k);
            yL = yd.length;
            xL = xd.length;
          }

          xi = yL;
          rem = xd.slice(0, yL);
          remL = rem.length; // Add zeros to make remainder as long as divisor.

          for (; remL < yL;) rem[remL++] = 0;

          yz = yd.slice();
          yz.unshift(0);
          yd0 = yd[0];
          if (yd[1] >= BASE / 2) ++yd0;

          do {
            k = 0; // Compare divisor and remainder.

            cmp = compare(yd, rem, yL, remL); // If divisor < remainder.

            if (cmp < 0) {
              // Calculate trial digit, k.
              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0); // k will be how many times the divisor goes into the current remainder.

              k = rem0 / yd0 | 0; //  Algorithm:
              //  1. product = divisor * trial digit (k)
              //  2. if product > remainder: product -= divisor, k--
              //  3. remainder -= product
              //  4. if product was < remainder at 2:
              //    5. compare new remainder and divisor
              //    6. If remainder > divisor: remainder -= divisor, k++

              if (k > 1) {
                if (k >= BASE) k = BASE - 1; // product = divisor * trial digit.

                prod = multiplyInteger(yd, k);
                prodL = prod.length;
                remL = rem.length; // Compare product and remainder.

                cmp = compare(prod, rem, prodL, remL); // product > remainder.

                if (cmp == 1) {
                  k--; // Subtract divisor from product.

                  subtract(prod, yL < prodL ? yz : yd, prodL);
                }
              } else {
                // cmp is -1.
                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
                // to avoid it. If k is 1 there is a need to compare yd and rem again below.
                if (k == 0) cmp = k = 1;
                prod = yd.slice();
              }

              prodL = prod.length;
              if (prodL < remL) prod.unshift(0); // Subtract product from remainder.

              subtract(rem, prod, remL); // If product was < previous remainder.

              if (cmp == -1) {
                remL = rem.length; // Compare divisor and new remainder.

                cmp = compare(yd, rem, yL, remL); // If divisor < new remainder, subtract divisor from remainder.

                if (cmp < 1) {
                  k++; // Subtract divisor from remainder.

                  subtract(rem, yL < remL ? yz : yd, remL);
                }
              }

              remL = rem.length;
            } else if (cmp === 0) {
              k++;
              rem = [0];
            } // if cmp === 1, k will be 0
            // Add the next digit, k, to the result array.


            qd[i++] = k; // Update the remainder.

            if (cmp && rem[0]) {
              rem[remL++] = xd[xi] || 0;
            } else {
              rem = [xd[xi]];
              remL = 1;
            }
          } while ((xi++ < xL || rem[0] !== void 0) && sd--);
        } // Leading zero?


        if (!qd[0]) qd.shift();
        q.e = e;
        return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);
      };
    }();
    /*
     * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`
     * significant digits.
     *
     * Taylor/Maclaurin series.
     *
     * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
     *
     * Argument reduction:
     *   Repeat x = x / 32, k += 5, until |x| < 0.1
     *   exp(x) = exp(x / 2^k)^(2^k)
     *
     * Previously, the argument was initially reduced by
     * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
     * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
     * found to be slower than just dividing repeatedly by 32 as above.
     *
     * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
     *
     *  exp(x) is non-terminating for any finite, non-zero x.
     *
     */


    function exp(x, sd) {
      var denominator,
          guard,
          pow,
          sum,
          t,
          wpr,
          i = 0,
          k = 0,
          Ctor = x.constructor,
          pr = Ctor.precision;
      if (getBase10Exponent(x) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x)); // exp(0) = 1

      if (!x.s) return new Ctor(ONE);

      if (sd == null) {
        external = false;
        wpr = pr;
      } else {
        wpr = sd;
      }

      t = new Ctor(0.03125);

      while (x.abs().gte(0.1)) {
        x = x.times(t); // x = x / 2^5

        k += 5;
      } // Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.


      guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
      wpr += guard;
      denominator = pow = sum = new Ctor(ONE);
      Ctor.precision = wpr;

      for (;;) {
        pow = round(pow.times(x), wpr);
        denominator = denominator.times(++i);
        t = sum.plus(divide(pow, denominator, wpr));

        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
          while (k--) sum = round(sum.times(sum), wpr);

          Ctor.precision = pr;
          return sd == null ? (external = true, round(sum, pr)) : sum;
        }

        sum = t;
      }
    } // Calculate the base 10 exponent from the base 1e7 exponent.


    function getBase10Exponent(x) {
      var e = x.e * LOG_BASE,
          w = x.d[0]; // Add the number of digits of the first word of the digits array.

      for (; w >= 10; w /= 10) e++;

      return e;
    }

    function getLn10(Ctor, sd, pr) {
      if (sd > Ctor.LN10.sd()) {
        // Reset global state in case the exception is caught.
        external = true;
        if (pr) Ctor.precision = pr;
        throw Error(decimalError + 'LN10 precision limit exceeded');
      }

      return round(new Ctor(Ctor.LN10), sd);
    }

    function getZeroString(k) {
      var zs = '';

      for (; k--;) zs += '0';

      return zs;
    }
    /*
     * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant
     * digits.
     *
     *  ln(n) is non-terminating (n != 1)
     *
     */


    function ln(y, sd) {
      var c,
          c0,
          denominator,
          e,
          numerator,
          sum,
          t,
          wpr,
          x2,
          n = 1,
          guard = 10,
          x = y,
          xd = x.d,
          Ctor = x.constructor,
          pr = Ctor.precision; // ln(-x) = NaN
      // ln(0) = -Infinity

      if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity')); // ln(1) = 0

      if (x.eq(ONE)) return new Ctor(0);

      if (sd == null) {
        external = false;
        wpr = pr;
      } else {
        wpr = sd;
      }

      if (x.eq(10)) {
        if (sd == null) external = true;
        return getLn10(Ctor, wpr);
      }

      wpr += guard;
      Ctor.precision = wpr;
      c = digitsToString(xd);
      c0 = c.charAt(0);
      e = getBase10Exponent(x);

      if (Math.abs(e) < 1.5e15) {
        // Argument reduction.
        // The series converges faster the closer the argument is to 1, so using
        // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
        // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
        // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
        // later be divided by this number, then separate out the power of 10 using
        // ln(a*10^b) = ln(a) + b*ln(10).
        // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
        //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
        // max n is 6 (gives 0.7 - 1.3)
        while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
          x = x.times(y);
          c = digitsToString(x.d);
          c0 = c.charAt(0);
          n++;
        }

        e = getBase10Exponent(x);

        if (c0 > 1) {
          x = new Ctor('0.' + c);
          e++;
        } else {
          x = new Ctor(c0 + '.' + c.slice(1));
        }
      } else {
        // The argument reduction method above may result in overflow if the argument y is a massive
        // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
        // function using ln(x*10^e) = ln(x) + e*ln(10).
        t = getLn10(Ctor, wpr + 2, pr).times(e + '');
        x = ln(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
        Ctor.precision = pr;
        return sd == null ? (external = true, round(x, pr)) : x;
      } // x is reduced to a value near 1.
      // Taylor series.
      // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
      // where x = (y - 1)/(y + 1)    (|x| < 1)


      sum = numerator = x = divide(x.minus(ONE), x.plus(ONE), wpr);
      x2 = round(x.times(x), wpr);
      denominator = 3;

      for (;;) {
        numerator = round(numerator.times(x2), wpr);
        t = sum.plus(divide(numerator, new Ctor(denominator), wpr));

        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
          sum = sum.times(2); // Reverse the argument reduction.

          if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
          sum = divide(sum, new Ctor(n), wpr);
          Ctor.precision = pr;
          return sd == null ? (external = true, round(sum, pr)) : sum;
        }

        sum = t;
        denominator += 2;
      }
    }
    /*
     * Parse the value of a new Decimal `x` from string `str`.
     */


    function parseDecimal(x, str) {
      var e, i, len; // Decimal point?

      if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?

      if ((i = str.search(/e/i)) > 0) {
        // Determine exponent.
        if (e < 0) e = i;
        e += +str.slice(i + 1);
        str = str.substring(0, i);
      } else if (e < 0) {
        // Integer.
        e = str.length;
      } // Determine leading zeros.


      for (i = 0; str.charCodeAt(i) === 48;) ++i; // Determine trailing zeros.


      for (len = str.length; str.charCodeAt(len - 1) === 48;) --len;

      str = str.slice(i, len);

      if (str) {
        len -= i;
        e = e - i - 1;
        x.e = mathfloor(e / LOG_BASE);
        x.d = []; // Transform base
        // e is the base 10 exponent.
        // i is where to slice str to get the first word of the digits array.

        i = (e + 1) % LOG_BASE;
        if (e < 0) i += LOG_BASE;

        if (i < len) {
          if (i) x.d.push(+str.slice(0, i));

          for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));

          str = str.slice(i);
          i = LOG_BASE - str.length;
        } else {
          i -= len;
        }

        for (; i--;) str += '0';

        x.d.push(+str);
        if (external && (x.e > MAX_E || x.e < -MAX_E)) throw Error(exponentOutOfRange + e);
      } else {
        // Zero.
        x.s = 0;
        x.e = 0;
        x.d = [0];
      }

      return x;
    }
    /*
     * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).
     */


    function round(x, sd, rm) {
      var i,
          j,
          k,
          n,
          rd,
          doRound,
          w,
          xdi,
          xd = x.d; // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
      // w: the word of xd which contains the rounding digit, a base 1e7 number.
      // xdi: the index of w within xd.
      // n: the number of digits of w.
      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
      // they had leading zeros)
      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).
      // Get the length of the first word of the digits array xd.

      for (n = 1, k = xd[0]; k >= 10; k /= 10) n++;

      i = sd - n; // Is the rounding digit in the first word of xd?

      if (i < 0) {
        i += LOG_BASE;
        j = sd;
        w = xd[xdi = 0];
      } else {
        xdi = Math.ceil((i + 1) / LOG_BASE);
        k = xd.length;
        if (xdi >= k) return x;
        w = k = xd[xdi]; // Get the number of digits of w.

        for (n = 1; k >= 10; k /= 10) n++; // Get the index of rd within w.


        i %= LOG_BASE; // Get the index of rd within w, adjusted for leading zeros.
        // The number of leading zeros of w is given by LOG_BASE - n.

        j = i - LOG_BASE + n;
      }

      if (rm !== void 0) {
        k = mathpow(10, n - j - 1); // Get the rounding digit at index j of w.

        rd = w / k % 10 | 0; // Are there any non-zero digits after the rounding digit?

        doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k; // The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the
        // digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give
        // 714.

        doRound = rm < 4 ? (rd || doRound) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
        (i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
      }

      if (sd < 1 || !xd[0]) {
        if (doRound) {
          k = getBase10Exponent(x);
          xd.length = 1; // Convert sd to decimal places.

          sd = sd - k - 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.

          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
          x.e = mathfloor(-sd / LOG_BASE) || 0;
        } else {
          xd.length = 1; // Zero.

          xd[0] = x.e = x.s = 0;
        }

        return x;
      } // Remove excess digits.


      if (i == 0) {
        xd.length = xdi;
        k = 1;
        xdi--;
      } else {
        xd.length = xdi + 1;
        k = mathpow(10, LOG_BASE - i); // E.g. 56700 becomes 56000 if 7 is the rounding digit.
        // j > 0 means i > number of leading zeros of w.

        xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k : 0;
      }

      if (doRound) {
        for (;;) {
          // Is the digit to be rounded up in the first word of xd?
          if (xdi == 0) {
            if ((xd[0] += k) == BASE) {
              xd[0] = 1;
              ++x.e;
            }

            break;
          } else {
            xd[xdi] += k;
            if (xd[xdi] != BASE) break;
            xd[xdi--] = 0;
            k = 1;
          }
        }
      } // Remove trailing zeros.


      for (i = xd.length; xd[--i] === 0;) xd.pop();

      if (external && (x.e > MAX_E || x.e < -MAX_E)) {
        throw Error(exponentOutOfRange + getBase10Exponent(x));
      }

      return x;
    }

    function subtract(x, y) {
      var d,
          e,
          i,
          j,
          k,
          len,
          xd,
          xe,
          xLTy,
          yd,
          Ctor = x.constructor,
          pr = Ctor.precision; // Return y negated if x is zero.
      // Return x if y is zero and x is non-zero.

      if (!x.s || !y.s) {
        if (y.s) y.s = -y.s;else y = new Ctor(x);
        return external ? round(y, pr) : y;
      }

      xd = x.d;
      yd = y.d; // x and y are non-zero numbers with the same sign.

      e = y.e;
      xe = x.e;
      xd = xd.slice();
      k = xe - e; // If exponents differ...

      if (k) {
        xLTy = k < 0;

        if (xLTy) {
          d = xd;
          k = -k;
          len = yd.length;
        } else {
          d = yd;
          e = xe;
          len = xd.length;
        } // Numbers with massively different exponents would result in a very high number of zeros
        // needing to be prepended, but this can be avoided while still ensuring correct rounding by
        // limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.


        i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

        if (k > i) {
          k = i;
          d.length = 1;
        } // Prepend zeros to equalise exponents.


        d.reverse();

        for (i = k; i--;) d.push(0);

        d.reverse(); // Base 1e7 exponents equal.
      } else {
        // Check digits to determine which is the bigger number.
        i = xd.length;
        len = yd.length;
        xLTy = i < len;
        if (xLTy) len = i;

        for (i = 0; i < len; i++) {
          if (xd[i] != yd[i]) {
            xLTy = xd[i] < yd[i];
            break;
          }
        }

        k = 0;
      }

      if (xLTy) {
        d = xd;
        xd = yd;
        yd = d;
        y.s = -y.s;
      }

      len = xd.length; // Append zeros to xd if shorter.
      // Don't add zeros to yd if shorter as subtraction only needs to start at yd length.

      for (i = yd.length - len; i > 0; --i) xd[len++] = 0; // Subtract yd from xd.


      for (i = yd.length; i > k;) {
        if (xd[--i] < yd[i]) {
          for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;

          --xd[j];
          xd[i] += BASE;
        }

        xd[i] -= yd[i];
      } // Remove trailing zeros.


      for (; xd[--len] === 0;) xd.pop(); // Remove leading zeros and adjust exponent accordingly.


      for (; xd[0] === 0; xd.shift()) --e; // Zero?


      if (!xd[0]) return new Ctor(0);
      y.d = xd;
      y.e = e; //return external && xd.length >= pr / LOG_BASE ? round(y, pr) : y;

      return external ? round(y, pr) : y;
    }

    function toString(x, isExp, sd) {
      var k,
          e = getBase10Exponent(x),
          str = digitsToString(x.d),
          len = str.length;

      if (isExp) {
        if (sd && (k = sd - len) > 0) {
          str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
        } else if (len > 1) {
          str = str.charAt(0) + '.' + str.slice(1);
        }

        str = str + (e < 0 ? 'e' : 'e+') + e;
      } else if (e < 0) {
        str = '0.' + getZeroString(-e - 1) + str;
        if (sd && (k = sd - len) > 0) str += getZeroString(k);
      } else if (e >= len) {
        str += getZeroString(e + 1 - len);
        if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
      } else {
        if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);

        if (sd && (k = sd - len) > 0) {
          if (e + 1 === len) str += '.';
          str += getZeroString(k);
        }
      }

      return x.s < 0 ? '-' + str : str;
    } // Does not strip trailing zeros.


    function truncate(arr, len) {
      if (arr.length > len) {
        arr.length = len;
        return true;
      }
    } // Decimal methods

    /*
     *  clone
     *  config/set
     */

    /*
     * Create and return a Decimal constructor with the same configuration properties as this Decimal
     * constructor.
     *
     */


    function clone(obj) {
      var i, p, ps;
      /*
       * The Decimal constructor and exported function.
       * Return a new Decimal instance.
       *
       * value {number|string|Decimal} A numeric value.
       *
       */

      function Decimal(value) {
        var x = this; // Decimal called without new.

        if (!(x instanceof Decimal)) return new Decimal(value); // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
        // which points to Object.

        x.constructor = Decimal; // Duplicate.

        if (value instanceof Decimal) {
          x.s = value.s;
          x.e = value.e;
          x.d = (value = value.d) ? value.slice() : value;
          return;
        }

        if (typeof value === 'number') {
          // Reject Infinity/NaN.
          if (value * 0 !== 0) {
            throw Error(invalidArgument + value);
          }

          if (value > 0) {
            x.s = 1;
          } else if (value < 0) {
            value = -value;
            x.s = -1;
          } else {
            x.s = 0;
            x.e = 0;
            x.d = [0];
            return;
          } // Fast path for small integers.


          if (value === ~~value && value < 1e7) {
            x.e = 0;
            x.d = [value];
            return;
          }

          return parseDecimal(x, value.toString());
        } else if (typeof value !== 'string') {
          throw Error(invalidArgument + value);
        } // Minus sign?


        if (value.charCodeAt(0) === 45) {
          value = value.slice(1);
          x.s = -1;
        } else {
          x.s = 1;
        }

        if (isDecimal.test(value)) parseDecimal(x, value);else throw Error(invalidArgument + value);
      }

      Decimal.prototype = P;
      Decimal.ROUND_UP = 0;
      Decimal.ROUND_DOWN = 1;
      Decimal.ROUND_CEIL = 2;
      Decimal.ROUND_FLOOR = 3;
      Decimal.ROUND_HALF_UP = 4;
      Decimal.ROUND_HALF_DOWN = 5;
      Decimal.ROUND_HALF_EVEN = 6;
      Decimal.ROUND_HALF_CEIL = 7;
      Decimal.ROUND_HALF_FLOOR = 8;
      Decimal.clone = clone;
      Decimal.config = Decimal.set = config;
      if (obj === void 0) obj = {};

      if (obj) {
        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'];

        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
      }

      Decimal.config(obj);
      return Decimal;
    }
    /*
     * Configure global settings for a Decimal constructor.
     *
     * `obj` is an object with one or more of the following properties,
     *
     *   precision  {number}
     *   rounding   {number}
     *   toExpNeg   {number}
     *   toExpPos   {number}
     *
     * E.g. Decimal.config({ precision: 20, rounding: 4 })
     *
     */


    function config(obj) {
      if (!obj || typeof obj !== 'object') {
        throw Error(decimalError + 'Object expected');
      }

      var i,
          p,
          v,
          ps = ['precision', 1, MAX_DIGITS, 'rounding', 0, 8, 'toExpNeg', -1 / 0, 0, 'toExpPos', 0, 1 / 0];

      for (i = 0; i < ps.length; i += 3) {
        if ((v = obj[p = ps[i]]) !== void 0) {
          if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;else throw Error(invalidArgument + p + ': ' + v);
        }
      }

      if ((v = obj[p = 'LN10']) !== void 0) {
        if (v == Math.LN10) this[p] = new this(v);else throw Error(invalidArgument + p + ': ' + v);
      }

      return this;
    } // Create and configure initial Decimal constructor.


    var Decimal = clone(defaults); // Internal constant.

    ONE = new Decimal(1);

    var Lang;
    (function (Lang) {
        Lang["CN"] = "cn";
        Lang["EN"] = "en";
    })(Lang || (Lang = {}));
    var NFTIssueParamsIconType;
    (function (NFTIssueParamsIconType) {
        NFTIssueParamsIconType["File"] = "pic";
        NFTIssueParamsIconType["TXId"] = "txId";
    })(NFTIssueParamsIconType || (NFTIssueParamsIconType = {}));
    var SdkType;
    (function (SdkType) {
        SdkType[SdkType["App"] = 1] = "App";
        SdkType[SdkType["Metaidjs"] = 2] = "Metaidjs";
        SdkType[SdkType["Dotwallet"] = 3] = "Dotwallet";
    })(SdkType || (SdkType = {}));

    var SDK = /** @class */ (function () {
        function SDK(options) {
            this.metaidjs = null;
            this.appMetaidjs = null;
            this.dotwalletjs = null;
            this.isApp = false;
            this.appId = '';
            this.appScrect = '';
            this.metaIdTag = '';
            this.showmoneyApi = '';
            this.type = SdkType.Metaidjs;
            this.initIng = false;
            this.callBackFail = undefined; // 统一回调错误处理
            this.axios = null;
            this.nftAppAddress = '16tp7PhBjvYpHcv53AXkHYHTynmy6xQnxy'; // Nft收手续费的地址
            this.metaIdTag = options.metaIdTag;
            this.getAccessToken = options.getAccessToken;
            this.metaidjsOptions = options.metaidjsOptions;
            this.dotwalletOptions = options.dotwalletOptions;
            this.showmoneyApi = options.showmoneyApi;
            this.appOptions = options.appOptions;
            if (options.callBackFail)
                this.callBackFail = options.callBackFail;
            // 初始化是否App环境
            // @ts-ignore
            var appMetaIdJs = window.appMetaIdJsV2
                ? window.appMetaIdJsV2
                : window.appMetaIdJs
                    ? window.appMetaIdJs
                    : null;
            if (appMetaIdJs) {
                this.appMetaidjs = appMetaIdJs;
                this.appId = options.appOptions.clientId;
                this.appScrect = options.appOptions.clientSecret;
                this.isApp = true;
            }
            this.appId = options.appOptions.clientId;
            this.appScrect = options.appOptions.clientSecret;
            this.initAxiosConfig();
        }
        SDK.prototype.initSdk = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.initIng = true;
                if (_this.type === SdkType.Metaidjs) {
                    _this.metaidjs = new MetaIdJs(__assign$1(__assign$1({}, _this.metaidjsOptions), { onLoaded: function () {
                            _this.initIng = false;
                            resolve();
                        }, onError: function (error) {
                            _this.initIng = false;
                            reject(error);
                        } }));
                }
                else if (_this.type === SdkType.Dotwallet) {
                    _this.dotwalletjs = new DotWallet__default['default'](_this.dotwalletOptions);
                    _this.initIng = false;
                    resolve();
                }
                else {
                    _this.initIng = false;
                    resolve();
                }
            });
        };
        // 更改 sdk 环境类型
        SDK.prototype.changeSdkType = function (type) {
            this.type = type;
            if (type === SdkType.Dotwallet) {
                if (this.dotwalletOptions) {
                    this.appId = this.dotwalletOptions.clientID;
                    this.appScrect = this.dotwalletOptions.clientSecret;
                }
            }
            else if (type === SdkType.App) {
                this.appId = this.appOptions.clientId;
                this.appScrect = this.appOptions.clientSecret;
            }
            else {
                this.appId = this.appOptions.clientId;
                this.appScrect = this.appOptions.clientSecret;
            }
        };
        SDK.prototype.isSdkFinish = function () {
            return this.appMetaidjs || this.metaidjs || this.dotwalletjs;
        };
        // 初始化Api配置
        SDK.prototype.initAxiosConfig = function () {
            var _this = this;
            this.axios = axios__default['default'].create({
                baseURL: this.showmoneyApi
            });
            // 添加响应拦截器
            this.axios.interceptors.response.use(function (response) {
                // 对响应数据做点什么
                return response.data;
            }, function (error) { return __awaiter$1(_this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.callBackFail) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.callBackFail(error)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: 
                        // 对响应错误做点什么
                        return [2 /*return*/, Promise.reject(error)];
                    }
                });
            }); });
        };
        // 跳转授权
        SDK.prototype.login = function () {
            if (this.type === SdkType.App) {
                return;
            }
            else if (this.type === SdkType.Metaidjs) {
                var url = this.metaidjsOptions.baseUri + "/userLogin?response_type=code&client_id=" + this.appId + "&redirect_uri=" + this.metaidjsOptions.redirectUrl + "&scope=app&from=" + this.metaidjsOptions.redirectUrl;
                window.location.href = url;
            }
            else {
                if (this.dotwalletjs) {
                    this.dotwalletjs.login();
                }
            }
        };
        // getToken
        SDK.prototype.getToken = function (params) {
            var _a, _b;
            if (this.type === SdkType.App) {
                return;
            }
            if (this.type === SdkType.Metaidjs) {
                return (_a = this.axios) === null || _a === void 0 ? void 0 : _a.post('/showmoney/oauth2/oauth/token', {
                    code: params.code,
                    grant_type: 'authorization_code',
                    redirect_uri: this.metaidjsOptions.redirectUrl,
                    scope: 'app',
                    client_id: this.appId,
                    client_secret: this.appScrect
                }, {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'
                    },
                    transformRequest: [
                        function (data) {
                            return qs__default['default'].stringify(data);
                        }
                    ]
                });
            }
            else {
                return (_b = this.dotwalletjs) === null || _b === void 0 ? void 0 : _b.getToken(params);
            }
        };
        //  refreshToken
        SDK.prototype.refreshToken = function (params) {
            if (this.type === SdkType.App) {
                return;
            }
            if (this.type === SdkType.Metaidjs) {
                return this.axios.post('/showmoney/oauth2/oauth/token', {
                    grant_type: 'refresh_token',
                    client_id: this.appId,
                    client_secret: this.appScrect,
                    refresh_token: params.refreshToken
                }, {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'
                    },
                    transformRequest: [
                        function (data) {
                            return qs__default['default'].stringify(data);
                        }
                    ]
                });
            }
            else {
                return this.dotwalletjs.refreshToken(params);
            }
        };
        SDK.prototype.getUserInfo = function () {
            var _this = this;
            return new Promise(function (resolve) {
                var _a, _b, _c;
                var params = {
                    accessToken: _this.getAccessToken(),
                    callback: function (res) {
                        _this.callback(res, resolve);
                    }
                };
                if (_this.type === SdkType.App) {
                    var functionName = "getUserInfoCallBack";
                    // @ts-ignore
                    window[functionName] = params.callback;
                    if (window.appMetaIdJsV2) {
                        (_a = window.appMetaIdJsV2) === null || _a === void 0 ? void 0 : _a.getUserInfo(_this.appId, _this.appScrect, functionName);
                    }
                    else {
                        (_b = window.appMetaIdJs) === null || _b === void 0 ? void 0 : _b.getUserInfo(_this.appId, _this.appScrect, functionName);
                    }
                }
                else if (SdkType.Metaidjs) {
                    (_c = _this.metaidjs) === null || _c === void 0 ? void 0 : _c.getUserInfo(params);
                }
                else {
                    // @ts-ignore
                    _this.dotwalletjs.getMetaIDUserInfo(params);
                }
            });
        };
        SDK.prototype.sendMetaDataTx = function (params) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var _a, _b, _c;
                if (!params.payCurrency)
                    params.payCurrency = 'BSV';
                if (typeof params.needConfirm === 'undefined')
                    params.needConfirm = true;
                if (!params.encrypt)
                    params.encrypt = '0';
                if (!params.dataType)
                    params.dataType = 'application/json';
                var accessToken = _this.getAccessToken();
                if (_this.isApp) {
                    var functionName = "sendMetaDataTxCallBack";
                    // @ts-ignore
                    window[functionName] = params.callback;
                    if (window.appMetaIdJsV2) {
                        (_a = window.appMetaIdJsV2) === null || _a === void 0 ? void 0 : _a.sendMetaDataTx(accessToken, JSON.stringify(params), functionName);
                    }
                    else {
                        (_b = window.appMetaIdJs) === null || _b === void 0 ? void 0 : _b.sendMetaDataTx(accessToken, JSON.stringify(params), functionName);
                    }
                }
                else {
                    __assign$1({ callback: function (res) {
                            _this.callback(res, resolve);
                        }, onCancel: function (res) {
                            reject(res);
                        }, metaIdTag: _this.metaIdTag, accessToken: accessToken }, params);
                    window.handleNotEnoughMoney = function (res) {
                        reject();
                    };
                    (_c = _this.metaidjs) === null || _c === void 0 ? void 0 : _c.sendMetaDataTx(__assign$1({ callback: function (res) {
                            _this.callback(res, resolve);
                        }, onCancel: function (res) {
                            reject(res);
                        }, accessToken: accessToken }, params));
                }
            });
        };
        SDK.prototype.eciesDecryptData = function (data) {
            var _this = this;
            return new Promise(function (resolve) {
                var _a, _b, _c;
                var _params = {
                    callback: function (res) {
                        _this.callback(res, resolve);
                    },
                    accessToken: _this.getAccessToken(),
                    data: data
                };
                if (_this.type === SdkType.App) {
                    var functionName = "eciesDecryptDataCallBack";
                    // @ts-ignore
                    window[functionName] = _params.callback;
                    if (window.appMetaIdJsV2) {
                        (_a = window.appMetaIdJsV2) === null || _a === void 0 ? void 0 : _a.decryptData(_params.accessToken, data, functionName);
                    }
                    else {
                        (_b = window.appMetaIdJs) === null || _b === void 0 ? void 0 : _b.decryptData(_params.accessToken, data, functionName);
                    }
                }
                else if (_this.type === SdkType.Metaidjs) {
                    (_c = _this.metaidjs) === null || _c === void 0 ? void 0 : _c.eciesDecryptData(_params);
                }
                else {
                    // 待兼容
                    // @ts-ignore
                    _this.dotwalletjs.ecdhDecryptData(_params);
                }
            });
        };
        // 获取用户余额
        SDK.prototype.getBalance = function () {
            var _this = this;
            return new Promise(function (resolve) {
                var _a, _b;
                if (_this.isApp) {
                    var token = _this.getAccessToken();
                    var functionName = 'getBalanceCallBack';
                    window[functionName] = function (_res) {
                        var res = JSON.parse(_res);
                        var bsv = res.data;
                        _this.callback({
                            code: res.code,
                            data: {
                                bsv: bsv,
                                satoshis: new Decimal(bsv).mul(Math.pow(10, 8))
                            }
                        }, resolve);
                    };
                    if (window.appMetaIdJsV2) {
                        (_a = window.appMetaIdJsV2) === null || _a === void 0 ? void 0 : _a.getBalance(token, functionName);
                    }
                    else {
                        (_b = window.appMetaIdJs) === null || _b === void 0 ? void 0 : _b.getBalance(token, functionName);
                    }
                }
                else {
                    //@ts-ignore
                    _this.metaidjs.getBalance({
                        callback: function (res) {
                            _this.callback(res, resolve);
                        }
                    });
                }
            });
        };
        // 统一回调处理
        SDK.prototype.callback = function (res, resolve) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(res.code !== 200)) return [3 /*break*/, 2];
                            if (!this.callBackFail) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.callBackFail(res)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            resolve(res);
                            return [2 /*return*/];
                    }
                });
            });
        };
        // 处理附件
        SDK.prototype.setAttachments = function (_data, fileAttrs) {
            return new Promise(function (resolve) {
                var attachments = [];
                var data = __assign$1({}, _data);
                fileAttrs.map(function (item, index) {
                    for (var i in data) {
                        if (i === item.name) {
                            if (typeof data[i] !== 'string') {
                                attachments.push({
                                    fileName: data[i].name,
                                    fileType: data[i].data_type,
                                    data: data[i].hexData,
                                    encrypt: item.encrypt
                                });
                                data[i] = "![metafile](" + index + ")";
                            }
                        }
                    }
                });
                resolve({ data: data, attachments: attachments });
            });
        };
        // 文件转为MetaFile 格式，便于后续处理附件
        SDK.prototype.fileToMetaFile = function (file) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var fileType = file.type;
                var reader = new FileReader();
                var fileBinary;
                reader.onload = function () {
                    var arrayBuffer = reader.result;
                    var buffer = '';
                    var hex = '';
                    if (arrayBuffer) {
                        // @ts-ignore
                        buffer = Buffer.from(arrayBuffer);
                        // @ts-ignore
                        hex = buffer.toString('hex');
                        fileBinary = buffer;
                    }
                    var fileData = 'data:' + fileType + ';base64,' + _this.hexToBase64(hex);
                    var imgData = {
                        base64Data: fileData,
                        BufferData: fileBinary,
                        hexData: hex,
                        name: file.name,
                        raw: file,
                        data_type: fileType
                    };
                    /*
                        fileBinary二进制流
                        fileData 图片base64编码
                        fileType 文件名
                        */
                    resolve(imgData);
                };
                reader.onerror = function (error) {
                    reject(reject);
                };
                reader.readAsArrayBuffer(file);
            });
        };
        // 十六进制 转换为 图片
        SDK.prototype.hexToBase64 = function (str) {
            if (!str) {
                return 'https://showjob.oss-cn-hangzhou.aliyuncs.com/index/img_photo_default.png';
            }
            var a = [];
            for (var i_1 = 0, len_1 = str.length; i_1 < len_1; i_1 += 2) {
                a.push(parseInt(str.substr(i_1, 2), 16));
            }
            var binary = '';
            var bytes = new Uint8Array(a);
            var len = bytes.byteLength;
            for (var i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            var sty = window.btoa(binary);
            return sty;
        };
        SDK.prototype.createMetaFileProtocol = function (params) {
            var _a = params.data, name = _a.name, data = __rest(_a, ["name"]);
            var nameArry = name.split('.');
            var node_name = '';
            nameArry.map(function (item, index) {
                node_name += item;
                if (index === nameArry.length - 2) {
                    node_name += uuid.v4();
                }
            });
            return this.sendMetaDataTx({
                nodeName: 'NftIssue-6d3eaf759bbc',
                brfcId: '6d3eaf759bbc',
                path: '/Protocols/MetaFile',
                payCurrency: 'bsv',
                // payTo: [
                //     { address: 'XXXXXXXXXX', amount: 1000 }
                // ],
                data: JSON.stringify(__assign$1(__assign$1({}, data), { encoding: 'binary', node_name: node_name })),
                needConfirm: false
            });
        };
        // NFT
        // 检查NFT操作txid状态，成功后才可继续其他上链操作，否则容易双花
        SDK.prototype.checkNftTxIdStatus = function (txId, timer, parentResolve, parentReject) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                fetch("https://api.sensible.satoplay.cn/tx/" + txId)
                    .then(function (response) {
                    return response.json();
                })
                    .then(function (response) {
                    debugger;
                    if (response.code === 0) {
                        if (parentResolve)
                            parentResolve();
                        else
                            resolve();
                    }
                    else {
                        // 超过30次还不成功就 回调失败
                        if (timer && timer > 30) {
                            if (parentReject)
                                parentReject();
                            else
                                reject();
                        }
                        else {
                            setTimeout(function () {
                                _this.checkNftTxIdStatus(txId, timer ? timer + 1 : 1, parentResolve ? parentResolve : resolve, parentReject ? parentReject : reject);
                            }, 1000);
                        }
                    }
                })
                    .catch(function () {
                    if (parentReject)
                        parentReject();
                    else
                        reject();
                });
            });
        };
        // 铸造 nft 1. genesisNFT  2.createNftDataProtocol 3.issueNFT
        SDK.prototype.createNFT = function (params) {
            var _this = this;
            return new Promise(function (resolve, reject) { return __awaiter$1(_this, void 0, void 0, function () {
                var nftTotal, codeHash, genesis, genesisTxId, sensibleId, _params, amount, issueOperate, res;
                var _this = this;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            nftTotal = params.nftTotal, codeHash = params.codeHash, genesis = params.genesis, genesisTxId = params.genesisTxId, sensibleId = params.sensibleId, _params = __rest(params, ["nftTotal", "codeHash", "genesis", "genesisTxId", "sensibleId"]);
                            amount = 0;
                            issueOperate = function () { return __awaiter$1(_this, void 0, void 0, function () {
                                var issueRes;
                                return __generator$1(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!!params.checkOnly) return [3 /*break*/, 2];
                                            return [4 /*yield*/, this.checkNftTxIdStatus(genesisTxId).catch(function () {
                                                    return reject('createNFT error');
                                                })];
                                        case 1:
                                            _a.sent();
                                            _a.label = 2;
                                        case 2: return [4 /*yield*/, this.issueNFT(__assign$1({ genesisId: genesis, genesisTxid: genesisTxId, codehash: codeHash, sensibleId: sensibleId }, _params))];
                                        case 3:
                                            issueRes = _a.sent();
                                            if (issueRes.code === 200) {
                                                if (issueRes.data.amount) {
                                                    amount += issueRes.data.amount;
                                                }
                                                if (params.checkOnly) {
                                                    resolve(Math.ceil(amount));
                                                }
                                                else {
                                                    resolve(__assign$1(__assign$1({}, issueRes.data), { codehash: codeHash, sensibleId: sensibleId, genesisId: genesis, genesisTxid: genesisTxId }));
                                                }
                                            }
                                            else {
                                                reject('createNFT error');
                                            }
                                            return [2 /*return*/];
                                    }
                                });
                            }); };
                            if (!(!codeHash || !genesis || !genesisTxId || !sensibleId)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.genesisNFT({
                                    nftTotal: nftTotal ? nftTotal : '1',
                                    checkOnly: params.checkOnly ? true : false
                                })];
                        case 1:
                            res = _a.sent();
                            if (res.code === 200) {
                                if (res.data.amount) {
                                    amount += res.data.amount;
                                    codeHash = '';
                                    genesis = '';
                                    genesisTxId = '';
                                    sensibleId = '';
                                }
                                else {
                                    codeHash = res.data.codehash;
                                    genesis = res.data.genesisId;
                                    genesisTxId = res.data.genesisTxid;
                                    sensibleId = res.data.sensibleId;
                                }
                                debugger;
                                issueOperate();
                            }
                            else {
                                reject('createNFT error');
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            issueOperate();
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); });
        };
        SDK.prototype.genesisNFT = function (params) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var _a;
                var _params = {
                    data: {
                        nftTotal: params.nftTotal,
                        signersRaw: [
                            {
                                satotxApiPrefix: 'https://satotx.showpay.top,https://cnsatotx.showpay.top',
                                satotxPubKey: '5b94858991d384c61ffd97174e895fcd4f62e4fea618916dc095fe4c149bbdf1188c9b33bc15cbe963a63b2522e70b80a5b722ac0e6180407917403755df4de27d69cc115c683a99face8c823cbccf73c7f0d546f1300b9ee2e96aea85542527f33b649f1885caebe19cf75d9a645807f03565c65bd4c99c8f6bb000644cfb56969eac3e9331c254b08aa279ceb64c47ef66be3f071e28b3a5a21e48cdfc3335d8b52e80a09a104a791ace6a2c1b4da88c52f9cc28c54a324e126ec91a988c1fe4e21afc8a84d0e876e01502386f74e7fc24fc32aa249075dd222361aea119d4824db2a797d58886e93bdd60556e504bb190b76a451a4e7b0431973c0410e71e808d0962415503931bbde3dfce5186b371c5bf729861f239ef626b7217d071dfd62bac877a847f2ac2dca07597a0bb9dc1969bed40606c025c4ff7b53a4a6bd921642199c16ede8165ed28da161739fa8d33f9f483212759498c1219d246092d14c9ae63808f58f03c8ca746904ba51fa326d793cea80cda411c85d35894bdb5'
                            },
                            {
                                satotxApiPrefix: 'https://satotx2.showpay.top,https://cnsatotx2.showpay.top',
                                satotxPubKey: '09539fcf01e83c7c649164ddd0dd42463ef10a98c665cd0d9f791446a3c4c2dd3916f6e76075b36a06f40731821f6b7dbb8bea8effa4ea461fecce4b6b2d45ca4dd923028fd6dc6ce49512616ca55f01162e5d2f85faa22ec40bc35d4978204a9b07a53f04297b886fa4abb095034f106f8ff0fd172e1e96bf7198cd5b9944ec1af32328a156877769ecabd41489a7ac858fd35cd8d93e68f33053077cf50bb397b66d160598963d1b663b3bce6371877df0e33866e4d9557b0bde7a2a930c274fa9e697d9f17ad88528ecab1be32a9d518bb950fc8264f2056d4f395fcdc12dd59cb8945013105ed52433326e3fa067237f17ab62e65557c7538e634daf11288b7eaab537abf2cc2a90159632fb9bb8fac01085b70024e01e42cd431db70d004963e46da8733c18fd5ffaaecfd67c860ae37441271ba545f86cae72690a5a3261e0125a2bf069fe28a1e1431b4cac29f8a43cbefbe22d5ae4b92441f8915881560271ee31379d365da38f1a5fa1414d6ad71943a083cce0ee45d47f81ff3c9d'
                            },
                            {
                                satotxApiPrefix: 'https://satotx3.showpay.top,https://cnsatotx3.showpay.top',
                                satotxPubKey: '8e37df222f9af47980ad72d31b2619b49460c7be3a4c1034c0e7f43146d80058e52bfc53b0608db5a9ec5cb832c326f785f5c4e4349cc9fd647839738f465573d1707ef84d14c41ad857a1a8e5a075ae953be4c52481ee3b8e85891613dcf99c1f7bf3a51cd67ed92f9b71d77b8517a57af5fb4e2bad7197031e00c1d8b85d0abc62fb98952d9ddfb43b47c01590ef0a365aed89b179505ccfd1d70effe4d375d5e774578434f8f9bb2281100b6e1daf8df4a40af35853c91aee2dc7f578034fa534586985e4df30b7a85efab943f68f01b46f72ced16655ac4f7e7f0439e0e6b43803dc7e262512c57ef862d41b98344ea6e725683846d91209ad87097cb4ae7092cc2c4ebd39383905e61eeaae495d8b3a57f9da8cca760b9546635cef2a8728c4209891ad1e5cbeb75d2b798f0dabd1eceaf4b297186fd2a45ed58fbaed886a4dc2f8690c9070061b9481e446319b7f0a54f9d94e7505e87e3d81bcd664ecc29acc2942361e60b30fa965cdc88185163c2857644d837c9d839bb9f6b8e6dd'
                            },
                            {
                                satotxApiPrefix: 'https://s1.satoplay.cn,https://s1.satoplay.com',
                                satotxPubKey: '2c8c0117aa5edba9a4539e783b6a1bdbc1ad88ad5b57f3d9c5cba55001c45e1fedb877ebc7d49d1cfa8aa938ccb303c3a37732eb0296fee4a6642b0ff1976817b603404f64c41ec098f8cd908caf64b4a3aada220ff61e252ef6d775079b69451367eda8fdb37bc55c8bfd69610e1f31b9d421ff44e3a0cfa7b11f334374827256a0b91ce80c45ffb798798e7bd6b110134e1a3c3fa89855a19829aab3922f55da92000495737e99e0094e6c4dbcc4e8d8de5459355c21ff055d039a202076e4ca263b745a885ef292eec0b5a5255e6ecc45534897d9572c3ebe97d36626c7b1e775159e00b17d03bc6d127260e13a252afd89bab72e8daf893075f18c1840cb394f18a9817913a9462c6ffc8951bee50a05f38da4c9090a4d6868cb8c955e5efb4f3be4e7cf0be1c399d78a6f6dd26a0af8492dca67843c6da9915bae571aa9f4696418ab1520dd50dd05f5c0c7a51d2843bd4d9b6b3b79910e98f3d98099fd86d71b2fac290e32bdacb31943a8384a7668c32a66be127b74390b4b0dec6455'
                            },
                            {
                                satotxApiPrefix: 'https://satotx.metasv.com',
                                satotxPubKey: '19d9193ee2e95d09445d28408e8a3da730b2d557cd8d39a7ae4ebbfbceb17ed5d745623529ad33d043511f3e205c1f92b6322833424d19823c3b611b3adabb74e1006e0e93a8f1e0b97ab801c6060a4c060f775998d9f003568ab4ea7633a0395eb761c36106e229394f2c271b8522a44a5ae759254f5d22927923ba85b3729460ecccca07a5556299aa7f2518814c74a2a4d48b48013d609002631f2d93c906d07077ef58d473e3d971362d1129c1ab9b8f9b1365519f0c023c1cadad5ab57240d19e256e08022fd0708951ff90a8af0655aff806c6382d0a72c13f1e52b88222d7dfc6357179b06ffcf937f9da3b0419908aa589a731e26bbaba2fa0b754bf722e338c5627b11dc24aadc4d83c35851c034936cf0df18167e856a5f0a7121d23cd48b3f8a420869a37bd1362905d7f76ff18a991f75a0f9d1bcfc18416d76691cc357cbdcc8cc0df9dbd9318a40e08adb2fb4e78b3c47bdf07eeed4f3f4e0f7e81e37460a09b857e0194c72ec03bb564b5b409d8a1b84c153186ecbb4cfdfd'
                            }
                        ],
                        checkOnly: params.checkOnly,
                        seriesName: params.seriesName
                    },
                    callback: function (res) {
                        debugger;
                        _this.callback(res, resolve);
                    }
                };
                if (_this.isApp) {
                    var functionName = "genesisNFTCallBack";
                    window[functionName] = _params.callback;
                    var accessToken = _this.getAccessToken();
                    if (window.appMetaIdJsV2) {
                        window.appMetaIdJsV2.genesisNFT(accessToken, JSON.stringify(_params.data), functionName);
                    }
                    else {
                        window.appMetaIdJs.genesisNFT(accessToken, JSON.stringify(_params.data), functionName);
                    }
                }
                else {
                    debugger;
                    // @ts-ignore
                    (_a = _this.metaidjs) === null || _a === void 0 ? void 0 : _a.genesisNFT(_params);
                }
            });
        };
        SDK.prototype.checkUserCanIssueNft = function (params) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                fetch(_this.showmoneyApi + "/aggregation/v2/app/nftOnShow/getMyNftIssueEligibility/" + params.metaId + "/" + params.address + "/0/" + params.language)
                    .then(function (response) {
                    return response.json();
                })
                    .then(function (response) {
                    if (response.code === 0) {
                        resolve(response);
                    }
                    else {
                        resolve(response);
                    }
                })
                    .catch(function () {
                    reject();
                });
            });
        };
        // nft 铸造
        SDK.prototype.issueNFT = function (params) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var _a;
                var _params = {
                    data: __assign$1({ payTo: [{ address: _this.nftAppAddress, amount: 10000 }] }, params),
                    callback: function (res) {
                        _this.callback(res, resolve);
                    }
                };
                if (_this.isApp) {
                    var functionName = "issueNFTCallBack";
                    window[functionName] = _params.callback;
                    var accessToken = _this.getAccessToken();
                    if (window.appMetaIdJsV2) {
                        window.appMetaIdJsV2.issueNFT(accessToken, JSON.stringify(_params.data), functionName);
                    }
                    else {
                        window.appMetaIdJs.issueNFT(accessToken, JSON.stringify(_params.data), functionName);
                    }
                }
                else {
                    // @ts-ignore
                    (_a = _this.metaidjs) === null || _a === void 0 ? void 0 : _a.issueNFT(_params);
                }
            });
        };
        // metaidjs nft 购买
        SDK.prototype.nftBuy = function (params) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var _a;
                var amount = params.amount, data = __rest(params, ["amount"]);
                var _params = {
                    data: __assign$1(__assign$1({}, data), { payTo: [
                            {
                                address: _this.nftAppAddress,
                                amount: Math.ceil(new Decimal(amount * 0.05).toNumber())
                            }
                        ] }),
                    callback: function (res) {
                        _this.callback(res, resolve);
                    }
                };
                if (_this.isApp) {
                    var accessToken = _this.getAccessToken();
                    var functionName = "nftBuyCallBack";
                    // @ts-ignore
                    window[functionName] = _params.callback;
                    // @ts-ignore
                    if (window.appMetaIdJsV2) {
                        // @ts-ignore
                        window.appMetaIdJsV2.nftBuy(accessToken, JSON.stringify(_params.data), functionName);
                    }
                    else {
                        // @ts-ignore
                        window.appMetaIdJs.nftBuy(accessToken, JSON.stringify(_params.data), functionName);
                    }
                }
                else {
                    // @ts-ignore
                    (_a = _this.metaidjs) === null || _a === void 0 ? void 0 : _a.nftBuy(_params);
                }
            });
        };
        // nft 上架/销售
        SDK.prototype.nftSell = function (params) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var _a;
                var _params = {
                    data: __assign$1(__assign$1({}, params), { payTo: [{ address: _this.nftAppAddress, amount: 10000 }] }),
                    callback: function (res) {
                        debugger;
                        _this.callback(res, resolve);
                    }
                };
                if (_this.isApp) {
                    var accessToken = _this.getAccessToken();
                    var functionName = "nftSellCallBack";
                    // @ts-ignore
                    window[functionName] = _params.callback;
                    // @ts-ignore
                    if (window.appMetaIdJsV2) {
                        // @ts-ignore
                        window.appMetaIdJsV2.nftSell(accessToken, JSON.stringify(_params.data), functionName);
                    }
                    else {
                        // @ts-ignore
                        window.appMetaIdJs.nftSell(accessToken, JSON.stringify(_params.data), functionName);
                    }
                }
                else {
                    // @ts-ignore
                    (_a = _this.metaidjs) === null || _a === void 0 ? void 0 : _a.nftSell(_params);
                }
            });
        };
        // nft 下架/取消销售
        SDK.prototype.nftCancel = function (params) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var _a;
                var _params = {
                    data: __assign$1({ outputIndex: 0, payTo: [{ address: _this.nftAppAddress, amount: 10000 }] }, params),
                    callback: function (res) {
                        _this.callback(res, resolve);
                    }
                    // onCancel: (msg: any) => {
                    //   debugger
                    // }
                };
                if (_this.isApp) {
                    var accessToken = _this.getAccessToken();
                    var functionName = "nftCancelCallBack";
                    // @ts-ignore
                    window[functionName] = _params.callback;
                    // @ts-ignore
                    if (window.appMetaIdJsV2) {
                        // @ts-ignore
                        window.appMetaIdJsV2.nftCancel(accessToken, JSON.stringify(_params.data), functionName);
                    }
                    else {
                        // @ts-ignore
                        window.appMetaIdJs.nftCancel(accessToken, JSON.stringify(_params.data), functionName);
                    }
                }
                else {
                    debugger;
                    // @ts-ignore
                    (_a = _this.metaidjs) === null || _a === void 0 ? void 0 : _a.nftCancel(_params);
                }
            });
        };
        return SDK;
    }());

    exports.SDK = SDK;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
