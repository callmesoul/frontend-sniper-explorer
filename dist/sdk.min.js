(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('uuid'), require('util'), require('http'), require('https'), require('url'), require('stream'), require('assert'), require('tty'), require('os'), require('zlib')) :
    typeof define === 'function' && define.amd ? define(['exports', 'uuid', 'util', 'http', 'https', 'url', 'stream', 'assert', 'tty', 'os', 'zlib'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.experience = {}, global.uuid, global.require$$0, global.require$$1, global.require$$2, global.require$$0$3, global.require$$3, global.require$$4, global.require$$0$2, global.require$$0$1, global.require$$8));
}(this, (function (exports, uuid, require$$0, require$$1, require$$2, require$$0$3, require$$3, require$$4, require$$0$2, require$$0$1, require$$8) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0);
    var require$$1__default = /*#__PURE__*/_interopDefaultLegacy(require$$1);
    var require$$2__default = /*#__PURE__*/_interopDefaultLegacy(require$$2);
    var require$$0__default$3 = /*#__PURE__*/_interopDefaultLegacy(require$$0$3);
    var require$$3__default = /*#__PURE__*/_interopDefaultLegacy(require$$3);
    var require$$4__default = /*#__PURE__*/_interopDefaultLegacy(require$$4);
    var require$$0__default$2 = /*#__PURE__*/_interopDefaultLegacy(require$$0$2);
    var require$$0__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$0$1);
    var require$$8__default = /*#__PURE__*/_interopDefaultLegacy(require$$8);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    var __assign$1 = function () {
      __assign$1 = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }

        return t;
      };

      return __assign$1.apply(this, arguments);
    };
    function __rest(s, e) {
      var t = {};

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

      if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
      }
      return t;
    }
    function __awaiter$1(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function (resolve) {
          resolve(value);
        });
      }

      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }

        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }

        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }

        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }
    function __generator$1(thisArg, body) {
      var _ = {
        label: 0,
        sent: function () {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      },
          f,
          y,
          t,
          g;
      return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
      }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
      }), g;

      function verb(n) {
        return function (v) {
          return step([n, v]);
        };
      }

      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");

        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];

          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;

            case 4:
              _.label++;
              return {
                value: op[1],
                done: false
              };

            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;

            case 7:
              op = _.ops.pop();

              _.trys.pop();

              continue;

            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }

              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }

              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }

              if (t && _.label < t[2]) {
                _.label = t[2];

                _.ops.push(op);

                break;
              }

              if (t[2]) _.ops.pop();

              _.trys.pop();

              continue;
          }

          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }

        if (op[0] & 5) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
      __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }

        return t;
      };

      return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }

        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }

        function step(result) {
          result.done ? resolve(result.value) : new P(function (resolve) {
            resolve(result.value);
          }).then(fulfilled, rejected);
        }

        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }

    function __generator(thisArg, body) {
      var _ = {
        label: 0,
        sent: function () {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      },
          f,
          y,
          t,
          g;
      return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
      }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
      }), g;

      function verb(n) {
        return function (v) {
          return step([n, v]);
        };
      }

      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");

        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];

          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;

            case 4:
              _.label++;
              return {
                value: op[1],
                done: false
              };

            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;

            case 7:
              op = _.ops.pop();

              _.trys.pop();

              continue;

            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }

              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }

              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }

              if (t && _.label < t[2]) {
                _.label = t[2];

                _.ops.push(op);

                break;
              }

              if (t[2]) _.ops.pop();

              _.trys.pop();

              continue;
          }

          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }

        if (op[0] & 5) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    }

    function styleInject(css, ref) {
      if (ref === void 0) ref = {};
      var insertAt = ref.insertAt;

      if (!css || typeof document === 'undefined') {
        return;
      }

      var head = document.head || document.getElementsByTagName('head')[0];
      var style = document.createElement('style');
      style.type = 'text/css';

      if (insertAt === 'top') {
        if (head.firstChild) {
          head.insertBefore(style, head.firstChild);
        } else {
          head.appendChild(style);
        }
      } else {
        head.appendChild(style);
      }

      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }
    }

    var css_248z = "#showmoney-popup,\n#mainframewrapper {\n  font-size: 16px;\n  position: fixed;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n}\n#showmoney-popup {\n  z-index: 9999;\n  display: none;\n  animation: smfadeOut 0.3s cubic-bezier(0, 0, 0.2, 1);\n}\n#showmoney-main-frame {\n  display: inline-block;\n  max-width: 500px;\n  width: 90vw;\n  height: 218px;\n  border-radius: 0.5em;\n  overflow: hidden;\n}\n#mainframewrapper {\n  z-index: 9998;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n#showmoney-popup.active,\n#mainframewrapper.active {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  animation: smfadeIn 0.3s cubic-bezier(0, 0, 0.2, 1);\n}\n\n.sm-popup-box {\n  width: 90vw;\n  max-width: 500px;\n  max-height: 90vh;\n  overflow-y: auto;\n  background: #FFF;\n  border-radius: 0.5em;\n  border-top: 0.8em solid #2196F3;\n  box-shadow: 0 0 0.8em rgba(0,0,0, .4);\n}\n.error-popup .sm-popup-box {\n  border-top: 0.8em solid #FF5252;\n}\n#showmoney-popup.active .sm-popup-box {\n  animation: smslideIn .3s cubic-bezier(0, 0, .2, 1);\n}\n#showmoney-popup .sm-popup-box {\n  animation: smslideOut .3s cubic-bezier(0, 0, .2, 1);\n}\n.sm-linear-progress {\n  display: none;\n  background: #bbdefb;\n  height: 6px;\n  position: relative;\n  width: 100%;\n  margin: 0 auto;\n  overflow: hidden;\n  animation: start 0.3s ease-in;\n}\n.loading .sm-linear-progress {\n  display: inherit;\n}\n.sm-linear-progress .bar {\n  position: absolute;\n  background: #2196F3;\n  /* background: #eab300; */\n  transition: transform 0.2s linear;\n  transition: transform 0.2s linear;\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  width: 100%;\n}\n.sm-linear-progress .bar1 {\n  animation: progressLinearMovement 2.5s infinite;\n  animation-delay: 0;\n}\n.sm-linear-progress .bar2 {\n  left: -100%;\n  animation: progressLinearMovement 2.5s infinite;\n  animation-delay: 0.7s;\n}\n@keyframes progressLinearMovement {\n  0% {\n    left: -100%;\n  }\n  50% {\n    left: 100%;\n  }\n  100% {\n    left: 100%;\n  }\n}\n\n.sm-popup-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: relative;\n}\n.sm-popup-title {\n  font-weight: 600;\n  font-size: 1.25em;\n  line-height: 1.25;\n  color: #222;\n  box-sizing: border-box;\n  text-align: center;\n  width: 100%;\n  padding: 1em;\n}\n.sm-popup-close {\n  cursor: pointer;\n  font-family: inherit;\n  font-size: 120%;\n  line-height: 1.8;\n  border: 0;\n  background: transparent;\n  position: absolute;\n  right: 0.5em;\n  top: 0;\n  outline: none;\n}\n.sm-popup-close:before {\n  content: \"\\2715\";\n}\n.sm-popup-content {\n  margin: 1.5em 1em;\n  line-height: 1.5;\n  text-align: center;\n  color: #333;\n}\n.sm-popup-footer {\n  display: flex;\n  border-top: 1px solid #EEE;\n  justify-content: space-between;\n}\n.sm-popup-btn {\n  font-size: .875em;\n  padding: 1em;\n  border-radius: .25em;\n  border: 0;\n  cursor: pointer;\n  background: transparent;\n  will-change: transform;\n  transform: translateZ(0);\n  transition: transform .25s ease-out;\n  line-height: 1.15;\n  display: inline-block;\n  width: 49.99%;\n  outline: none;\n}\n.sm-popup-btn1 {\n  color: #888;\n  border-right: 1px solid #EEE;\n}\n.loading .sm-popup-btn2 {\n  color: #999;\n  cursor: not-allowed\n}\n.confirm-popup .amount-btn {\n  background: #eab300;\n  margin: 0 auto;\n  padding: 0.5em;\n  border-radius: 100px;\n  text-align: center;\n  width: 70%;\n  color: #FFF;\n  font-size: 1.2em;\n}\n.confirm-popup .amount-btn span {\n  font-size: 0.75em;\n  color: #EEE;\n}\n.confirm-popup .checkbox-group {\n  text-align: center;\n  margin: 1em 0;\n  color: #888;\n  font-size: 0.8em;\n  cursor: pointer;\n}\n.confirm-popup .checkbox-group input {\n  margin-right: 0.5em;\n}\n.confirm-popup .checkbox-group input:checked + label {\n  color: #eab300\n}\n\n@keyframes smslideIn {\n  from { transform: translateY(15%); }\n    to { transform: translateY(0); }\n}\n@keyframes smfadeIn {\n  from { opacity: 0; }\n    to { opacity: 1; }\n}\n@keyframes smfadeOut {\n  from { opacity: 1; }\n    to { opacity: 0; }\n}\n@keyframes smslideOut {\n  from { transform: translateY(0); }\n  to { transform: translateY(-10%); }\n}";
    styleInject(css_248z);
    /*
     * @Author: ohosanna
     * @Date: 2020-03-18 14:45:22
     * @Last Modified by: ohosanna
     * @Last Modified time: 2020-07-08 16:48:53
     */

    var Popup = function () {
      function Popup() {
        var popupEl = document.createElement('div');
        popupEl.setAttribute('id', 'showmoney-popup');
        document.body.appendChild(popupEl);
        this.popupWrapper = popupEl;
      }

      Popup.prototype.info = function (options) {
        this.show('info', options);
      };

      Popup.prototype.error = function (options) {
        this.show('error', options);
      };

      Popup.prototype.loading = function () {
        console.log(this.popupWrapper);
        this.show('info', {
          message: 'test'
        });
      };

      Popup.prototype.confirm = function (options) {
        var _this = this;

        if (!options.buttonAction) {
          options.buttonAction = function () {
            _this.close();
          };
        }

        this.show('confirm', options);
      };

      Popup.prototype.show = function (type, options) {
        if (type === void 0) {
          type = 'info';
        }

        var popupDom = this.generatePopupContent(options);
        this.popupWrapper.appendChild(popupDom);
        this.popupWrapper.className = type + '-popup' + ' active';
      };

      Popup.prototype.close = function () {
        this.popupWrapper.className = '';
        this.popupWrapper.innerHTML = '';
      };

      Popup.prototype.generatePopupContent = function (options) {
        var _this = this;

        var box = document.createElement('div');
        box.className = 'sm-popup-box ' + (options.className ? options.className : ''); // progress

        var progress = document.createElement('div');
        progress.className = 'sm-linear-progress';
        var bar1 = document.createElement('div');
        bar1.className = 'bar bar1';
        var bar2 = document.createElement('div');
        bar2.className = 'bar bar2';
        progress.appendChild(bar1);
        progress.appendChild(bar2);
        box.appendChild(progress); // header

        var popupHeader = document.createElement('header');
        popupHeader.className = 'sm-popup-header';
        var popupTitle = document.createElement('h2');
        popupTitle.className = 'sm-popup-title';

        if (options.title) {
          popupTitle.innerHTML = options.title;
          popupHeader.appendChild(popupTitle);
        }

        var closeBtn = document.createElement('button');
        closeBtn.className = 'sm-popup-close';

        closeBtn.onclick = function () {
          _this.close();
        };

        if (options.showClose !== false) {
          popupHeader.appendChild(closeBtn);
        } // content


        var popupContent = document.createElement('div');
        popupContent.className = 'sm-popup-content';
        popupContent.innerHTML = options.message; // footer

        var popupFooter = document.createElement('footer');
        popupFooter.className = 'sm-popup-footer';

        if (options.buttonText) {
          var button = document.createElement('button');
          button.className = 'sm-popup-btn sm-popup-btn1';
          button.innerText = options.buttonText;

          if (options.buttonUrl) {
            var url_1 = options.buttonUrl;

            button.onclick = function () {
              window.open(url_1, '_blank');
            };
          }

          if (options.buttonAction) {
            button.onclick = function () {
              if (typeof options.buttonAction === 'function') options.buttonAction();
            };
          }

          popupFooter.appendChild(button);
        }

        if (options.buttonText2) {
          var button2 = document.createElement('button');
          button2.className = 'sm-popup-btn sm-popup-btn2';
          button2.innerText = options.buttonText2;

          if (options.buttonUrl2) {
            var url_2 = options.buttonUrl2;

            button2.onclick = function () {
              if (options.useCurrentWindow) {
                window.open(url_2);
              } else {
                window.open(url_2, '_blank');
              }
            };
          }

          if (options.buttonAction2) {
            button2.onclick = function () {
              if (typeof options.buttonAction2 === 'function') options.buttonAction2();
            };
          }

          popupFooter.appendChild(button2);
        }

        box.appendChild(popupHeader);
        box.appendChild(popupContent);
        box.appendChild(popupFooter);
        return box;
      };

      return Popup;
    }();

    var Popup$1 = new Popup(); // Import here Polyfills if needed. Recommended core-js (npm i -D core-js)

    var generateRandomId = function () {
      return Math.floor(Math.random() * 100000000000000000).toString();
    };

    var PostmessageClient = function () {
      function PostmessageClient(window) {
        var _this = this;

        this._onMessageReceived = function (event) {
          return __awaiter(_this, void 0, void 0, function () {
            var message, handler, response, e_1;
            return __generator(this, function (_a) {
              switch (_a.label) {
                case 0:
                  if (!event.data || !event.data.v1) {
                    return [2
                    /*return*/
                    ];
                  }

                  message = event.data.v1;
                  handler = this.handlers[message.topic];
                  if (!handler) return [3
                  /*break*/
                  , 4];
                  _a.label = 1;

                case 1:
                  _a.trys.push([1, 3,, 4]);

                  return [4
                  /*yield*/
                  , handler(message)];

                case 2:
                  response = _a.sent();

                  if (message.reply) {
                    this.send(message.topic + ":reply", response, {
                      repliesTo: message.messageId
                    });
                  }

                  return [3
                  /*break*/
                  , 4];

                case 3:
                  e_1 = _a.sent();
                  console.error(e_1);
                  throw e_1;

                case 4:
                  return [2
                  /*return*/
                  ];
              }
            });
          });
        };

        this.handlers = {};
        this.targetWindow = window;
        this._pendingMessages = [];
        this._deliverMessages = false;
        this._replayQueue = {};
      }

      PostmessageClient.prototype.start = function () {
        window.addEventListener('message', this._onMessageReceived, false);
      };

      PostmessageClient.prototype.finalize = function () {
        window.removeEventListener('message', this._onMessageReceived, false);
      };

      PostmessageClient.prototype.subscribe = function (topic, handler) {
        this.handlers[topic] = handler;
      };

      PostmessageClient.prototype.send = function (topic, payload, metadata) {
        if (metadata === void 0) {
          metadata = {};
        }

        if (!this.targetWindow) {
          return console.log('请指定目标窗口');
        }

        var messageId = generateRandomId();
        var message = {
          v1: __assign({
            topic: topic,
            payload: payload,
            messageId: messageId
          }, metadata)
        };
        this.targetWindow.postMessage(message, '*');
        return message;
      };

      return PostmessageClient;
    }();

    var generateRandomId$1 = function () {
      return Math.floor(Math.random() * 100000000000000000).toString();
    };

    var hasClass = function (el, cls) {
      return el.className.match(new RegExp('(\\s|^)' + cls + '(\\s|$)'));
    };

    var addClass = function (el, cls) {
      if (!hasClass(el, cls)) el.className += " " + cls;
    };

    var MetaIdJs = function () {
      function MetaIdJs(options) {
        var _this = this;

        this.postMessage = new PostmessageClient(window);
        this.mainFrameEl = null;
        this.accessToken = '';
        this.isInjectMainFrame = false;
        this.isLoaded = false;
        this._handlers = {};

        this.onError = function (res) {
          Popup$1.error({
            message: res.data.message
          });
        };

        this.handleCreateNodeSuccess = function (res) {
          var _a, _b;

          Popup$1.close();
          (_b = (_a = _this.mainFrameEl) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.setAttribute('style', 'display: none;');
          var payload = res.payload;
          var callback = _this._handlers[payload.handlerId].callback;

          if (callback) {
            callback(payload);
          }
        };

        this.handleCreateNodeError = function (res) {
          var payload = res.payload;
          Popup$1.close();
          Popup$1.error({
            message: payload.data && payload.data.message ? payload.data.message : res
          });
        };

        this.handleConfirmCreateNode = function (res) {
          var _a, _b; // console.log("confirm", res);


          Popup$1.close();
          (_b = (_a = _this.mainFrameEl) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.removeAttribute('style');
        };

        this.handleCloseCreateNode = function (res) {
          var _a, _b;

          Popup$1.close();
          (_b = (_a = _this.mainFrameEl) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.setAttribute('style', 'display: none;');
          var payload = res.payload;
          var callback = _this._handlers[payload.handlerId].onCancel;

          if (callback) {
            delete payload.handlerId;
            callback(payload);
          }
        };

        this.handleCallback = function (res) {
          var payload = res.payload;
          var callback = _this._handlers[payload.handlerId].callback;

          if (callback) {
            delete payload.handlerId;
            callback(payload);
          }
        };

        this.handleSdkLoaded = function () {
          _this.isLoaded = true;

          if (typeof _this.onLoaded === 'function') {
            _this.onLoaded();
          }
        };

        this.handleCommonError = function (res) {
          console.log('error', res);
          var payload = res.payload;
          Popup$1.close();

          if (payload.code === 202) {
            Popup$1.confirm({
              message: 'User authentication expired.',
              showClose: false,
              buttonText: 'Cancel',
              buttonText2: 'Login',
              buttonUrl2: _this.SHOWMONEY_URL + "/userLogin?response_type=code&client_id=" + _this.oauthSettings.clientId + "&redirect_uri=" + _this.oauthSettings.redirectUri + "&scope=app&from=" + _this.oauthSettings.redirectUri
            });
          } else {
            _this.onError(payload);
          }
        };

        this.handleLoading = function () {
          _this.showLoadingPopup();
        };

        this.handleNotEnoughMoney = function (res) {
          var payload = res.payload;
          var message = payload.data.message;
          Popup$1.close();
          Popup$1.confirm({
            message: message ? message : 'Not enough money',
            showClose: false,
            buttonText: 'Cancel',
            buttonText2: 'Top up BSV',
            buttonUrl2: _this.SHOWMONEY_URL
          });
        };

        this.SHOWMONEY_URL = options.baseUri || "https://www.showmoney.app";
        this.onLoaded = options.onLoaded;

        if (typeof options.onError === 'function') {
          this.onError = options.onError;
        }

        this.oauthSettings = __assign(__assign({}, options.oauthSettings), {
          clientSecret: '',
          scope: 'app',
          responseType: 'code'
        });
        this.init();
      }
      /**
       * injectMainFrame  注入主框架
       */


      MetaIdJs.prototype.injectMainFrame = function () {
        var _this = this;

        var mainFrame = document.createElement('iframe');
        var mainFrameWrapper = document.createElement('div');
        mainFrame.setAttribute('id', 'showmoney-main-frame');
        mainFrame.setAttribute('src', this.SHOWMONEY_URL + '/iframe');
        mainFrameWrapper.setAttribute('id', 'mainframewrapper');
        mainFrameWrapper.setAttribute('style', 'display: none;');
        mainFrameWrapper.appendChild(mainFrame);
        document.body.appendChild(mainFrameWrapper); // 报告 main-frame 载入完成

        mainFrame.onload = function () {
          if (mainFrame.contentWindow) {
            _this.mainFrameEl = mainFrame; // 无法把postmessage实例保留，会报跨域错误

            window.mainFrameMessage = new PostmessageClient(mainFrame.contentWindow);
            window.mainFrameMessage.send('send-options', _this.oauthSettings); // window.mainFrameMessage = mainFrameMessage

            _this.isInjectMainFrame = true; // console.log('mainFrame loaded')
          }
        };
      };

      MetaIdJs.prototype.initHandle = function () {
        var functionObj = ["swapreqswapargs", "estimateSwapToken2Amount", "estimateSwapToken1Amount", "isSupportedFt", "swapft", "getBalance"];

        var _loop_1 = function (item) {
          this_1[item] = function (params) {
            var defParams = params;

            if (params.callback) {
              var handlerId = generateRandomId$1();
              this._handlers[handlerId] = {};
              this._handlers[handlerId].callback = params.callback;
              defParams.handlerId = handlerId;
            }

            delete defParams.callback;
            window.mainFrameMessage.send(item, defParams);
          };
        };

        var this_1 = this;

        for (var _i = 0, functionObj_1 = functionObj; _i < functionObj_1.length; _i++) {
          var item = functionObj_1[_i];

          _loop_1(item);
        }
      };
      /**
       * getUserInfo
       */


      MetaIdJs.prototype.getUserInfo = function (params) {
        var defParams = params;

        if (params.callback) {
          var handlerId = generateRandomId$1();
          this._handlers[handlerId] = {};
          this._handlers[handlerId].callback = params.callback;
          defParams.handlerId = handlerId;
        }

        delete defParams.callback;
        window.mainFrameMessage.send('get-user-info', defParams);
      };
      /**
       * signMessage
       */


      MetaIdJs.prototype.signMessage = function (params) {
        var defParams = params;

        if (params.callback) {
          var handlerId = generateRandomId$1();
          this._handlers[handlerId] = {};
          this._handlers[handlerId].callback = params.callback;
          defParams.handlerId = handlerId;
        }

        delete defParams.callback;
        window.mainFrameMessage.send('sign-messgae', defParams);
      };
      /**
       * eciesEncryptData
       */


      MetaIdJs.prototype.eciesEncryptData = function (params) {
        var defParams = params;

        if (params.callback) {
          var handlerId = generateRandomId$1();
          this._handlers[handlerId] = {};
          this._handlers[handlerId].callback = params.callback;
          defParams.handlerId = handlerId;
        }

        delete defParams.callback;
        window.mainFrameMessage.send('ecies-encrypt-data', defParams);
      };

      MetaIdJs.prototype.eciesDecryptData = function (params) {
        var defParams = params;

        if (params.callback) {
          var handlerId = generateRandomId$1();
          this._handlers[handlerId] = {};
          this._handlers[handlerId].callback = params.callback;
          defParams.handlerId = handlerId;
        }

        delete defParams.callback;
        window.mainFrameMessage.send('ecies-decrypt-data', defParams);
      };
      /**
       * ecdhEncryptData
       */


      MetaIdJs.prototype.ecdhEncryptData = function (params) {
        var defParams = params;

        if (params.callback) {
          var handlerId = generateRandomId$1();
          this._handlers[handlerId] = {};
          this._handlers[handlerId].callback = params.callback;
          defParams.handlerId = handlerId;
        }

        delete defParams.callback;
        window.mainFrameMessage.send('ecdh-encrypt-data', defParams);
      };

      MetaIdJs.prototype.ecdhDecryptData = function (params) {
        var defParams = params;

        if (params.callback) {
          var handlerId = generateRandomId$1();
          this._handlers[handlerId] = {};
          this._handlers[handlerId].callback = params.callback;
          defParams.handlerId = handlerId;
        }

        delete defParams.callback;
        window.mainFrameMessage.send('ecdh-decrypt-data', defParams);
      };

      MetaIdJs.prototype.getFTList = function (params) {
        var defParams = params;

        if (params.callback) {
          var handlerId = generateRandomId$1();
          this._handlers[handlerId] = {};
          this._handlers[handlerId].callback = params.callback;
          defParams.handlerId = handlerId;
        }

        delete defParams.callback;
        window.mainFrameMessage.send('get-ftlist', defParams);
      }; // 版本兼容


      MetaIdJs.prototype.addProtocolNode = function (params) {
        this.sendMetaDataTx(params);
      };
      /**
       * createProtocolNode
       */


      MetaIdJs.prototype.sendMetaDataTx = function (params) {
        if (!params.checkOnly) {
          this.showLoadingPopup();
        }

        if (params.callback || params.onCancel) {
          var handlerId = generateRandomId$1();
          this._handlers[handlerId] = {};

          if (params.callback) {
            this._handlers[handlerId]['callback'] = params.callback;
          }

          if (params.onCancel) {
            this._handlers[handlerId]['onCancel'] = params.onCancel;
          }

          params = __assign(__assign({}, params), {
            handlerId: handlerId
          });
          delete params.callback;
          delete params.onCancel;
        }

        if (this.isInjectMainFrame) {
          window.mainFrameMessage.send('create-node', params); // console.log(this._handlers)
        } else {
          throw new Error('showmoney frame 未加载');
        }
      };

      MetaIdJs.prototype.payToAddress = function (params) {
        var defParams = params;

        if (params.callback) {
          var handlerId = generateRandomId$1();
          this._handlers[handlerId] = {};
          this._handlers[handlerId].callback = params.callback;
          defParams.handlerId = handlerId;
        }

        delete defParams.callback;
        window.mainFrameMessage.send('pay-to-address', defParams);
      };

      MetaIdJs.prototype.showLoadingPopup = function () {
        var popupEl = document.getElementById('showmoney-popup');
        if (!popupEl) return;
        Popup$1.info({
          message: 'Processing data...',
          showClose: false
        });
        addClass(popupEl, 'loading');
      };

      MetaIdJs.prototype.handleErrorNotLoggedIn = function (resolve) {
        var message = resolve.payload;
        Popup$1.close();
        Popup$1.info(message.popup);
      };

      MetaIdJs.prototype.init = function () {
        this.injectMainFrame(); // 监听信息

        this.postMessage.start();
        this.initHandle();
        this.postMessage.subscribe('sdk-loaded', this.handleSdkLoaded);
        this.postMessage.subscribe('error.not-logged-in', this.handleErrorNotLoggedIn);
        this.postMessage.subscribe('loading', this.handleLoading);
        this.postMessage.subscribe('success.create-node', this.handleCreateNodeSuccess);
        this.postMessage.subscribe('confirm.create-node', this.handleConfirmCreateNode);
        this.postMessage.subscribe('close.create-node', this.handleCloseCreateNode);
        this.postMessage.subscribe('error.create-node', this.handleCreateNodeError);
        this.postMessage.subscribe('error.not-enough-money', this.handleNotEnoughMoney);
        this.postMessage.subscribe('receive-callback', this.handleCallback);
        this.postMessage.subscribe('error.common', this.handleCommonError);
      };

      return MetaIdJs;
    }();

    window.MetaIdJs = MetaIdJs;

    /*
     *  decimal.js-light v2.5.1
     *  An arbitrary-precision Decimal type for JavaScript.
     *  https://github.com/MikeMcl/decimal.js-light
     *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>
     *  MIT Expat Licence
     */
    // ------------------------------------  EDITABLE DEFAULTS  ------------------------------------- //
    // The limit on the value of `precision`, and on the value of the first argument to
    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
    var MAX_DIGITS = 1e9,
        // 0 to 1e9
    // The initial configuration properties of the Decimal constructor.
    defaults$5 = {
      // These values must be integers within the stated ranges (inclusive).
      // Most of these values can be changed during run-time using `Decimal.config`.
      // The maximum number of significant digits of the result of a calculation or base conversion.
      // E.g. `Decimal.config({ precision: 20 });`
      precision: 20,
      // 1 to MAX_DIGITS
      // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,
      // `toFixed`, `toPrecision` and `toSignificantDigits`.
      //
      // ROUND_UP         0 Away from zero.
      // ROUND_DOWN       1 Towards zero.
      // ROUND_CEIL       2 Towards +Infinity.
      // ROUND_FLOOR      3 Towards -Infinity.
      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
      //
      // E.g.
      // `Decimal.rounding = 4;`
      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
      rounding: 4,
      // 0 to 8
      // The exponent value at and beneath which `toString` returns exponential notation.
      // JavaScript numbers: -7
      toExpNeg: -7,
      // 0 to -MAX_E
      // The exponent value at and above which `toString` returns exponential notation.
      // JavaScript numbers: 21
      toExpPos: 21,
      // 0 to MAX_E
      // The natural logarithm of 10.
      // 115 digits
      LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'
    },
        // ------------------------------------ END OF EDITABLE DEFAULTS -------------------------------- //
    Decimal,
        external = true,
        decimalError = '[DecimalError] ',
        invalidArgument = decimalError + 'Invalid argument: ',
        exponentOutOfRange = decimalError + 'Exponent out of range: ',
        mathfloor = Math.floor,
        mathpow = Math.pow,
        isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
        ONE,
        BASE = 1e7,
        LOG_BASE = 7,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE),
        // 1286742750677284
    // Decimal.prototype object
    P = {}; // Decimal prototype methods

    /*
     *  absoluteValue                       abs
     *  comparedTo                          cmp
     *  decimalPlaces                       dp
     *  dividedBy                           div
     *  dividedToIntegerBy                  idiv
     *  equals                              eq
     *  exponent
     *  greaterThan                         gt
     *  greaterThanOrEqualTo                gte
     *  isInteger                           isint
     *  isNegative                          isneg
     *  isPositive                          ispos
     *  isZero
     *  lessThan                            lt
     *  lessThanOrEqualTo                   lte
     *  logarithm                           log
     *  minus                               sub
     *  modulo                              mod
     *  naturalExponential                  exp
     *  naturalLogarithm                    ln
     *  negated                             neg
     *  plus                                add
     *  precision                           sd
     *  squareRoot                          sqrt
     *  times                               mul
     *  toDecimalPlaces                     todp
     *  toExponential
     *  toFixed
     *  toInteger                           toint
     *  toNumber
     *  toPower                             pow
     *  toPrecision
     *  toSignificantDigits                 tosd
     *  toString
     *  valueOf                             val
     */

    /*
     * Return a new Decimal whose value is the absolute value of this Decimal.
     *
     */

    P.absoluteValue = P.abs = function () {
      var x = new this.constructor(this);
      if (x.s) x.s = 1;
      return x;
    };
    /*
     * Return
     *   1    if the value of this Decimal is greater than the value of `y`,
     *  -1    if the value of this Decimal is less than the value of `y`,
     *   0    if they have the same value
     *
     */


    P.comparedTo = P.cmp = function (y) {
      var i,
          j,
          xdL,
          ydL,
          x = this;
      y = new x.constructor(y); // Signs differ?

      if (x.s !== y.s) return x.s || -y.s; // Compare exponents.

      if (x.e !== y.e) return x.e > y.e ^ x.s < 0 ? 1 : -1;
      xdL = x.d.length;
      ydL = y.d.length; // Compare digit by digit.

      for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
        if (x.d[i] !== y.d[i]) return x.d[i] > y.d[i] ^ x.s < 0 ? 1 : -1;
      } // Compare lengths.


      return xdL === ydL ? 0 : xdL > ydL ^ x.s < 0 ? 1 : -1;
    };
    /*
     * Return the number of decimal places of the value of this Decimal.
     *
     */


    P.decimalPlaces = P.dp = function () {
      var x = this,
          w = x.d.length - 1,
          dp = (w - x.e) * LOG_BASE; // Subtract the number of trailing zeros of the last word.

      w = x.d[w];
      if (w) for (; w % 10 == 0; w /= 10) dp--;
      return dp < 0 ? 0 : dp;
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to
     * `precision` significant digits.
     *
     */


    P.dividedBy = P.div = function (y) {
      return divide(this, new this.constructor(y));
    };
    /*
     * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
     * by the value of `y`, truncated to `precision` significant digits.
     *
     */


    P.dividedToIntegerBy = P.idiv = function (y) {
      var x = this,
          Ctor = x.constructor;
      return round(divide(x, new Ctor(y), 0, 1), Ctor.precision);
    };
    /*
     * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
     *
     */


    P.equals = P.eq = function (y) {
      return !this.cmp(y);
    };
    /*
     * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).
     *
     */


    P.exponent = function () {
      return getBase10Exponent(this);
    };
    /*
     * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
     * false.
     *
     */


    P.greaterThan = P.gt = function (y) {
      return this.cmp(y) > 0;
    };
    /*
     * Return true if the value of this Decimal is greater than or equal to the value of `y`,
     * otherwise return false.
     *
     */


    P.greaterThanOrEqualTo = P.gte = function (y) {
      return this.cmp(y) >= 0;
    };
    /*
     * Return true if the value of this Decimal is an integer, otherwise return false.
     *
     */


    P.isInteger = P.isint = function () {
      return this.e > this.d.length - 2;
    };
    /*
     * Return true if the value of this Decimal is negative, otherwise return false.
     *
     */


    P.isNegative = P.isneg = function () {
      return this.s < 0;
    };
    /*
     * Return true if the value of this Decimal is positive, otherwise return false.
     *
     */


    P.isPositive = P.ispos = function () {
      return this.s > 0;
    };
    /*
     * Return true if the value of this Decimal is 0, otherwise return false.
     *
     */


    P.isZero = function () {
      return this.s === 0;
    };
    /*
     * Return true if the value of this Decimal is less than `y`, otherwise return false.
     *
     */


    P.lessThan = P.lt = function (y) {
      return this.cmp(y) < 0;
    };
    /*
     * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
     *
     */


    P.lessThanOrEqualTo = P.lte = function (y) {
      return this.cmp(y) < 1;
    };
    /*
     * Return the logarithm of the value of this Decimal to the specified base, truncated to
     * `precision` significant digits.
     *
     * If no base is specified, return log[10](x).
     *
     * log[base](x) = ln(x) / ln(base)
     *
     * The maximum error of the result is 1 ulp (unit in the last place).
     *
     * [base] {number|string|Decimal} The base of the logarithm.
     *
     */


    P.logarithm = P.log = function (base) {
      var r,
          x = this,
          Ctor = x.constructor,
          pr = Ctor.precision,
          wpr = pr + 5; // Default base is 10.

      if (base === void 0) {
        base = new Ctor(10);
      } else {
        base = new Ctor(base); // log[-b](x) = NaN
        // log[0](x)  = NaN
        // log[1](x)  = NaN

        if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN');
      } // log[b](-x) = NaN
      // log[b](0) = -Infinity


      if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity')); // log[b](1) = 0

      if (x.eq(ONE)) return new Ctor(0);
      external = false;
      r = divide(ln(x, wpr), ln(base, wpr), wpr);
      external = true;
      return round(r, pr);
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to
     * `precision` significant digits.
     *
     */


    P.minus = P.sub = function (y) {
      var x = this;
      y = new x.constructor(y);
      return x.s == y.s ? subtract(x, y) : add(x, (y.s = -y.s, y));
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to
     * `precision` significant digits.
     *
     */


    P.modulo = P.mod = function (y) {
      var q,
          x = this,
          Ctor = x.constructor,
          pr = Ctor.precision;
      y = new Ctor(y); // x % 0 = NaN

      if (!y.s) throw Error(decimalError + 'NaN'); // Return x if x is 0.

      if (!x.s) return round(new Ctor(x), pr); // Prevent rounding of intermediate calculations.

      external = false;
      q = divide(x, y, 0, 1).times(y);
      external = true;
      return x.minus(q);
    };
    /*
     * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
     * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`
     * significant digits.
     *
     */


    P.naturalExponential = P.exp = function () {
      return exp(this);
    };
    /*
     * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
     * truncated to `precision` significant digits.
     *
     */


    P.naturalLogarithm = P.ln = function () {
      return ln(this);
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
     * -1.
     *
     */


    P.negated = P.neg = function () {
      var x = new this.constructor(this);
      x.s = -x.s || 0;
      return x;
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to
     * `precision` significant digits.
     *
     */


    P.plus = P.add = function (y) {
      var x = this;
      y = new x.constructor(y);
      return x.s == y.s ? add(x, y) : subtract(x, (y.s = -y.s, y));
    };
    /*
     * Return the number of significant digits of the value of this Decimal.
     *
     * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
     *
     */


    P.precision = P.sd = function (z) {
      var e,
          sd,
          w,
          x = this;
      if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);
      e = getBase10Exponent(x) + 1;
      w = x.d.length - 1;
      sd = w * LOG_BASE + 1;
      w = x.d[w]; // If non-zero...

      if (w) {
        // Subtract the number of trailing zeros of the last word.
        for (; w % 10 == 0; w /= 10) sd--; // Add the number of digits of the first word.


        for (w = x.d[0]; w >= 10; w /= 10) sd++;
      }

      return z && e > sd ? e : sd;
    };
    /*
     * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`
     * significant digits.
     *
     */


    P.squareRoot = P.sqrt = function () {
      var e,
          n,
          pr,
          r,
          s,
          t,
          wpr,
          x = this,
          Ctor = x.constructor; // Negative or zero?

      if (x.s < 1) {
        if (!x.s) return new Ctor(0); // sqrt(-x) = NaN

        throw Error(decimalError + 'NaN');
      }

      e = getBase10Exponent(x);
      external = false; // Initial estimate.

      s = Math.sqrt(+x); // Math.sqrt underflow/overflow?
      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.

      if (s == 0 || s == 1 / 0) {
        n = digitsToString(x.d);
        if ((n.length + e) % 2 == 0) n += '0';
        s = Math.sqrt(n);
        e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);

        if (s == 1 / 0) {
          n = '5e' + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf('e') + 1) + e;
        }

        r = new Ctor(n);
      } else {
        r = new Ctor(s.toString());
      }

      pr = Ctor.precision;
      s = wpr = pr + 3; // Newton-Raphson iteration.

      for (;;) {
        t = r;
        r = t.plus(divide(x, t, wpr + 2)).times(0.5);

        if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r.d)).slice(0, wpr)) {
          n = n.slice(wpr - 3, wpr + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
          // 4999, i.e. approaching a rounding boundary, continue the iteration.

          if (s == wpr && n == '4999') {
            // On the first iteration only, check to see if rounding up gives the exact result as the
            // nines may infinitely repeat.
            round(t, pr + 1, 0);

            if (t.times(t).eq(x)) {
              r = t;
              break;
            }
          } else if (n != '9999') {
            break;
          }

          wpr += 4;
        }
      }

      external = true;
      return round(r, pr);
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to
     * `precision` significant digits.
     *
     */


    P.times = P.mul = function (y) {
      var carry,
          e,
          i,
          k,
          r,
          rL,
          t,
          xdL,
          ydL,
          x = this,
          Ctor = x.constructor,
          xd = x.d,
          yd = (y = new Ctor(y)).d; // Return 0 if either is 0.

      if (!x.s || !y.s) return new Ctor(0);
      y.s *= x.s;
      e = x.e + y.e;
      xdL = xd.length;
      ydL = yd.length; // Ensure xd points to the longer array.

      if (xdL < ydL) {
        r = xd;
        xd = yd;
        yd = r;
        rL = xdL;
        xdL = ydL;
        ydL = rL;
      } // Initialise the result array with zeros.


      r = [];
      rL = xdL + ydL;

      for (i = rL; i--;) r.push(0); // Multiply!


      for (i = ydL; --i >= 0;) {
        carry = 0;

        for (k = xdL + i; k > i;) {
          t = r[k] + yd[i] * xd[k - i - 1] + carry;
          r[k--] = t % BASE | 0;
          carry = t / BASE | 0;
        }

        r[k] = (r[k] + carry) % BASE | 0;
      } // Remove trailing zeros.


      for (; !r[--rL];) r.pop();

      if (carry) ++e;else r.shift();
      y.d = r;
      y.e = e;
      return external ? round(y, Ctor.precision) : y;
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
     * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
     *
     * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */


    P.toDecimalPlaces = P.todp = function (dp, rm) {
      var x = this,
          Ctor = x.constructor;
      x = new Ctor(x);
      if (dp === void 0) return x;
      checkInt32(dp, 0, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
      return round(x, dp + getBase10Exponent(x) + 1, rm);
    };
    /*
     * Return a string representing the value of this Decimal in exponential notation rounded to
     * `dp` fixed decimal places using rounding mode `rounding`.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */


    P.toExponential = function (dp, rm) {
      var str,
          x = this,
          Ctor = x.constructor;

      if (dp === void 0) {
        str = toString$1(x, true);
      } else {
        checkInt32(dp, 0, MAX_DIGITS);
        if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
        x = round(new Ctor(x), dp + 1, rm);
        str = toString$1(x, true, dp + 1);
      }

      return str;
    };
    /*
     * Return a string representing the value of this Decimal in normal (fixed-point) notation to
     * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
     * omitted.
     *
     * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
     * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
     * (-0).toFixed(3) is '0.000'.
     * (-0.5).toFixed(0) is '-0'.
     *
     */


    P.toFixed = function (dp, rm) {
      var str,
          y,
          x = this,
          Ctor = x.constructor;
      if (dp === void 0) return toString$1(x);
      checkInt32(dp, 0, MAX_DIGITS);
      if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
      y = round(new Ctor(x), dp + getBase10Exponent(x) + 1, rm);
      str = toString$1(y.abs(), false, dp + getBase10Exponent(y) + 1); // To determine whether to add the minus sign look at the value before it was rounded,
      // i.e. look at `x` rather than `y`.

      return x.isneg() && !x.isZero() ? '-' + str : str;
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
     * rounding mode `rounding`.
     *
     */


    P.toInteger = P.toint = function () {
      var x = this,
          Ctor = x.constructor;
      return round(new Ctor(x), getBase10Exponent(x) + 1, Ctor.rounding);
    };
    /*
     * Return the value of this Decimal converted to a number primitive.
     *
     */


    P.toNumber = function () {
      return +this;
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,
     * truncated to `precision` significant digits.
     *
     * For non-integer or very large exponents pow(x, y) is calculated using
     *
     *   x^y = exp(y*ln(x))
     *
     * The maximum error is 1 ulp (unit in last place).
     *
     * y {number|string|Decimal} The power to which to raise this Decimal.
     *
     */


    P.toPower = P.pow = function (y) {
      var e,
          k,
          pr,
          r,
          sign,
          yIsInt,
          x = this,
          Ctor = x.constructor,
          guard = 12,
          yn = +(y = new Ctor(y)); // pow(x, 0) = 1

      if (!y.s) return new Ctor(ONE);
      x = new Ctor(x); // pow(0, y > 0) = 0
      // pow(0, y < 0) = Infinity

      if (!x.s) {
        if (y.s < 1) throw Error(decimalError + 'Infinity');
        return x;
      } // pow(1, y) = 1


      if (x.eq(ONE)) return x;
      pr = Ctor.precision; // pow(x, 1) = x

      if (y.eq(ONE)) return round(x, pr);
      e = y.e;
      k = y.d.length - 1;
      yIsInt = e >= k;
      sign = x.s;

      if (!yIsInt) {
        // pow(x < 0, y non-integer) = NaN
        if (sign < 0) throw Error(decimalError + 'NaN'); // If y is a small integer use the 'exponentiation by squaring' algorithm.
      } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
        r = new Ctor(ONE); // Max k of 9007199254740991 takes 53 loop iterations.
        // Maximum digits array length; leaves [28, 34] guard digits.

        e = Math.ceil(pr / LOG_BASE + 4);
        external = false;

        for (;;) {
          if (k % 2) {
            r = r.times(x);
            truncate(r.d, e);
          }

          k = mathfloor(k / 2);
          if (k === 0) break;
          x = x.times(x);
          truncate(x.d, e);
        }

        external = true;
        return y.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);
      } // Result is negative if x is negative and the last digit of integer y is odd.


      sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;
      x.s = 1;
      external = false;
      r = y.times(ln(x, pr + guard));
      external = true;
      r = exp(r);
      r.s = sign;
      return r;
    };
    /*
     * Return a string representing the value of this Decimal rounded to `sd` significant digits
     * using rounding mode `rounding`.
     *
     * Return exponential notation if `sd` is less than the number of digits necessary to represent
     * the integer part of the value in normal notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */


    P.toPrecision = function (sd, rm) {
      var e,
          str,
          x = this,
          Ctor = x.constructor;

      if (sd === void 0) {
        e = getBase10Exponent(x);
        str = toString$1(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);
      } else {
        checkInt32(sd, 1, MAX_DIGITS);
        if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
        x = round(new Ctor(x), sd, rm);
        e = getBase10Exponent(x);
        str = toString$1(x, sd <= e || e <= Ctor.toExpNeg, sd);
      }

      return str;
    };
    /*
     * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
     * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
     * omitted.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     */


    P.toSignificantDigits = P.tosd = function (sd, rm) {
      var x = this,
          Ctor = x.constructor;

      if (sd === void 0) {
        sd = Ctor.precision;
        rm = Ctor.rounding;
      } else {
        checkInt32(sd, 1, MAX_DIGITS);
        if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);
      }

      return round(new Ctor(x), sd, rm);
    };
    /*
     * Return a string representing the value of this Decimal.
     *
     * Return exponential notation if this Decimal has a positive exponent equal to or greater than
     * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
     *
     */


    P.toString = P.valueOf = P.val = P.toJSON = P[Symbol.for('nodejs.util.inspect.custom')] = function () {
      var x = this,
          e = getBase10Exponent(x),
          Ctor = x.constructor;
      return toString$1(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);
    }; // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.

    /*
     *  add                 P.minus, P.plus
     *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd
     *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln
     *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln
     *  exp                 P.exp, P.pow
     *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,
     *                      P.toString, divide, round, toString, exp, ln
     *  getLn10             P.log, ln
     *  getZeroString       digitsToString, toString
     *  ln                  P.log, P.ln, P.pow, exp
     *  parseDecimal        Decimal
     *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,
     *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,
     *                      divide, getLn10, exp, ln
     *  subtract            P.minus, P.plus
     *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf
     *  truncate            P.pow
     *
     *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,
     *                      getLn10, exp, ln, parseDecimal, Decimal, config
     */


    function add(x, y) {
      var carry,
          d,
          e,
          i,
          k,
          len,
          xd,
          yd,
          Ctor = x.constructor,
          pr = Ctor.precision; // If either is zero...

      if (!x.s || !y.s) {
        // Return x if y is zero.
        // Return y if y is non-zero.
        if (!y.s) y = new Ctor(x);
        return external ? round(y, pr) : y;
      }

      xd = x.d;
      yd = y.d; // x and y are finite, non-zero numbers with the same sign.

      k = x.e;
      e = y.e;
      xd = xd.slice();
      i = k - e; // If base 1e7 exponents differ...

      if (i) {
        if (i < 0) {
          d = xd;
          i = -i;
          len = yd.length;
        } else {
          d = yd;
          e = k;
          len = xd.length;
        } // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.


        k = Math.ceil(pr / LOG_BASE);
        len = k > len ? k + 1 : len + 1;

        if (i > len) {
          i = len;
          d.length = 1;
        } // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.


        d.reverse();

        for (; i--;) d.push(0);

        d.reverse();
      }

      len = xd.length;
      i = yd.length; // If yd is longer than xd, swap xd and yd so xd points to the longer array.

      if (len - i < 0) {
        i = len;
        d = yd;
        yd = xd;
        xd = d;
      } // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.


      for (carry = 0; i;) {
        carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
        xd[i] %= BASE;
      }

      if (carry) {
        xd.unshift(carry);
        ++e;
      } // Remove trailing zeros.
      // No need to check for zero, as +x + +y != 0 && -x + -y != 0


      for (len = xd.length; xd[--len] == 0;) xd.pop();

      y.d = xd;
      y.e = e;
      return external ? round(y, pr) : y;
    }

    function checkInt32(i, min, max) {
      if (i !== ~~i || i < min || i > max) {
        throw Error(invalidArgument + i);
      }
    }

    function digitsToString(d) {
      var i,
          k,
          ws,
          indexOfLastWord = d.length - 1,
          str = '',
          w = d[0];

      if (indexOfLastWord > 0) {
        str += w;

        for (i = 1; i < indexOfLastWord; i++) {
          ws = d[i] + '';
          k = LOG_BASE - ws.length;
          if (k) str += getZeroString(k);
          str += ws;
        }

        w = d[i];
        ws = w + '';
        k = LOG_BASE - ws.length;
        if (k) str += getZeroString(k);
      } else if (w === 0) {
        return '0';
      } // Remove trailing zeros of last w.


      for (; w % 10 === 0;) w /= 10;

      return str + w;
    }

    var divide = function () {
      // Assumes non-zero x and k, and hence non-zero result.
      function multiplyInteger(x, k) {
        var temp,
            carry = 0,
            i = x.length;

        for (x = x.slice(); i--;) {
          temp = x[i] * k + carry;
          x[i] = temp % BASE | 0;
          carry = temp / BASE | 0;
        }

        if (carry) x.unshift(carry);
        return x;
      }

      function compare(a, b, aL, bL) {
        var i, r;

        if (aL != bL) {
          r = aL > bL ? 1 : -1;
        } else {
          for (i = r = 0; i < aL; i++) {
            if (a[i] != b[i]) {
              r = a[i] > b[i] ? 1 : -1;
              break;
            }
          }
        }

        return r;
      }

      function subtract(a, b, aL) {
        var i = 0; // Subtract b from a.

        for (; aL--;) {
          a[aL] -= i;
          i = a[aL] < b[aL] ? 1 : 0;
          a[aL] = i * BASE + a[aL] - b[aL];
        } // Remove leading zeros.


        for (; !a[0] && a.length > 1;) a.shift();
      }

      return function (x, y, pr, dp) {
        var cmp,
            e,
            i,
            k,
            prod,
            prodL,
            q,
            qd,
            rem,
            remL,
            rem0,
            sd,
            t,
            xi,
            xL,
            yd0,
            yL,
            yz,
            Ctor = x.constructor,
            sign = x.s == y.s ? 1 : -1,
            xd = x.d,
            yd = y.d; // Either 0?

        if (!x.s) return new Ctor(x);
        if (!y.s) throw Error(decimalError + 'Division by zero');
        e = x.e - y.e;
        yL = yd.length;
        xL = xd.length;
        q = new Ctor(sign);
        qd = q.d = []; // Result exponent may be one less than e.

        for (i = 0; yd[i] == (xd[i] || 0);) ++i;

        if (yd[i] > (xd[i] || 0)) --e;

        if (pr == null) {
          sd = pr = Ctor.precision;
        } else if (dp) {
          sd = pr + (getBase10Exponent(x) - getBase10Exponent(y)) + 1;
        } else {
          sd = pr;
        }

        if (sd < 0) return new Ctor(0); // Convert precision in number of base 10 digits to base 1e7 digits.

        sd = sd / LOG_BASE + 2 | 0;
        i = 0; // divisor < 1e7

        if (yL == 1) {
          k = 0;
          yd = yd[0];
          sd++; // k is the carry.

          for (; (i < xL || k) && sd--; i++) {
            t = k * BASE + (xd[i] || 0);
            qd[i] = t / yd | 0;
            k = t % yd | 0;
          } // divisor >= 1e7

        } else {
          // Normalise xd and yd so highest order digit of yd is >= BASE/2
          k = BASE / (yd[0] + 1) | 0;

          if (k > 1) {
            yd = multiplyInteger(yd, k);
            xd = multiplyInteger(xd, k);
            yL = yd.length;
            xL = xd.length;
          }

          xi = yL;
          rem = xd.slice(0, yL);
          remL = rem.length; // Add zeros to make remainder as long as divisor.

          for (; remL < yL;) rem[remL++] = 0;

          yz = yd.slice();
          yz.unshift(0);
          yd0 = yd[0];
          if (yd[1] >= BASE / 2) ++yd0;

          do {
            k = 0; // Compare divisor and remainder.

            cmp = compare(yd, rem, yL, remL); // If divisor < remainder.

            if (cmp < 0) {
              // Calculate trial digit, k.
              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0); // k will be how many times the divisor goes into the current remainder.

              k = rem0 / yd0 | 0; //  Algorithm:
              //  1. product = divisor * trial digit (k)
              //  2. if product > remainder: product -= divisor, k--
              //  3. remainder -= product
              //  4. if product was < remainder at 2:
              //    5. compare new remainder and divisor
              //    6. If remainder > divisor: remainder -= divisor, k++

              if (k > 1) {
                if (k >= BASE) k = BASE - 1; // product = divisor * trial digit.

                prod = multiplyInteger(yd, k);
                prodL = prod.length;
                remL = rem.length; // Compare product and remainder.

                cmp = compare(prod, rem, prodL, remL); // product > remainder.

                if (cmp == 1) {
                  k--; // Subtract divisor from product.

                  subtract(prod, yL < prodL ? yz : yd, prodL);
                }
              } else {
                // cmp is -1.
                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
                // to avoid it. If k is 1 there is a need to compare yd and rem again below.
                if (k == 0) cmp = k = 1;
                prod = yd.slice();
              }

              prodL = prod.length;
              if (prodL < remL) prod.unshift(0); // Subtract product from remainder.

              subtract(rem, prod, remL); // If product was < previous remainder.

              if (cmp == -1) {
                remL = rem.length; // Compare divisor and new remainder.

                cmp = compare(yd, rem, yL, remL); // If divisor < new remainder, subtract divisor from remainder.

                if (cmp < 1) {
                  k++; // Subtract divisor from remainder.

                  subtract(rem, yL < remL ? yz : yd, remL);
                }
              }

              remL = rem.length;
            } else if (cmp === 0) {
              k++;
              rem = [0];
            } // if cmp === 1, k will be 0
            // Add the next digit, k, to the result array.


            qd[i++] = k; // Update the remainder.

            if (cmp && rem[0]) {
              rem[remL++] = xd[xi] || 0;
            } else {
              rem = [xd[xi]];
              remL = 1;
            }
          } while ((xi++ < xL || rem[0] !== void 0) && sd--);
        } // Leading zero?


        if (!qd[0]) qd.shift();
        q.e = e;
        return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);
      };
    }();
    /*
     * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`
     * significant digits.
     *
     * Taylor/Maclaurin series.
     *
     * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
     *
     * Argument reduction:
     *   Repeat x = x / 32, k += 5, until |x| < 0.1
     *   exp(x) = exp(x / 2^k)^(2^k)
     *
     * Previously, the argument was initially reduced by
     * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
     * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
     * found to be slower than just dividing repeatedly by 32 as above.
     *
     * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
     *
     *  exp(x) is non-terminating for any finite, non-zero x.
     *
     */


    function exp(x, sd) {
      var denominator,
          guard,
          pow,
          sum,
          t,
          wpr,
          i = 0,
          k = 0,
          Ctor = x.constructor,
          pr = Ctor.precision;
      if (getBase10Exponent(x) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x)); // exp(0) = 1

      if (!x.s) return new Ctor(ONE);

      if (sd == null) {
        external = false;
        wpr = pr;
      } else {
        wpr = sd;
      }

      t = new Ctor(0.03125);

      while (x.abs().gte(0.1)) {
        x = x.times(t); // x = x / 2^5

        k += 5;
      } // Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.


      guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
      wpr += guard;
      denominator = pow = sum = new Ctor(ONE);
      Ctor.precision = wpr;

      for (;;) {
        pow = round(pow.times(x), wpr);
        denominator = denominator.times(++i);
        t = sum.plus(divide(pow, denominator, wpr));

        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
          while (k--) sum = round(sum.times(sum), wpr);

          Ctor.precision = pr;
          return sd == null ? (external = true, round(sum, pr)) : sum;
        }

        sum = t;
      }
    } // Calculate the base 10 exponent from the base 1e7 exponent.


    function getBase10Exponent(x) {
      var e = x.e * LOG_BASE,
          w = x.d[0]; // Add the number of digits of the first word of the digits array.

      for (; w >= 10; w /= 10) e++;

      return e;
    }

    function getLn10(Ctor, sd, pr) {
      if (sd > Ctor.LN10.sd()) {
        // Reset global state in case the exception is caught.
        external = true;
        if (pr) Ctor.precision = pr;
        throw Error(decimalError + 'LN10 precision limit exceeded');
      }

      return round(new Ctor(Ctor.LN10), sd);
    }

    function getZeroString(k) {
      var zs = '';

      for (; k--;) zs += '0';

      return zs;
    }
    /*
     * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant
     * digits.
     *
     *  ln(n) is non-terminating (n != 1)
     *
     */


    function ln(y, sd) {
      var c,
          c0,
          denominator,
          e,
          numerator,
          sum,
          t,
          wpr,
          x2,
          n = 1,
          guard = 10,
          x = y,
          xd = x.d,
          Ctor = x.constructor,
          pr = Ctor.precision; // ln(-x) = NaN
      // ln(0) = -Infinity

      if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity')); // ln(1) = 0

      if (x.eq(ONE)) return new Ctor(0);

      if (sd == null) {
        external = false;
        wpr = pr;
      } else {
        wpr = sd;
      }

      if (x.eq(10)) {
        if (sd == null) external = true;
        return getLn10(Ctor, wpr);
      }

      wpr += guard;
      Ctor.precision = wpr;
      c = digitsToString(xd);
      c0 = c.charAt(0);
      e = getBase10Exponent(x);

      if (Math.abs(e) < 1.5e15) {
        // Argument reduction.
        // The series converges faster the closer the argument is to 1, so using
        // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
        // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
        // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
        // later be divided by this number, then separate out the power of 10 using
        // ln(a*10^b) = ln(a) + b*ln(10).
        // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
        //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
        // max n is 6 (gives 0.7 - 1.3)
        while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
          x = x.times(y);
          c = digitsToString(x.d);
          c0 = c.charAt(0);
          n++;
        }

        e = getBase10Exponent(x);

        if (c0 > 1) {
          x = new Ctor('0.' + c);
          e++;
        } else {
          x = new Ctor(c0 + '.' + c.slice(1));
        }
      } else {
        // The argument reduction method above may result in overflow if the argument y is a massive
        // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
        // function using ln(x*10^e) = ln(x) + e*ln(10).
        t = getLn10(Ctor, wpr + 2, pr).times(e + '');
        x = ln(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
        Ctor.precision = pr;
        return sd == null ? (external = true, round(x, pr)) : x;
      } // x is reduced to a value near 1.
      // Taylor series.
      // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
      // where x = (y - 1)/(y + 1)    (|x| < 1)


      sum = numerator = x = divide(x.minus(ONE), x.plus(ONE), wpr);
      x2 = round(x.times(x), wpr);
      denominator = 3;

      for (;;) {
        numerator = round(numerator.times(x2), wpr);
        t = sum.plus(divide(numerator, new Ctor(denominator), wpr));

        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
          sum = sum.times(2); // Reverse the argument reduction.

          if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
          sum = divide(sum, new Ctor(n), wpr);
          Ctor.precision = pr;
          return sd == null ? (external = true, round(sum, pr)) : sum;
        }

        sum = t;
        denominator += 2;
      }
    }
    /*
     * Parse the value of a new Decimal `x` from string `str`.
     */


    function parseDecimal(x, str) {
      var e, i, len; // Decimal point?

      if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?

      if ((i = str.search(/e/i)) > 0) {
        // Determine exponent.
        if (e < 0) e = i;
        e += +str.slice(i + 1);
        str = str.substring(0, i);
      } else if (e < 0) {
        // Integer.
        e = str.length;
      } // Determine leading zeros.


      for (i = 0; str.charCodeAt(i) === 48;) ++i; // Determine trailing zeros.


      for (len = str.length; str.charCodeAt(len - 1) === 48;) --len;

      str = str.slice(i, len);

      if (str) {
        len -= i;
        e = e - i - 1;
        x.e = mathfloor(e / LOG_BASE);
        x.d = []; // Transform base
        // e is the base 10 exponent.
        // i is where to slice str to get the first word of the digits array.

        i = (e + 1) % LOG_BASE;
        if (e < 0) i += LOG_BASE;

        if (i < len) {
          if (i) x.d.push(+str.slice(0, i));

          for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));

          str = str.slice(i);
          i = LOG_BASE - str.length;
        } else {
          i -= len;
        }

        for (; i--;) str += '0';

        x.d.push(+str);
        if (external && (x.e > MAX_E || x.e < -MAX_E)) throw Error(exponentOutOfRange + e);
      } else {
        // Zero.
        x.s = 0;
        x.e = 0;
        x.d = [0];
      }

      return x;
    }
    /*
     * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).
     */


    function round(x, sd, rm) {
      var i,
          j,
          k,
          n,
          rd,
          doRound,
          w,
          xdi,
          xd = x.d; // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
      // w: the word of xd which contains the rounding digit, a base 1e7 number.
      // xdi: the index of w within xd.
      // n: the number of digits of w.
      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
      // they had leading zeros)
      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).
      // Get the length of the first word of the digits array xd.

      for (n = 1, k = xd[0]; k >= 10; k /= 10) n++;

      i = sd - n; // Is the rounding digit in the first word of xd?

      if (i < 0) {
        i += LOG_BASE;
        j = sd;
        w = xd[xdi = 0];
      } else {
        xdi = Math.ceil((i + 1) / LOG_BASE);
        k = xd.length;
        if (xdi >= k) return x;
        w = k = xd[xdi]; // Get the number of digits of w.

        for (n = 1; k >= 10; k /= 10) n++; // Get the index of rd within w.


        i %= LOG_BASE; // Get the index of rd within w, adjusted for leading zeros.
        // The number of leading zeros of w is given by LOG_BASE - n.

        j = i - LOG_BASE + n;
      }

      if (rm !== void 0) {
        k = mathpow(10, n - j - 1); // Get the rounding digit at index j of w.

        rd = w / k % 10 | 0; // Are there any non-zero digits after the rounding digit?

        doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k; // The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the
        // digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give
        // 714.

        doRound = rm < 4 ? (rd || doRound) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
        (i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
      }

      if (sd < 1 || !xd[0]) {
        if (doRound) {
          k = getBase10Exponent(x);
          xd.length = 1; // Convert sd to decimal places.

          sd = sd - k - 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.

          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
          x.e = mathfloor(-sd / LOG_BASE) || 0;
        } else {
          xd.length = 1; // Zero.

          xd[0] = x.e = x.s = 0;
        }

        return x;
      } // Remove excess digits.


      if (i == 0) {
        xd.length = xdi;
        k = 1;
        xdi--;
      } else {
        xd.length = xdi + 1;
        k = mathpow(10, LOG_BASE - i); // E.g. 56700 becomes 56000 if 7 is the rounding digit.
        // j > 0 means i > number of leading zeros of w.

        xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k : 0;
      }

      if (doRound) {
        for (;;) {
          // Is the digit to be rounded up in the first word of xd?
          if (xdi == 0) {
            if ((xd[0] += k) == BASE) {
              xd[0] = 1;
              ++x.e;
            }

            break;
          } else {
            xd[xdi] += k;
            if (xd[xdi] != BASE) break;
            xd[xdi--] = 0;
            k = 1;
          }
        }
      } // Remove trailing zeros.


      for (i = xd.length; xd[--i] === 0;) xd.pop();

      if (external && (x.e > MAX_E || x.e < -MAX_E)) {
        throw Error(exponentOutOfRange + getBase10Exponent(x));
      }

      return x;
    }

    function subtract(x, y) {
      var d,
          e,
          i,
          j,
          k,
          len,
          xd,
          xe,
          xLTy,
          yd,
          Ctor = x.constructor,
          pr = Ctor.precision; // Return y negated if x is zero.
      // Return x if y is zero and x is non-zero.

      if (!x.s || !y.s) {
        if (y.s) y.s = -y.s;else y = new Ctor(x);
        return external ? round(y, pr) : y;
      }

      xd = x.d;
      yd = y.d; // x and y are non-zero numbers with the same sign.

      e = y.e;
      xe = x.e;
      xd = xd.slice();
      k = xe - e; // If exponents differ...

      if (k) {
        xLTy = k < 0;

        if (xLTy) {
          d = xd;
          k = -k;
          len = yd.length;
        } else {
          d = yd;
          e = xe;
          len = xd.length;
        } // Numbers with massively different exponents would result in a very high number of zeros
        // needing to be prepended, but this can be avoided while still ensuring correct rounding by
        // limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.


        i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;

        if (k > i) {
          k = i;
          d.length = 1;
        } // Prepend zeros to equalise exponents.


        d.reverse();

        for (i = k; i--;) d.push(0);

        d.reverse(); // Base 1e7 exponents equal.
      } else {
        // Check digits to determine which is the bigger number.
        i = xd.length;
        len = yd.length;
        xLTy = i < len;
        if (xLTy) len = i;

        for (i = 0; i < len; i++) {
          if (xd[i] != yd[i]) {
            xLTy = xd[i] < yd[i];
            break;
          }
        }

        k = 0;
      }

      if (xLTy) {
        d = xd;
        xd = yd;
        yd = d;
        y.s = -y.s;
      }

      len = xd.length; // Append zeros to xd if shorter.
      // Don't add zeros to yd if shorter as subtraction only needs to start at yd length.

      for (i = yd.length - len; i > 0; --i) xd[len++] = 0; // Subtract yd from xd.


      for (i = yd.length; i > k;) {
        if (xd[--i] < yd[i]) {
          for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;

          --xd[j];
          xd[i] += BASE;
        }

        xd[i] -= yd[i];
      } // Remove trailing zeros.


      for (; xd[--len] === 0;) xd.pop(); // Remove leading zeros and adjust exponent accordingly.


      for (; xd[0] === 0; xd.shift()) --e; // Zero?


      if (!xd[0]) return new Ctor(0);
      y.d = xd;
      y.e = e; //return external && xd.length >= pr / LOG_BASE ? round(y, pr) : y;

      return external ? round(y, pr) : y;
    }

    function toString$1(x, isExp, sd) {
      var k,
          e = getBase10Exponent(x),
          str = digitsToString(x.d),
          len = str.length;

      if (isExp) {
        if (sd && (k = sd - len) > 0) {
          str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
        } else if (len > 1) {
          str = str.charAt(0) + '.' + str.slice(1);
        }

        str = str + (e < 0 ? 'e' : 'e+') + e;
      } else if (e < 0) {
        str = '0.' + getZeroString(-e - 1) + str;
        if (sd && (k = sd - len) > 0) str += getZeroString(k);
      } else if (e >= len) {
        str += getZeroString(e + 1 - len);
        if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
      } else {
        if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);

        if (sd && (k = sd - len) > 0) {
          if (e + 1 === len) str += '.';
          str += getZeroString(k);
        }
      }

      return x.s < 0 ? '-' + str : str;
    } // Does not strip trailing zeros.


    function truncate(arr, len) {
      if (arr.length > len) {
        arr.length = len;
        return true;
      }
    } // Decimal methods

    /*
     *  clone
     *  config/set
     */

    /*
     * Create and return a Decimal constructor with the same configuration properties as this Decimal
     * constructor.
     *
     */


    function clone(obj) {
      var i, p, ps;
      /*
       * The Decimal constructor and exported function.
       * Return a new Decimal instance.
       *
       * value {number|string|Decimal} A numeric value.
       *
       */

      function Decimal(value) {
        var x = this; // Decimal called without new.

        if (!(x instanceof Decimal)) return new Decimal(value); // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
        // which points to Object.

        x.constructor = Decimal; // Duplicate.

        if (value instanceof Decimal) {
          x.s = value.s;
          x.e = value.e;
          x.d = (value = value.d) ? value.slice() : value;
          return;
        }

        if (typeof value === 'number') {
          // Reject Infinity/NaN.
          if (value * 0 !== 0) {
            throw Error(invalidArgument + value);
          }

          if (value > 0) {
            x.s = 1;
          } else if (value < 0) {
            value = -value;
            x.s = -1;
          } else {
            x.s = 0;
            x.e = 0;
            x.d = [0];
            return;
          } // Fast path for small integers.


          if (value === ~~value && value < 1e7) {
            x.e = 0;
            x.d = [value];
            return;
          }

          return parseDecimal(x, value.toString());
        } else if (typeof value !== 'string') {
          throw Error(invalidArgument + value);
        } // Minus sign?


        if (value.charCodeAt(0) === 45) {
          value = value.slice(1);
          x.s = -1;
        } else {
          x.s = 1;
        }

        if (isDecimal.test(value)) parseDecimal(x, value);else throw Error(invalidArgument + value);
      }

      Decimal.prototype = P;
      Decimal.ROUND_UP = 0;
      Decimal.ROUND_DOWN = 1;
      Decimal.ROUND_CEIL = 2;
      Decimal.ROUND_FLOOR = 3;
      Decimal.ROUND_HALF_UP = 4;
      Decimal.ROUND_HALF_DOWN = 5;
      Decimal.ROUND_HALF_EVEN = 6;
      Decimal.ROUND_HALF_CEIL = 7;
      Decimal.ROUND_HALF_FLOOR = 8;
      Decimal.clone = clone;
      Decimal.config = Decimal.set = config;
      if (obj === void 0) obj = {};

      if (obj) {
        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'];

        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
      }

      Decimal.config(obj);
      return Decimal;
    }
    /*
     * Configure global settings for a Decimal constructor.
     *
     * `obj` is an object with one or more of the following properties,
     *
     *   precision  {number}
     *   rounding   {number}
     *   toExpNeg   {number}
     *   toExpPos   {number}
     *
     * E.g. Decimal.config({ precision: 20, rounding: 4 })
     *
     */


    function config(obj) {
      if (!obj || typeof obj !== 'object') {
        throw Error(decimalError + 'Object expected');
      }

      var i,
          p,
          v,
          ps = ['precision', 1, MAX_DIGITS, 'rounding', 0, 8, 'toExpNeg', -1 / 0, 0, 'toExpPos', 0, 1 / 0];

      for (i = 0; i < ps.length; i += 3) {
        if ((v = obj[p = ps[i]]) !== void 0) {
          if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;else throw Error(invalidArgument + p + ': ' + v);
        }
      }

      if ((v = obj[p = 'LN10']) !== void 0) {
        if (v == Math.LN10) this[p] = new this(v);else throw Error(invalidArgument + p + ': ' + v);
      }

      return this;
    } // Create and configure initial Decimal constructor.


    var Decimal = clone(defaults$5); // Internal constant.

    ONE = new Decimal(1);

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    var dist = {exports: {}};

    (function (module, exports) {
      !function (t, e) {
        module.exports = e() ;
      }(self, function () {
        return t = {
          669: (t, e, r) => {
            t.exports = r(609);
          },
          448: (t, e, r) => {

            var n = r(867),
                o = r(26),
                a = r(372),
                i = r(327),
                s = r(97),
                u = r(109),
                c = r(985),
                l = r(61);

            t.exports = function (t) {
              return new Promise(function (e, r) {
                var d = t.data,
                    p = t.headers;
                n.isFormData(d) && delete p["Content-Type"];
                var f = new XMLHttpRequest();

                if (t.auth) {
                  var h = t.auth.username || "",
                      v = t.auth.password ? unescape(encodeURIComponent(t.auth.password)) : "";
                  p.Authorization = "Basic " + btoa(h + ":" + v);
                }

                var y = s(t.baseURL, t.url);

                if (f.open(t.method.toUpperCase(), i(y, t.params, t.paramsSerializer), !0), f.timeout = t.timeout, f.onreadystatechange = function () {
                  if (f && 4 === f.readyState && (0 !== f.status || f.responseURL && 0 === f.responseURL.indexOf("file:"))) {
                    var n = "getAllResponseHeaders" in f ? u(f.getAllResponseHeaders()) : null,
                        a = {
                      data: t.responseType && "text" !== t.responseType ? f.response : f.responseText,
                      status: f.status,
                      statusText: f.statusText,
                      headers: n,
                      config: t,
                      request: f
                    };
                    o(e, r, a), f = null;
                  }
                }, f.onabort = function () {
                  f && (r(l("Request aborted", t, "ECONNABORTED", f)), f = null);
                }, f.onerror = function () {
                  r(l("Network Error", t, null, f)), f = null;
                }, f.ontimeout = function () {
                  var e = "timeout of " + t.timeout + "ms exceeded";
                  t.timeoutErrorMessage && (e = t.timeoutErrorMessage), r(l(e, t, "ECONNABORTED", f)), f = null;
                }, n.isStandardBrowserEnv()) {
                  var g = (t.withCredentials || c(y)) && t.xsrfCookieName ? a.read(t.xsrfCookieName) : void 0;
                  g && (p[t.xsrfHeaderName] = g);
                }

                if ("setRequestHeader" in f && n.forEach(p, function (t, e) {
                  void 0 === d && "content-type" === e.toLowerCase() ? delete p[e] : f.setRequestHeader(e, t);
                }), n.isUndefined(t.withCredentials) || (f.withCredentials = !!t.withCredentials), t.responseType) try {
                  f.responseType = t.responseType;
                } catch (e) {
                  if ("json" !== t.responseType) throw e;
                }
                "function" == typeof t.onDownloadProgress && f.addEventListener("progress", t.onDownloadProgress), "function" == typeof t.onUploadProgress && f.upload && f.upload.addEventListener("progress", t.onUploadProgress), t.cancelToken && t.cancelToken.promise.then(function (t) {
                  f && (f.abort(), r(t), f = null);
                }), d || (d = null), f.send(d);
              });
            };
          },
          609: (t, e, r) => {

            var n = r(867),
                o = r(849),
                a = r(321),
                i = r(185);

            function s(t) {
              var e = new a(t),
                  r = o(a.prototype.request, e);
              return n.extend(r, a.prototype, e), n.extend(r, e), r;
            }

            var u = s(r(655));
            u.Axios = a, u.create = function (t) {
              return s(i(u.defaults, t));
            }, u.Cancel = r(263), u.CancelToken = r(972), u.isCancel = r(502), u.all = function (t) {
              return Promise.all(t);
            }, u.spread = r(713), u.isAxiosError = r(268), t.exports = u, t.exports.default = u;
          },
          263: t => {

            function e(t) {
              this.message = t;
            }

            e.prototype.toString = function () {
              return "Cancel" + (this.message ? ": " + this.message : "");
            }, e.prototype.__CANCEL__ = !0, t.exports = e;
          },
          972: (t, e, r) => {

            var n = r(263);

            function o(t) {
              if ("function" != typeof t) throw new TypeError("executor must be a function.");
              var e;
              this.promise = new Promise(function (t) {
                e = t;
              });
              var r = this;
              t(function (t) {
                r.reason || (r.reason = new n(t), e(r.reason));
              });
            }

            o.prototype.throwIfRequested = function () {
              if (this.reason) throw this.reason;
            }, o.source = function () {
              var t;
              return {
                token: new o(function (e) {
                  t = e;
                }),
                cancel: t
              };
            }, t.exports = o;
          },
          502: t => {

            t.exports = function (t) {
              return !(!t || !t.__CANCEL__);
            };
          },
          321: (t, e, r) => {

            var n = r(867),
                o = r(327),
                a = r(782),
                i = r(572),
                s = r(185);

            function u(t) {
              this.defaults = t, this.interceptors = {
                request: new a(),
                response: new a()
              };
            }

            u.prototype.request = function (t) {
              "string" == typeof t ? (t = arguments[1] || {}).url = arguments[0] : t = t || {}, (t = s(this.defaults, t)).method ? t.method = t.method.toLowerCase() : this.defaults.method ? t.method = this.defaults.method.toLowerCase() : t.method = "get";
              var e = [i, void 0],
                  r = Promise.resolve(t);

              for (this.interceptors.request.forEach(function (t) {
                e.unshift(t.fulfilled, t.rejected);
              }), this.interceptors.response.forEach(function (t) {
                e.push(t.fulfilled, t.rejected);
              }); e.length;) r = r.then(e.shift(), e.shift());

              return r;
            }, u.prototype.getUri = function (t) {
              return t = s(this.defaults, t), o(t.url, t.params, t.paramsSerializer).replace(/^\?/, "");
            }, n.forEach(["delete", "get", "head", "options"], function (t) {
              u.prototype[t] = function (e, r) {
                return this.request(s(r || {}, {
                  method: t,
                  url: e,
                  data: (r || {}).data
                }));
              };
            }), n.forEach(["post", "put", "patch"], function (t) {
              u.prototype[t] = function (e, r, n) {
                return this.request(s(n || {}, {
                  method: t,
                  url: e,
                  data: r
                }));
              };
            }), t.exports = u;
          },
          782: (t, e, r) => {

            var n = r(867);

            function o() {
              this.handlers = [];
            }

            o.prototype.use = function (t, e) {
              return this.handlers.push({
                fulfilled: t,
                rejected: e
              }), this.handlers.length - 1;
            }, o.prototype.eject = function (t) {
              this.handlers[t] && (this.handlers[t] = null);
            }, o.prototype.forEach = function (t) {
              n.forEach(this.handlers, function (e) {
                null !== e && t(e);
              });
            }, t.exports = o;
          },
          97: (t, e, r) => {

            var n = r(793),
                o = r(303);

            t.exports = function (t, e) {
              return t && !n(e) ? o(t, e) : e;
            };
          },
          61: (t, e, r) => {

            var n = r(481);

            t.exports = function (t, e, r, o, a) {
              var i = new Error(t);
              return n(i, e, r, o, a);
            };
          },
          572: (t, e, r) => {

            var n = r(867),
                o = r(527),
                a = r(502),
                i = r(655);

            function s(t) {
              t.cancelToken && t.cancelToken.throwIfRequested();
            }

            t.exports = function (t) {
              return s(t), t.headers = t.headers || {}, t.data = o(t.data, t.headers, t.transformRequest), t.headers = n.merge(t.headers.common || {}, t.headers[t.method] || {}, t.headers), n.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function (e) {
                delete t.headers[e];
              }), (t.adapter || i.adapter)(t).then(function (e) {
                return s(t), e.data = o(e.data, e.headers, t.transformResponse), e;
              }, function (e) {
                return a(e) || (s(t), e && e.response && (e.response.data = o(e.response.data, e.response.headers, t.transformResponse))), Promise.reject(e);
              });
            };
          },
          481: t => {

            t.exports = function (t, e, r, n, o) {
              return t.config = e, r && (t.code = r), t.request = n, t.response = o, t.isAxiosError = !0, t.toJSON = function () {
                return {
                  message: this.message,
                  name: this.name,
                  description: this.description,
                  number: this.number,
                  fileName: this.fileName,
                  lineNumber: this.lineNumber,
                  columnNumber: this.columnNumber,
                  stack: this.stack,
                  config: this.config,
                  code: this.code
                };
              }, t;
            };
          },
          185: (t, e, r) => {

            var n = r(867);

            t.exports = function (t, e) {
              e = e || {};
              var r = {},
                  o = ["url", "method", "data"],
                  a = ["headers", "auth", "proxy", "params"],
                  i = ["baseURL", "transformRequest", "transformResponse", "paramsSerializer", "timeout", "timeoutMessage", "withCredentials", "adapter", "responseType", "xsrfCookieName", "xsrfHeaderName", "onUploadProgress", "onDownloadProgress", "decompress", "maxContentLength", "maxBodyLength", "maxRedirects", "transport", "httpAgent", "httpsAgent", "cancelToken", "socketPath", "responseEncoding"],
                  s = ["validateStatus"];

              function u(t, e) {
                return n.isPlainObject(t) && n.isPlainObject(e) ? n.merge(t, e) : n.isPlainObject(e) ? n.merge({}, e) : n.isArray(e) ? e.slice() : e;
              }

              function c(o) {
                n.isUndefined(e[o]) ? n.isUndefined(t[o]) || (r[o] = u(void 0, t[o])) : r[o] = u(t[o], e[o]);
              }

              n.forEach(o, function (t) {
                n.isUndefined(e[t]) || (r[t] = u(void 0, e[t]));
              }), n.forEach(a, c), n.forEach(i, function (o) {
                n.isUndefined(e[o]) ? n.isUndefined(t[o]) || (r[o] = u(void 0, t[o])) : r[o] = u(void 0, e[o]);
              }), n.forEach(s, function (n) {
                n in e ? r[n] = u(t[n], e[n]) : n in t && (r[n] = u(void 0, t[n]));
              });
              var l = o.concat(a).concat(i).concat(s),
                  d = Object.keys(t).concat(Object.keys(e)).filter(function (t) {
                return -1 === l.indexOf(t);
              });
              return n.forEach(d, c), r;
            };
          },
          26: (t, e, r) => {

            var n = r(61);

            t.exports = function (t, e, r) {
              var o = r.config.validateStatus;
              r.status && o && !o(r.status) ? e(n("Request failed with status code " + r.status, r.config, null, r.request, r)) : t(r);
            };
          },
          527: (t, e, r) => {

            var n = r(867);

            t.exports = function (t, e, r) {
              return n.forEach(r, function (r) {
                t = r(t, e);
              }), t;
            };
          },
          655: (t, e, r) => {

            var n = r(867),
                o = r(16),
                a = {
              "Content-Type": "application/x-www-form-urlencoded"
            };

            function i(t, e) {
              !n.isUndefined(t) && n.isUndefined(t["Content-Type"]) && (t["Content-Type"] = e);
            }

            var s,
                u = {
              adapter: (("undefined" != typeof XMLHttpRequest || "undefined" != typeof process && "[object process]" === Object.prototype.toString.call(process)) && (s = r(448)), s),
              transformRequest: [function (t, e) {
                return o(e, "Accept"), o(e, "Content-Type"), n.isFormData(t) || n.isArrayBuffer(t) || n.isBuffer(t) || n.isStream(t) || n.isFile(t) || n.isBlob(t) ? t : n.isArrayBufferView(t) ? t.buffer : n.isURLSearchParams(t) ? (i(e, "application/x-www-form-urlencoded;charset=utf-8"), t.toString()) : n.isObject(t) ? (i(e, "application/json;charset=utf-8"), JSON.stringify(t)) : t;
              }],
              transformResponse: [function (t) {
                if ("string" == typeof t) try {
                  t = JSON.parse(t);
                } catch (t) {}
                return t;
              }],
              timeout: 0,
              xsrfCookieName: "XSRF-TOKEN",
              xsrfHeaderName: "X-XSRF-TOKEN",
              maxContentLength: -1,
              maxBodyLength: -1,
              validateStatus: function (t) {
                return t >= 200 && t < 300;
              },
              headers: {
                common: {
                  Accept: "application/json, text/plain, */*"
                }
              }
            };
            n.forEach(["delete", "get", "head"], function (t) {
              u.headers[t] = {};
            }), n.forEach(["post", "put", "patch"], function (t) {
              u.headers[t] = n.merge(a);
            }), t.exports = u;
          },
          849: t => {

            t.exports = function (t, e) {
              return function () {
                for (var r = new Array(arguments.length), n = 0; n < r.length; n++) r[n] = arguments[n];

                return t.apply(e, r);
              };
            };
          },
          327: (t, e, r) => {

            var n = r(867);

            function o(t) {
              return encodeURIComponent(t).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
            }

            t.exports = function (t, e, r) {
              if (!e) return t;
              var a;
              if (r) a = r(e);else if (n.isURLSearchParams(e)) a = e.toString();else {
                var i = [];
                n.forEach(e, function (t, e) {
                  null != t && (n.isArray(t) ? e += "[]" : t = [t], n.forEach(t, function (t) {
                    n.isDate(t) ? t = t.toISOString() : n.isObject(t) && (t = JSON.stringify(t)), i.push(o(e) + "=" + o(t));
                  }));
                }), a = i.join("&");
              }

              if (a) {
                var s = t.indexOf("#");
                -1 !== s && (t = t.slice(0, s)), t += (-1 === t.indexOf("?") ? "?" : "&") + a;
              }

              return t;
            };
          },
          303: t => {

            t.exports = function (t, e) {
              return e ? t.replace(/\/+$/, "") + "/" + e.replace(/^\/+/, "") : t;
            };
          },
          372: (t, e, r) => {

            var n = r(867);
            t.exports = n.isStandardBrowserEnv() ? {
              write: function (t, e, r, o, a, i) {
                var s = [];
                s.push(t + "=" + encodeURIComponent(e)), n.isNumber(r) && s.push("expires=" + new Date(r).toGMTString()), n.isString(o) && s.push("path=" + o), n.isString(a) && s.push("domain=" + a), !0 === i && s.push("secure"), document.cookie = s.join("; ");
              },
              read: function (t) {
                var e = document.cookie.match(new RegExp("(^|;\\s*)(" + t + ")=([^;]*)"));
                return e ? decodeURIComponent(e[3]) : null;
              },
              remove: function (t) {
                this.write(t, "", Date.now() - 864e5);
              }
            } : {
              write: function () {},
              read: function () {
                return null;
              },
              remove: function () {}
            };
          },
          793: t => {

            t.exports = function (t) {
              return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t);
            };
          },
          268: t => {

            t.exports = function (t) {
              return "object" == typeof t && !0 === t.isAxiosError;
            };
          },
          985: (t, e, r) => {

            var n = r(867);
            t.exports = n.isStandardBrowserEnv() ? function () {
              var t,
                  e = /(msie|trident)/i.test(navigator.userAgent),
                  r = document.createElement("a");

              function o(t) {
                var n = t;
                return e && (r.setAttribute("href", n), n = r.href), r.setAttribute("href", n), {
                  href: r.href,
                  protocol: r.protocol ? r.protocol.replace(/:$/, "") : "",
                  host: r.host,
                  search: r.search ? r.search.replace(/^\?/, "") : "",
                  hash: r.hash ? r.hash.replace(/^#/, "") : "",
                  hostname: r.hostname,
                  port: r.port,
                  pathname: "/" === r.pathname.charAt(0) ? r.pathname : "/" + r.pathname
                };
              }

              return t = o(window.location.href), function (e) {
                var r = n.isString(e) ? o(e) : e;
                return r.protocol === t.protocol && r.host === t.host;
              };
            }() : function () {
              return !0;
            };
          },
          16: (t, e, r) => {

            var n = r(867);

            t.exports = function (t, e) {
              n.forEach(t, function (r, n) {
                n !== e && n.toUpperCase() === e.toUpperCase() && (t[e] = r, delete t[n]);
              });
            };
          },
          109: (t, e, r) => {

            var n = r(867),
                o = ["age", "authorization", "content-length", "content-type", "etag", "expires", "from", "host", "if-modified-since", "if-unmodified-since", "last-modified", "location", "max-forwards", "proxy-authorization", "referer", "retry-after", "user-agent"];

            t.exports = function (t) {
              var e,
                  r,
                  a,
                  i = {};
              return t ? (n.forEach(t.split("\n"), function (t) {
                if (a = t.indexOf(":"), e = n.trim(t.substr(0, a)).toLowerCase(), r = n.trim(t.substr(a + 1)), e) {
                  if (i[e] && o.indexOf(e) >= 0) return;
                  i[e] = "set-cookie" === e ? (i[e] ? i[e] : []).concat([r]) : i[e] ? i[e] + ", " + r : r;
                }
              }), i) : i;
            };
          },
          713: t => {

            t.exports = function (t) {
              return function (e) {
                return t.apply(null, e);
              };
            };
          },
          867: (t, e, r) => {

            var n = r(849),
                o = Object.prototype.toString;

            function a(t) {
              return "[object Array]" === o.call(t);
            }

            function i(t) {
              return void 0 === t;
            }

            function s(t) {
              return null !== t && "object" == typeof t;
            }

            function u(t) {
              if ("[object Object]" !== o.call(t)) return !1;
              var e = Object.getPrototypeOf(t);
              return null === e || e === Object.prototype;
            }

            function c(t) {
              return "[object Function]" === o.call(t);
            }

            function l(t, e) {
              if (null != t) if ("object" != typeof t && (t = [t]), a(t)) for (var r = 0, n = t.length; r < n; r++) e.call(null, t[r], r, t);else for (var o in t) Object.prototype.hasOwnProperty.call(t, o) && e.call(null, t[o], o, t);
            }

            t.exports = {
              isArray: a,
              isArrayBuffer: function (t) {
                return "[object ArrayBuffer]" === o.call(t);
              },
              isBuffer: function (t) {
                return null !== t && !i(t) && null !== t.constructor && !i(t.constructor) && "function" == typeof t.constructor.isBuffer && t.constructor.isBuffer(t);
              },
              isFormData: function (t) {
                return "undefined" != typeof FormData && t instanceof FormData;
              },
              isArrayBufferView: function (t) {
                return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(t) : t && t.buffer && t.buffer instanceof ArrayBuffer;
              },
              isString: function (t) {
                return "string" == typeof t;
              },
              isNumber: function (t) {
                return "number" == typeof t;
              },
              isObject: s,
              isPlainObject: u,
              isUndefined: i,
              isDate: function (t) {
                return "[object Date]" === o.call(t);
              },
              isFile: function (t) {
                return "[object File]" === o.call(t);
              },
              isBlob: function (t) {
                return "[object Blob]" === o.call(t);
              },
              isFunction: c,
              isStream: function (t) {
                return s(t) && c(t.pipe);
              },
              isURLSearchParams: function (t) {
                return "undefined" != typeof URLSearchParams && t instanceof URLSearchParams;
              },
              isStandardBrowserEnv: function () {
                return ("undefined" == typeof navigator || "ReactNative" !== navigator.product && "NativeScript" !== navigator.product && "NS" !== navigator.product) && "undefined" != typeof window && "undefined" != typeof document;
              },
              forEach: l,
              merge: function t() {
                var e = {};

                function r(r, n) {
                  u(e[n]) && u(r) ? e[n] = t(e[n], r) : u(r) ? e[n] = t({}, r) : a(r) ? e[n] = r.slice() : e[n] = r;
                }

                for (var n = 0, o = arguments.length; n < o; n++) l(arguments[n], r);

                return e;
              },
              extend: function (t, e, r) {
                return l(e, function (e, o) {
                  t[o] = r && "function" == typeof e ? n(e, r) : e;
                }), t;
              },
              trim: function (t) {
                return t.replace(/^\s*/, "").replace(/\s*$/, "");
              },
              stripBOM: function (t) {
                return 65279 === t.charCodeAt(0) && (t = t.slice(1)), t;
              }
            };
          },
          203: (t, e, r) => {

            Object.defineProperty(e, "__esModule", {
              value: !0
            }), e.getAPIs = void 0;
            var n = r(134);

            e.getAPIs = function (t) {
              var e = "",
                  r = "";
              return t === n.ENV.Test && (r = "http://192.168.1.13:6001", e = ""), t === n.ENV.Staging && (r = "https://staging.api.ddpurse.com", e = "https://staging.api.ddpurse.com"), t === n.ENV.Production && (r = "https://api.ddpurse.com", e = "https://api.ddpurse.com"), {
                auth: r + "/v1/oauth2/authorize",
                getToken: e + "/v1/oauth2/get_access_token",
                getUserInfo: e + "/v1/user/get_user_info",
                metaidNewAccount: e + "/v1/bsv/metaid_new_account",
                metaidUpdateUserInfo: e + "/v1/bsv/metaid_update_userinfo",
                metaidGetUserInfo: e + "/v1/bsv/metaid_get_user_info",
                addProtocolNode: e + "/v1/bsv/metaid_add_protocol_node",
                sendMetaDataTx: e + "/v1/bsv/metaid_send_metadata_tx",
                signMessage: e + "/v1/bsv/metaid_sign_message",
                eciesEncryptData: e + "/v1/bsv/metaid_ecies_encrypt_data",
                eciesDecryptData: e + "/v1/bsv/metaid_ecies_decrypt_data",
                ecdhEncryptData: e + "/v1/bsv/metaid_ecdh_encrypt_data",
                ecdhDecryptData: e + "/v1/bsv/metaid_ecdh_decrypt_data",
                payToAddress: e + "/v1/bsv/metaid_pay_to_address",
                dappListUnspent: e + "/v1/grandet_dapp/dapp_list_unspent",
                dappSignRawTransaction: e + "/v1/grandet_dapp/dapp_sign_raw_transaction",
                dappGetSignature: e + "/v1/grandet_dapp/dapp_get_signature",
                dappGetBalance: e + "/v1/grandet_dapp/dapp_get_balance",
                dappSendRawTransaction: e + "/v1/grandet_dapp/dapp_send_raw_transaction",
                dappGetRawChangeAddress: e + "/v1/grandet_dapp/dapp_get_raw_change_address",
                dappGetPublicKey: e + "/v1/grandet_dapp/dapp_get_public_key"
              };
            };
          },
          607: function (t, e, r) {

            var n = this && this.__assign || function () {
              return (n = Object.assign || function (t) {
                for (var e, r = 1, n = arguments.length; r < n; r++) for (var o in e = arguments[r]) Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);

                return t;
              }).apply(this, arguments);
            },
                o = this && this.__createBinding || (Object.create ? function (t, e, r, n) {
              void 0 === n && (n = r), Object.defineProperty(t, n, {
                enumerable: !0,
                get: function () {
                  return e[r];
                }
              });
            } : function (t, e, r, n) {
              void 0 === n && (n = r), t[n] = e[r];
            }),
                a = this && this.__decorate || function (t, e, r, n) {
              var o,
                  a = arguments.length,
                  i = a < 3 ? e : null === n ? n = Object.getOwnPropertyDescriptor(e, r) : n;
              if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) i = Reflect.decorate(t, e, r, n);else for (var s = t.length - 1; s >= 0; s--) (o = t[s]) && (i = (a < 3 ? o(i) : a > 3 ? o(e, r, i) : o(e, r)) || i);
              return a > 3 && i && Object.defineProperty(e, r, i), i;
            },
                i = this && this.__exportStar || function (t, e) {
              for (var r in t) "default" === r || Object.prototype.hasOwnProperty.call(e, r) || o(e, t, r);
            },
                s = this && this.__awaiter || function (t, e, r, n) {
              return new (r || (r = Promise))(function (o, a) {
                function i(t) {
                  try {
                    u(n.next(t));
                  } catch (t) {
                    a(t);
                  }
                }

                function s(t) {
                  try {
                    u(n.throw(t));
                  } catch (t) {
                    a(t);
                  }
                }

                function u(t) {
                  var e;
                  t.done ? o(t.value) : (e = t.value, e instanceof r ? e : new r(function (t) {
                    t(e);
                  })).then(i, s);
                }

                u((n = n.apply(t, e || [])).next());
              });
            },
                u = this && this.__generator || function (t, e) {
              var r,
                  n,
                  o,
                  a,
                  i = {
                label: 0,
                sent: function () {
                  if (1 & o[0]) throw o[1];
                  return o[1];
                },
                trys: [],
                ops: []
              };
              return a = {
                next: s(0),
                throw: s(1),
                return: s(2)
              }, "function" == typeof Symbol && (a[Symbol.iterator] = function () {
                return this;
              }), a;

              function s(a) {
                return function (s) {
                  return function (a) {
                    if (r) throw new TypeError("Generator is already executing.");

                    for (; i;) try {
                      if (r = 1, n && (o = 2 & a[0] ? n.return : a[0] ? n.throw || ((o = n.return) && o.call(n), 0) : n.next) && !(o = o.call(n, a[1])).done) return o;

                      switch (n = 0, o && (a = [2 & a[0], o.value]), a[0]) {
                        case 0:
                        case 1:
                          o = a;
                          break;

                        case 4:
                          return i.label++, {
                            value: a[1],
                            done: !1
                          };

                        case 5:
                          i.label++, n = a[1], a = [0];
                          continue;

                        case 7:
                          a = i.ops.pop(), i.trys.pop();
                          continue;

                        default:
                          if (!((o = (o = i.trys).length > 0 && o[o.length - 1]) || 6 !== a[0] && 2 !== a[0])) {
                            i = 0;
                            continue;
                          }

                          if (3 === a[0] && (!o || a[1] > o[0] && a[1] < o[3])) {
                            i.label = a[1];
                            break;
                          }

                          if (6 === a[0] && i.label < o[1]) {
                            i.label = o[1], o = a;
                            break;
                          }

                          if (o && i.label < o[2]) {
                            i.label = o[2], i.ops.push(a);
                            break;
                          }

                          o[2] && i.ops.pop(), i.trys.pop();
                          continue;
                      }

                      a = e.call(t, i);
                    } catch (t) {
                      a = [6, t], n = 0;
                    } finally {
                      r = o = 0;
                    }

                    if (5 & a[0]) throw a[1];
                    return {
                      value: a[0] ? a[1] : void 0,
                      done: !0
                    };
                  }([a, s]);
                };
              }
            };

            Object.defineProperty(e, "__esModule", {
              value: !0
            }), e.CatchError = void 0;
            var c = r(203),
                l = r(134),
                d = r(83),
                p = r(882);
            i(r(134), e), i(r(29), e), e.CatchError = function () {
              return function (t, e, r) {
                var n = r.value;

                r.value = function () {
                  for (var t = [], r = 0; r < arguments.length; r++) t[r] = arguments[r];

                  return s(this, void 0, void 0, function () {
                    var r;
                    return u(this, function (o) {
                      switch (o.label) {
                        case 0:
                          return o.trys.push([0, 2,, 3]), [4, n.apply(this, t)];

                        case 1:
                          return [2, o.sent()];

                        case 2:
                          return r = o.sent(), console.error("[DotWallet Error: " + String(e) + "]", r), [2, null];

                        case 3:
                          return [2];
                      }
                    });
                  });
                };
              };
            };

            var f = function () {
              function t(t) {
                this.clientID = t.clientID, this.clientSecret = t.clientSecret || "", this.redirectUrl = t.redirectUrl, this.dotwalletUser = {}, this.metaIDUserInfo = {}, this.env = t.env || l.ENV.Staging, this.api = c.getAPIs(this.env), p.default.globalData.set("CLIENT_ID", t.clientID), p.default.globalData.set("DOTWALLET_ENV", this.env);
              }

              return t.prototype.login = function (t) {
                var e = ["client_id=" + this.clientID, "redirect_uri=" + this.redirectUrl, "response_type=code", "scope=" + ((null == t ? void 0 : t.scope) || "user.info"), "state=" + ((null == t ? void 0 : t.state) || "jssdk")];
                location.href = this.api.auth + "?" + e.join("&");
              }, t.prototype.getToken = function (t) {
                var e, r, n, o, a;
                return s(this, void 0, void 0, function () {
                  var i, s, c;
                  return u(this, function (u) {
                    switch (u.label) {
                      case 0:
                        return [4, d.default.post(this.api.getToken, {
                          code: t.code,
                          client_id: this.clientID,
                          client_secret: t.clientSecret || this.clientSecret,
                          grant_type: t.grantType || "authorization_code",
                          redirect_uri: this.redirectUrl
                        })];

                      case 1:
                        return i = u.sent().data, s = null === (e = null == i ? void 0 : i.data) || void 0 === e ? void 0 : e.access_token, c = null === (r = null == i ? void 0 : i.data) || void 0 === r ? void 0 : r.refresh_token, p.default.globalData.set("ACCESS_TOKEN", s), p.default.globalData.set("REFESH_TOKEN", c), [2, {
                          accessToken: s,
                          refreshToken: c,
                          scope: null === (n = null == i ? void 0 : i.data) || void 0 === n ? void 0 : n.scope,
                          tokenType: null === (o = null == i ? void 0 : i.data) || void 0 === o ? void 0 : o.token_type,
                          expiresIn: null === (a = null == i ? void 0 : i.data) || void 0 === a ? void 0 : a.expires_in
                        }];
                    }
                  });
                });
              }, t.prototype.refreshToken = function (t) {
                var e, r, n, o, a;
                return s(this, void 0, void 0, function () {
                  var i, s, c;
                  return u(this, function (u) {
                    switch (u.label) {
                      case 0:
                        return [4, d.default.post(this.api.getToken, {
                          client_id: this.clientID,
                          client_secret: t.clientSecret || this.clientSecret,
                          grant_type: "refresh_token",
                          refresh_token: t.refreshToken
                        })];

                      case 1:
                        return i = u.sent().data, s = null === (e = null == i ? void 0 : i.data) || void 0 === e ? void 0 : e.access_token, c = null === (r = null == i ? void 0 : i.data) || void 0 === r ? void 0 : r.refresh_token, p.default.globalData.set("ACCESS_TOKEN", s), p.default.globalData.set("REFESH_TOKEN", c), [2, {
                          accessToken: s,
                          refreshToken: c,
                          scope: null === (n = null == i ? void 0 : i.data) || void 0 === n ? void 0 : n.scope,
                          tokenType: null === (o = null == i ? void 0 : i.data) || void 0 === o ? void 0 : o.token_type,
                          expiresIn: null === (a = null == i ? void 0 : i.data) || void 0 === a ? void 0 : a.expires_in
                        }];
                    }
                  });
                });
              }, t.prototype.getDotWalletUserInfo = function () {
                return s(this, void 0, void 0, function () {
                  return u(this, function (t) {
                    switch (t.label) {
                      case 0:
                        return [4, d.default.post(this.api.getUserInfo)];

                      case 1:
                        return [2, t.sent().data.data];
                    }
                  });
                });
              }, t.prototype.getMetaIDUserInfo = function () {
                return s(this, void 0, void 0, function () {
                  var t, e;
                  return u(this, function (r) {
                    switch (r.label) {
                      case 0:
                        return [4, d.default.post(this.api.metaidGetUserInfo)];

                      case 1:
                        return t = r.sent().data, (e = t.data) && (this.metaIDUserInfo = e), [2, e];
                    }
                  });
                });
              }, t.prototype.updateMetaIDUserInfo = function (t) {
                return s(this, void 0, void 0, function () {
                  return u(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return [4, d.default.post(this.api.metaidUpdateUserInfo, t)];

                      case 1:
                        return [2, e.sent().data.data];
                    }
                  });
                });
              }, t.prototype.sendMetaDataTx = function (t) {
                return s(this, void 0, void 0, function () {
                  return u(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return [4, d.default.post(this.api.sendMetaDataTx, t)];

                      case 1:
                        return [2, e.sent().data.data];
                    }
                  });
                });
              }, t.prototype.addProtocolNode = function (t) {
                return s(this, void 0, void 0, function () {
                  return u(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return [4, d.default.post(this.api.addProtocolNode, t)];

                      case 1:
                        return [2, e.sent().data.data];
                    }
                  });
                });
              }, t.prototype.signMessage = function (t) {
                return s(this, void 0, void 0, function () {
                  return u(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return [4, d.default.post(this.api.signMessage, t)];

                      case 1:
                        return [2, e.sent().data.data];
                    }
                  });
                });
              }, t.prototype.eciesEncryptData = function (t) {
                return s(this, void 0, void 0, function () {
                  return u(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return [4, d.default.post(this.api.eciesEncryptData, t)];

                      case 1:
                        return [2, e.sent().data.data];
                    }
                  });
                });
              }, t.prototype.eciesDecryptData = function (t) {
                return s(this, void 0, void 0, function () {
                  return u(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return [4, d.default.post(this.api.eciesDecryptData, t)];

                      case 1:
                        return [2, e.sent().data.data];
                    }
                  });
                });
              }, t.prototype.ecdhEncryptData = function (t) {
                return s(this, void 0, void 0, function () {
                  return u(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return [4, d.default.post(this.api.ecdhEncryptData, t)];

                      case 1:
                        return [2, e.sent().data.data];
                    }
                  });
                });
              }, t.prototype.ecdhDecryptData = function (t) {
                return s(this, void 0, void 0, function () {
                  return u(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return [4, d.default.post(this.api.ecdhDecryptData, t)];

                      case 1:
                        return [2, e.sent().data.data];
                    }
                  });
                });
              }, t.prototype.payToAddress = function (t) {
                return s(this, void 0, void 0, function () {
                  return u(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return [4, d.default.post(this.api.payToAddress, t)];

                      case 1:
                        return [2, e.sent().data.data];
                    }
                  });
                });
              }, t.prototype.dappListUnspent = function (t) {
                return void 0 === t && (t = {
                  minAmount: 0
                }), s(this, void 0, void 0, function () {
                  var e;
                  return u(this, function (r) {
                    switch (r.label) {
                      case 0:
                        return r.trys.push([0, 2,, 3]), [4, d.default.post(this.api.dappListUnspent, {
                          min_amount: t.minAmount
                        })];

                      case 1:
                        return [2, r.sent().data.data];

                      case 2:
                        return e = r.sent(), console.error("DOTWALLET_JSSDK_DAPP_LIST_UNSPENT_FAIL: ", e), [2, null];

                      case 3:
                        return [2];
                    }
                  });
                });
              }, t.prototype.dappGetBalance = function () {
                return s(this, void 0, void 0, function () {
                  var t, e;
                  return u(this, function (r) {
                    switch (r.label) {
                      case 0:
                        return r.trys.push([0, 2,, 3]), [4, d.default.post(this.api.dappGetBalance)];

                      case 1:
                        return t = r.sent().data, [2, n(n({}, t.data), {
                          total: t.data.confirm + t.data.unconfirm
                        })];

                      case 2:
                        return e = r.sent(), console.error("DOTWALLET_JSSDK_DAPP_GET_BALANCE_FAIL: ", e), [2, null];

                      case 3:
                        return [2];
                    }
                  });
                });
              }, t.prototype.dappGetPublicKey = function () {
                return s(this, void 0, void 0, function () {
                  var t;
                  return u(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return e.trys.push([0, 2,, 3]), [4, d.default.post(this.api.dappGetPublicKey)];

                      case 1:
                        return [2, e.sent().data.data];

                      case 2:
                        return t = e.sent(), console.error("DOTWALLET_JSSDK_DAPP_GET_PUBLIC_KEY_FAIL: ", t), [2, null];

                      case 3:
                        return [2];
                    }
                  });
                });
              }, t.prototype.dappGetRawChangeAddress = function () {
                return s(this, void 0, void 0, function () {
                  var t;
                  return u(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return e.trys.push([0, 2,, 3]), [4, d.default.post(this.api.dappGetRawChangeAddress)];

                      case 1:
                        return [2, e.sent().data.data];

                      case 2:
                        return t = e.sent(), console.error("DOTWALLET_JSSDK_DAPP_GET_RAW_CHANGE_ADDRESS_FAIL: ", t), [2, null];

                      case 3:
                        return [2];
                    }
                  });
                });
              }, t.prototype.dappGetSignature = function (t) {
                return s(this, void 0, void 0, function () {
                  var e;
                  return u(this, function (r) {
                    switch (r.label) {
                      case 0:
                        return r.trys.push([0, 2,, 3]), [4, d.default.post(this.api.dappGetSignature, {
                          rawtx: t.rawtx,
                          input_index: t.inputIndex,
                          sig_type: t.sigType,
                          addr: t.addr
                        })];

                      case 1:
                        return [2, r.sent().data.data];

                      case 2:
                        return e = r.sent(), console.error("DOTWALLET_JSSDK_DAPP_GET_SIGNATURE_FAIL: ", e), [2, null];

                      case 3:
                        return [2];
                    }
                  });
                });
              }, t.prototype.dappSignRawTransaction = function (t) {
                return s(this, void 0, void 0, function () {
                  var e;
                  return u(this, function (r) {
                    switch (r.label) {
                      case 0:
                        return r.trys.push([0, 2,, 3]), [4, d.default.post(this.api.dappSignRawTransaction, {
                          rawtx: t.rawtx,
                          input_index: t.inputIndex,
                          sig_type: t.sigType,
                          addr: t.addr
                        })];

                      case 1:
                        return [2, r.sent().data.data];

                      case 2:
                        return e = r.sent(), console.error("DOTWALLET_JSSDK_DAPP_SIGN_RAW_TRANSACTION_FAIL: ", e), [2, null];

                      case 3:
                        return [2];
                    }
                  });
                });
              }, t.prototype.dappSendRawTransaction = function (t) {
                return s(this, void 0, void 0, function () {
                  var e;
                  return u(this, function (r) {
                    switch (r.label) {
                      case 0:
                        return r.trys.push([0, 2,, 3]), [4, d.default.post(this.api.dappSendRawTransaction, t)];

                      case 1:
                        return [2, r.sent().data.data];

                      case 2:
                        return e = r.sent(), console.error("DOTWALLET_JSSDK_DAPP_SEND_RAW_TRANSACTION_FAIL: ", e), [2, null];

                      case 3:
                        return [2];
                    }
                  });
                });
              }, a([e.CatchError()], t.prototype, "getToken", null), a([e.CatchError()], t.prototype, "refreshToken", null), a([e.CatchError()], t.prototype, "getDotWalletUserInfo", null), a([e.CatchError()], t.prototype, "getMetaIDUserInfo", null), a([e.CatchError()], t.prototype, "updateMetaIDUserInfo", null), a([e.CatchError()], t.prototype, "sendMetaDataTx", null), a([e.CatchError()], t.prototype, "addProtocolNode", null), a([e.CatchError()], t.prototype, "signMessage", null), a([e.CatchError()], t.prototype, "eciesEncryptData", null), a([e.CatchError()], t.prototype, "eciesDecryptData", null), a([e.CatchError()], t.prototype, "ecdhEncryptData", null), a([e.CatchError()], t.prototype, "ecdhDecryptData", null), a([e.CatchError()], t.prototype, "payToAddress", null), t;
            }();

            e.default = f;
          },
          29: function (t, e, r) {

            var n = this && this.__decorate || function (t, e, r, n) {
              var o,
                  a = arguments.length,
                  i = a < 3 ? e : null === n ? n = Object.getOwnPropertyDescriptor(e, r) : n;
              if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) i = Reflect.decorate(t, e, r, n);else for (var s = t.length - 1; s >= 0; s--) (o = t[s]) && (i = (a < 3 ? o(i) : a > 3 ? o(e, r, i) : o(e, r)) || i);
              return a > 3 && i && Object.defineProperty(e, r, i), i;
            },
                o = this && this.__awaiter || function (t, e, r, n) {
              return new (r || (r = Promise))(function (o, a) {
                function i(t) {
                  try {
                    u(n.next(t));
                  } catch (t) {
                    a(t);
                  }
                }

                function s(t) {
                  try {
                    u(n.throw(t));
                  } catch (t) {
                    a(t);
                  }
                }

                function u(t) {
                  var e;
                  t.done ? o(t.value) : (e = t.value, e instanceof r ? e : new r(function (t) {
                    t(e);
                  })).then(i, s);
                }

                u((n = n.apply(t, e || [])).next());
              });
            },
                a = this && this.__generator || function (t, e) {
              var r,
                  n,
                  o,
                  a,
                  i = {
                label: 0,
                sent: function () {
                  if (1 & o[0]) throw o[1];
                  return o[1];
                },
                trys: [],
                ops: []
              };
              return a = {
                next: s(0),
                throw: s(1),
                return: s(2)
              }, "function" == typeof Symbol && (a[Symbol.iterator] = function () {
                return this;
              }), a;

              function s(a) {
                return function (s) {
                  return function (a) {
                    if (r) throw new TypeError("Generator is already executing.");

                    for (; i;) try {
                      if (r = 1, n && (o = 2 & a[0] ? n.return : a[0] ? n.throw || ((o = n.return) && o.call(n), 0) : n.next) && !(o = o.call(n, a[1])).done) return o;

                      switch (n = 0, o && (a = [2 & a[0], o.value]), a[0]) {
                        case 0:
                        case 1:
                          o = a;
                          break;

                        case 4:
                          return i.label++, {
                            value: a[1],
                            done: !1
                          };

                        case 5:
                          i.label++, n = a[1], a = [0];
                          continue;

                        case 7:
                          a = i.ops.pop(), i.trys.pop();
                          continue;

                        default:
                          if (!((o = (o = i.trys).length > 0 && o[o.length - 1]) || 6 !== a[0] && 2 !== a[0])) {
                            i = 0;
                            continue;
                          }

                          if (3 === a[0] && (!o || a[1] > o[0] && a[1] < o[3])) {
                            i.label = a[1];
                            break;
                          }

                          if (6 === a[0] && i.label < o[1]) {
                            i.label = o[1], o = a;
                            break;
                          }

                          if (o && i.label < o[2]) {
                            i.label = o[2], i.ops.push(a);
                            break;
                          }

                          o[2] && i.ops.pop(), i.trys.pop();
                          continue;
                      }

                      a = e.call(t, i);
                    } catch (t) {
                      a = [6, t], n = 0;
                    } finally {
                      r = o = 0;
                    }

                    if (5 & a[0]) throw a[1];
                    return {
                      value: a[0] ? a[1] : void 0,
                      done: !0
                    };
                  }([a, s]);
                };
              }
            };

            Object.defineProperty(e, "__esModule", {
              value: !0
            }), e.DotWalletForMetaID = void 0;

            var i = r(607),
                s = r(203),
                u = r(83),
                c = r(882),
                l = function () {
              return function (t, e, r) {
                var n = r.value;

                r.value = function () {
                  for (var t, r, i = [], s = 0; s < arguments.length; s++) i[s] = arguments[s];

                  return o(this, void 0, void 0, function () {
                    var o, s, u;
                    return a(this, function (a) {
                      switch (a.label) {
                        case 0:
                          return a.trys.push([0, 2,, 3]), [4, n.apply(this, i)];

                        case 1:
                          return o = a.sent(), (u = i && i[0] && i[0].callback) && "function" == typeof u && u({
                            code: 200,
                            status: "success",
                            data: o
                          }), [2, o];

                        case 2:
                          return s = a.sent(), console.error("[DotWallet Error: " + String(e) + "]", s), (u = i && i[0] && i[0].callback) && "function" == typeof u && u({
                            code: 400,
                            status: "failure",
                            data: {
                              data: null === (t = null == s ? void 0 : s.data) || void 0 === t ? void 0 : t.data,
                              message: null === (r = null == s ? void 0 : s.data) || void 0 === r ? void 0 : r.msg
                            }
                          }), [2, null];

                        case 3:
                          return [2];
                      }
                    });
                  });
                };
              };
            },
                d = function () {
              function t(t) {
                this.clientID = t.clientID, this.clientSecret = t.clientSecret || "", this.redirectUrl = t.redirectUrl, this.dotwalletUser = {}, this.metaIDUserInfo = {}, this.env = t.env || i.ENV.Staging, this.api = s.getAPIs(this.env), c.default.globalData.set("CLIENT_ID", t.clientID), c.default.globalData.set("DOTWALLET_ENV", this.env);
              }

              return t.prototype.login = function (t) {
                var e = ["client_id=" + this.clientID, "redirect_uri=" + this.redirectUrl, "response_type=code", "scope=" + ((null == t ? void 0 : t.scope) || "user.info"), "state=" + ((null == t ? void 0 : t.state) || "jssdk")];
                location.href = this.api.auth + "?" + e.join("&");
              }, t.prototype.getToken = function (t) {
                var e, r, n, i, s;
                return o(this, void 0, void 0, function () {
                  var o, l, d;
                  return a(this, function (a) {
                    switch (a.label) {
                      case 0:
                        return [4, u.default.post(this.api.getToken, {
                          code: t.code,
                          client_id: this.clientID,
                          client_secret: t.clientSecret || this.clientSecret,
                          grant_type: t.grantType || "authorization_code",
                          redirect_uri: this.redirectUrl
                        })];

                      case 1:
                        return o = a.sent().data, l = null === (e = null == o ? void 0 : o.data) || void 0 === e ? void 0 : e.access_token, d = null === (r = null == o ? void 0 : o.data) || void 0 === r ? void 0 : r.refresh_token, c.default.globalData.set("ACCESS_TOKEN", l), c.default.globalData.set("REFESH_TOKEN", d), [2, {
                          accessToken: l,
                          refreshToken: d,
                          scope: null === (n = null == o ? void 0 : o.data) || void 0 === n ? void 0 : n.scope,
                          tokenType: null === (i = null == o ? void 0 : o.data) || void 0 === i ? void 0 : i.token_type,
                          expiresIn: null === (s = null == o ? void 0 : o.data) || void 0 === s ? void 0 : s.expires_in
                        }];
                    }
                  });
                });
              }, t.prototype.refreshToken = function (t) {
                var e, r, n, i, s;
                return o(this, void 0, void 0, function () {
                  var o, l, d;
                  return a(this, function (a) {
                    switch (a.label) {
                      case 0:
                        return [4, u.default.post(this.api.getToken, {
                          client_id: this.clientID,
                          client_secret: t.clientSecret || this.clientSecret,
                          grant_type: "refresh_token",
                          refresh_token: t.refreshToken
                        })];

                      case 1:
                        return o = a.sent().data, l = null === (e = null == o ? void 0 : o.data) || void 0 === e ? void 0 : e.access_token, d = null === (r = null == o ? void 0 : o.data) || void 0 === r ? void 0 : r.refresh_token, c.default.globalData.set("ACCESS_TOKEN", l), c.default.globalData.set("REFESH_TOKEN", d), [2, {
                          accessToken: l,
                          refreshToken: d,
                          scope: null === (n = null == o ? void 0 : o.data) || void 0 === n ? void 0 : n.scope,
                          tokenType: null === (i = null == o ? void 0 : o.data) || void 0 === i ? void 0 : i.token_type,
                          expiresIn: null === (s = null == o ? void 0 : o.data) || void 0 === s ? void 0 : s.expires_in
                        }];
                    }
                  });
                });
              }, t.prototype.getMetaIDUserInfo = function (t) {
                return o(this, void 0, void 0, function () {
                  var t, e;
                  return a(this, function (r) {
                    switch (r.label) {
                      case 0:
                        return [4, u.default.post(this.api.metaidGetUserInfo)];

                      case 1:
                        return t = r.sent().data, (e = t.data) && (this.metaIDUserInfo = e), [2, e];
                    }
                  });
                });
              }, t.prototype.updateMetaIDUserInfo = function (t) {
                return o(this, void 0, void 0, function () {
                  return a(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return [4, u.default.post(this.api.metaidUpdateUserInfo, t)];

                      case 1:
                        return [2, e.sent().data.data];
                    }
                  });
                });
              }, t.prototype.sendMetaDataTx = function (t) {
                return o(this, void 0, void 0, function () {
                  return a(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return [4, u.default.post(this.api.sendMetaDataTx, t)];

                      case 1:
                        return [2, e.sent().data.data];
                    }
                  });
                });
              }, t.prototype.addProtocolNode = function (t) {
                return o(this, void 0, void 0, function () {
                  return a(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return [4, u.default.post(this.api.addProtocolNode, t)];

                      case 1:
                        return [2, e.sent().data.data];
                    }
                  });
                });
              }, t.prototype.signMessage = function (t) {
                return o(this, void 0, void 0, function () {
                  return a(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return [4, u.default.post(this.api.signMessage, t)];

                      case 1:
                        return [2, e.sent().data.data];
                    }
                  });
                });
              }, t.prototype.eciesEncryptData = function (t) {
                return o(this, void 0, void 0, function () {
                  return a(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return [4, u.default.post(this.api.eciesEncryptData, t)];

                      case 1:
                        return [2, e.sent().data.data];
                    }
                  });
                });
              }, t.prototype.eciesDecryptData = function (t) {
                return o(this, void 0, void 0, function () {
                  return a(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return [4, u.default.post(this.api.eciesDecryptData, t)];

                      case 1:
                        return [2, e.sent().data.data];
                    }
                  });
                });
              }, t.prototype.ecdhEncryptData = function (t) {
                return o(this, void 0, void 0, function () {
                  return a(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return [4, u.default.post(this.api.ecdhEncryptData, t)];

                      case 1:
                        return [2, e.sent().data.data];
                    }
                  });
                });
              }, t.prototype.ecdhDecryptData = function (t) {
                return o(this, void 0, void 0, function () {
                  return a(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return [4, u.default.post(this.api.ecdhDecryptData, t)];

                      case 1:
                        return [2, e.sent().data.data];
                    }
                  });
                });
              }, t.prototype.payToAddress = function (t) {
                return o(this, void 0, void 0, function () {
                  return a(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return [4, u.default.post(this.api.payToAddress, t)];

                      case 1:
                        return [2, e.sent().data.data];
                    }
                  });
                });
              }, n([l()], t.prototype, "getToken", null), n([l()], t.prototype, "refreshToken", null), n([l()], t.prototype, "getMetaIDUserInfo", null), n([l()], t.prototype, "updateMetaIDUserInfo", null), n([l()], t.prototype, "sendMetaDataTx", null), n([l()], t.prototype, "addProtocolNode", null), n([l()], t.prototype, "signMessage", null), n([l()], t.prototype, "eciesEncryptData", null), n([l()], t.prototype, "eciesDecryptData", null), n([l()], t.prototype, "ecdhEncryptData", null), n([l()], t.prototype, "ecdhDecryptData", null), n([l()], t.prototype, "payToAddress", null), t;
            }();

            e.DotWalletForMetaID = d;
          },
          134: (t, e) => {

            var r;
            Object.defineProperty(e, "__esModule", {
              value: !0
            }), e.ENV = void 0, (r = e.ENV || (e.ENV = {})).Test = "test", r.Production = "production", r.Staging = "staging";
          },
          83: function (t, e, r) {

            var n = this && this.__awaiter || function (t, e, r, n) {
              return new (r || (r = Promise))(function (o, a) {
                function i(t) {
                  try {
                    u(n.next(t));
                  } catch (t) {
                    a(t);
                  }
                }

                function s(t) {
                  try {
                    u(n.throw(t));
                  } catch (t) {
                    a(t);
                  }
                }

                function u(t) {
                  var e;
                  t.done ? o(t.value) : (e = t.value, e instanceof r ? e : new r(function (t) {
                    t(e);
                  })).then(i, s);
                }

                u((n = n.apply(t, e || [])).next());
              });
            },
                o = this && this.__generator || function (t, e) {
              var r,
                  n,
                  o,
                  a,
                  i = {
                label: 0,
                sent: function () {
                  if (1 & o[0]) throw o[1];
                  return o[1];
                },
                trys: [],
                ops: []
              };
              return a = {
                next: s(0),
                throw: s(1),
                return: s(2)
              }, "function" == typeof Symbol && (a[Symbol.iterator] = function () {
                return this;
              }), a;

              function s(a) {
                return function (s) {
                  return function (a) {
                    if (r) throw new TypeError("Generator is already executing.");

                    for (; i;) try {
                      if (r = 1, n && (o = 2 & a[0] ? n.return : a[0] ? n.throw || ((o = n.return) && o.call(n), 0) : n.next) && !(o = o.call(n, a[1])).done) return o;

                      switch (n = 0, o && (a = [2 & a[0], o.value]), a[0]) {
                        case 0:
                        case 1:
                          o = a;
                          break;

                        case 4:
                          return i.label++, {
                            value: a[1],
                            done: !1
                          };

                        case 5:
                          i.label++, n = a[1], a = [0];
                          continue;

                        case 7:
                          a = i.ops.pop(), i.trys.pop();
                          continue;

                        default:
                          if (!((o = (o = i.trys).length > 0 && o[o.length - 1]) || 6 !== a[0] && 2 !== a[0])) {
                            i = 0;
                            continue;
                          }

                          if (3 === a[0] && (!o || a[1] > o[0] && a[1] < o[3])) {
                            i.label = a[1];
                            break;
                          }

                          if (6 === a[0] && i.label < o[1]) {
                            i.label = o[1], o = a;
                            break;
                          }

                          if (o && i.label < o[2]) {
                            i.label = o[2], i.ops.push(a);
                            break;
                          }

                          o[2] && i.ops.pop(), i.trys.pop();
                          continue;
                      }

                      a = e.call(t, i);
                    } catch (t) {
                      a = [6, t], n = 0;
                    } finally {
                      r = o = 0;
                    }

                    if (5 & a[0]) throw a[1];
                    return {
                      value: a[0] ? a[1] : void 0,
                      done: !0
                    };
                  }([a, s]);
                };
              }
            };

            Object.defineProperty(e, "__esModule", {
              value: !0
            }), e.responseIntercepter = e.requestInterceptor = void 0;
            var a = r(669),
                i = r(882),
                s = a.default.create({
              timeout: 2e4
            });
            e.requestInterceptor = function (t) {
              var e = i.default.globalData.get("ACCESS_TOKEN");
              e && (t.headers.Authorization = "Bearer " + e);
              var r = i.default.globalData.get("CLIENT_ID");
              return r && (t.headers["Client-Id"] = r), t;
            }, s.interceptors.request.use(e.requestInterceptor, function (t) {
              return Promise.reject(t);
            }), e.responseIntercepter = function (t) {
              return n(void 0, void 0, void 0, function () {
                var e;
                return o(this, function (r) {
                  return t && 200 == +t.status ? 0 === (null === (e = null == t ? void 0 : t.data) || void 0 === e ? void 0 : e.code) ? [2, Promise.resolve(t)] : [2, Promise.reject(t)] : t && t.status >= 400 ? [2, Promise.reject(t)] : [2, Promise.resolve(t)];
                });
              });
            }, s.interceptors.response.use(e.responseIntercepter, function (t) {
              return Promise.reject(t);
            }), e.default = s;
          },
          882: (t, e) => {

            Object.defineProperty(e, "__esModule", {
              value: !0
            });
            var r = {
              get: function (t) {
                return localStorage.getItem("_dotwallet_jssdk_" + t);
              },
              set: function (t, e) {
                localStorage.setItem("_dotwallet_jssdk_" + t, e);
              }
            };
            e.default = {
              globalData: r
            };
          }
        }, e = {}, function r(n) {
          var o = e[n];
          if (void 0 !== o) return o.exports;
          var a = e[n] = {
            exports: {}
          };
          return t[n].call(a.exports, a, a.exports, r), a.exports;
        }(607);
        var t, e;
      });
    })(dist);

    var DotWallet = /*@__PURE__*/getDefaultExportFromCjs(dist.exports);

    /* eslint complexity: [2, 18], max-statements: [2, 33] */


    var shams = function hasSymbols() {
      if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
        return false;
      }

      if (typeof Symbol.iterator === 'symbol') {
        return true;
      }

      var obj = {};
      var sym = Symbol('test');
      var symObj = Object(sym);

      if (typeof sym === 'string') {
        return false;
      }

      if (Object.prototype.toString.call(sym) !== '[object Symbol]') {
        return false;
      }

      if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {
        return false;
      } // temp disabled per https://github.com/ljharb/object.assign/issues/17
      // if (sym instanceof Symbol) { return false; }
      // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
      // if (!(symObj instanceof Symbol)) { return false; }
      // if (typeof Symbol.prototype.toString !== 'function') { return false; }
      // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }


      var symVal = 42;
      obj[sym] = symVal;

      for (sym in obj) {
        return false;
      } // eslint-disable-line no-restricted-syntax, no-unreachable-loop


      if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
        return false;
      }

      if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }

      var syms = Object.getOwnPropertySymbols(obj);

      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }

      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }

      if (typeof Object.getOwnPropertyDescriptor === 'function') {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);

        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }

      return true;
    };

    var origSymbol = typeof Symbol !== 'undefined' && Symbol;
    var hasSymbolSham = shams;

    var hasSymbols$1 = function hasNativeSymbols() {
      if (typeof origSymbol !== 'function') {
        return false;
      }

      if (typeof Symbol !== 'function') {
        return false;
      }

      if (typeof origSymbol('foo') !== 'symbol') {
        return false;
      }

      if (typeof Symbol('bar') !== 'symbol') {
        return false;
      }

      return hasSymbolSham();
    };

    /* eslint no-invalid-this: 1 */


    var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
    var slice = Array.prototype.slice;
    var toStr$1 = Object.prototype.toString;
    var funcType = '[object Function]';

    var implementation$1 = function bind(that) {
      var target = this;

      if (typeof target !== 'function' || toStr$1.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }

      var args = slice.call(arguments, 1);
      var bound;

      var binder = function () {
        if (this instanceof bound) {
          var result = target.apply(this, args.concat(slice.call(arguments)));

          if (Object(result) === result) {
            return result;
          }

          return this;
        } else {
          return target.apply(that, args.concat(slice.call(arguments)));
        }
      };

      var boundLength = Math.max(0, target.length - args.length);
      var boundArgs = [];

      for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
      }

      bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

      if (target.prototype) {
        var Empty = function Empty() {};

        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }

      return bound;
    };

    var implementation = implementation$1;
    var functionBind = Function.prototype.bind || implementation;

    var bind$4 = functionBind;
    var src$1 = bind$4.call(Function.call, Object.prototype.hasOwnProperty);

    var undefined$1;
    var $SyntaxError = SyntaxError;
    var $Function = Function;
    var $TypeError$1 = TypeError; // eslint-disable-next-line consistent-return

    var getEvalledConstructor = function (expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
      } catch (e) {}
    };

    var $gOPD = Object.getOwnPropertyDescriptor;

    if ($gOPD) {
      try {
        $gOPD({}, '');
      } catch (e) {
        $gOPD = null; // this is IE 8, which has a broken gOPD
      }
    }

    var throwTypeError = function () {
      throw new $TypeError$1();
    };

    var ThrowTypeError = $gOPD ? function () {
      try {
        // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
        arguments.callee; // IE 8 does not throw here

        return throwTypeError;
      } catch (calleeThrows) {
        try {
          // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
          return $gOPD(arguments, 'callee').get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = hasSymbols$1();

    var getProto = Object.getPrototypeOf || function (x) {
      return x.__proto__;
    }; // eslint-disable-line no-proto


    var needsEval = {};
    var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto(Uint8Array);
    var INTRINSICS = {
      '%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
      '%Array%': Array,
      '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
      '%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined$1,
      '%AsyncFromSyncIteratorPrototype%': undefined$1,
      '%AsyncFunction%': needsEval,
      '%AsyncGenerator%': needsEval,
      '%AsyncGeneratorFunction%': needsEval,
      '%AsyncIteratorPrototype%': needsEval,
      '%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
      '%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
      '%Boolean%': Boolean,
      '%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
      '%Date%': Date,
      '%decodeURI%': decodeURI,
      '%decodeURIComponent%': decodeURIComponent,
      '%encodeURI%': encodeURI,
      '%encodeURIComponent%': encodeURIComponent,
      '%Error%': Error,
      '%eval%': eval,
      // eslint-disable-line no-eval
      '%EvalError%': EvalError,
      '%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
      '%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
      '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
      '%Function%': $Function,
      '%GeneratorFunction%': needsEval,
      '%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
      '%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
      '%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
      '%isFinite%': isFinite,
      '%isNaN%': isNaN,
      '%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
      '%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
      '%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
      '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
      '%Math%': Math,
      '%Number%': Number,
      '%Object%': Object,
      '%parseFloat%': parseFloat,
      '%parseInt%': parseInt,
      '%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
      '%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
      '%RangeError%': RangeError,
      '%ReferenceError%': ReferenceError,
      '%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
      '%RegExp%': RegExp,
      '%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
      '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
      '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
      '%String%': String,
      '%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined$1,
      '%Symbol%': hasSymbols ? Symbol : undefined$1,
      '%SyntaxError%': $SyntaxError,
      '%ThrowTypeError%': ThrowTypeError,
      '%TypedArray%': TypedArray,
      '%TypeError%': $TypeError$1,
      '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
      '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
      '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
      '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
      '%URIError%': URIError,
      '%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
      '%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
      '%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
    };

    var doEval = function doEval(name) {
      var value;

      if (name === '%AsyncFunction%') {
        value = getEvalledConstructor('async function () {}');
      } else if (name === '%GeneratorFunction%') {
        value = getEvalledConstructor('function* () {}');
      } else if (name === '%AsyncGeneratorFunction%') {
        value = getEvalledConstructor('async function* () {}');
      } else if (name === '%AsyncGenerator%') {
        var fn = doEval('%AsyncGeneratorFunction%');

        if (fn) {
          value = fn.prototype;
        }
      } else if (name === '%AsyncIteratorPrototype%') {
        var gen = doEval('%AsyncGenerator%');

        if (gen) {
          value = getProto(gen.prototype);
        }
      }

      INTRINSICS[name] = value;
      return value;
    };

    var LEGACY_ALIASES = {
      '%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
      '%ArrayPrototype%': ['Array', 'prototype'],
      '%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
      '%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
      '%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
      '%ArrayProto_values%': ['Array', 'prototype', 'values'],
      '%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
      '%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
      '%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
      '%BooleanPrototype%': ['Boolean', 'prototype'],
      '%DataViewPrototype%': ['DataView', 'prototype'],
      '%DatePrototype%': ['Date', 'prototype'],
      '%ErrorPrototype%': ['Error', 'prototype'],
      '%EvalErrorPrototype%': ['EvalError', 'prototype'],
      '%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
      '%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
      '%FunctionPrototype%': ['Function', 'prototype'],
      '%Generator%': ['GeneratorFunction', 'prototype'],
      '%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
      '%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
      '%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
      '%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
      '%JSONParse%': ['JSON', 'parse'],
      '%JSONStringify%': ['JSON', 'stringify'],
      '%MapPrototype%': ['Map', 'prototype'],
      '%NumberPrototype%': ['Number', 'prototype'],
      '%ObjectPrototype%': ['Object', 'prototype'],
      '%ObjProto_toString%': ['Object', 'prototype', 'toString'],
      '%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
      '%PromisePrototype%': ['Promise', 'prototype'],
      '%PromiseProto_then%': ['Promise', 'prototype', 'then'],
      '%Promise_all%': ['Promise', 'all'],
      '%Promise_reject%': ['Promise', 'reject'],
      '%Promise_resolve%': ['Promise', 'resolve'],
      '%RangeErrorPrototype%': ['RangeError', 'prototype'],
      '%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
      '%RegExpPrototype%': ['RegExp', 'prototype'],
      '%SetPrototype%': ['Set', 'prototype'],
      '%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
      '%StringPrototype%': ['String', 'prototype'],
      '%SymbolPrototype%': ['Symbol', 'prototype'],
      '%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
      '%TypedArrayPrototype%': ['TypedArray', 'prototype'],
      '%TypeErrorPrototype%': ['TypeError', 'prototype'],
      '%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
      '%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
      '%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
      '%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
      '%URIErrorPrototype%': ['URIError', 'prototype'],
      '%WeakMapPrototype%': ['WeakMap', 'prototype'],
      '%WeakSetPrototype%': ['WeakSet', 'prototype']
    };
    var bind$3 = functionBind;
    var hasOwn$1 = src$1;
    var $concat = bind$3.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind$3.call(Function.apply, Array.prototype.splice);
    var $replace = bind$3.call(Function.call, String.prototype.replace);
    var $strSlice = bind$3.call(Function.call, String.prototype.slice);
    /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */

    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    /** Used to match backslashes in property paths. */

    var stringToPath = function stringToPath(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);

      if (first === '%' && last !== '%') {
        throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
      } else if (last === '%' && first !== '%') {
        throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
      }

      var result = [];
      $replace(string, rePropName, function (match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
      });
      return result;
    };
    /* end adaptation */


    var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
      var intrinsicName = name;
      var alias;

      if (hasOwn$1(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = '%' + alias[0] + '%';
      }

      if (hasOwn$1(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];

        if (value === needsEval) {
          value = doEval(intrinsicName);
        }

        if (typeof value === 'undefined' && !allowMissing) {
          throw new $TypeError$1('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
        }

        return {
          alias: alias,
          name: intrinsicName,
          value: value
        };
      }

      throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
    };

    var getIntrinsic = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== 'string' || name.length === 0) {
        throw new $TypeError$1('intrinsic name must be a non-empty string');
      }

      if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
        throw new $TypeError$1('"allowMissing" argument must be a boolean');
      }

      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
      var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;

      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }

      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);

        if ((first === '"' || first === "'" || first === '`' || last === '"' || last === "'" || last === '`') && first !== last) {
          throw new $SyntaxError('property names with quotes must have matching quotes');
        }

        if (part === 'constructor' || !isOwn) {
          skipFurtherCaching = true;
        }

        intrinsicBaseName += '.' + part;
        intrinsicRealName = '%' + intrinsicBaseName + '%';

        if (hasOwn$1(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError$1('base intrinsic for ' + name + ' exists, but the property is not available.');
            }

            return void undefined$1;
          }

          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc; // By convention, when a data property is converted to an accessor
            // property to emulate a data property that does not suffer from
            // the override mistake, that accessor's getter is marked with
            // an `originalValue` property. Here, when we detect this, we
            // uphold the illusion by pretending to see that original data
            // property, i.e., returning the value rather than the getter
            // itself.

            if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn$1(value, part);
            value = value[part];
          }

          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }

      return value;
    };

    var callBind$1 = {exports: {}};

    (function (module) {

      var bind = functionBind;
      var GetIntrinsic = getIntrinsic;
      var $apply = GetIntrinsic('%Function.prototype.apply%');
      var $call = GetIntrinsic('%Function.prototype.call%');
      var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);
      var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
      var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
      var $max = GetIntrinsic('%Math.max%');

      if ($defineProperty) {
        try {
          $defineProperty({}, 'a', {
            value: 1
          });
        } catch (e) {
          // IE 8 has a broken defineProperty
          $defineProperty = null;
        }
      }

      module.exports = function callBind(originalFunction) {
        var func = $reflectApply(bind, $call, arguments);

        if ($gOPD && $defineProperty) {
          var desc = $gOPD(func, 'length');

          if (desc.configurable) {
            // original length, plus the receiver, minus any additional arguments (after the receiver)
            $defineProperty(func, 'length', {
              value: 1 + $max(0, originalFunction.length - (arguments.length - 1))
            });
          }
        }

        return func;
      };

      var applyBind = function applyBind() {
        return $reflectApply(bind, $apply, arguments);
      };

      if ($defineProperty) {
        $defineProperty(module.exports, 'apply', {
          value: applyBind
        });
      } else {
        module.exports.apply = applyBind;
      }
    })(callBind$1);

    var GetIntrinsic$1 = getIntrinsic;
    var callBind = callBind$1.exports;
    var $indexOf = callBind(GetIntrinsic$1('String.prototype.indexOf'));

    var callBound$1 = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic$1(name, !!allowMissing);

      if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
        return callBind(intrinsic);
      }

      return intrinsic;
    };

    var util_inspect = require$$0__default['default'].inspect;

    var hasMap = typeof Map === 'function' && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === 'function' && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var match = String.prototype.match;
    var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype // eslint-disable-line no-proto
    ? function (O) {
      return O.__proto__; // eslint-disable-line no-proto
    } : null);
    var inspectCustom = util_inspect.custom;
    var inspectSymbol = inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;
    var toStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag !== 'undefined' ? Symbol.toStringTag : null;

    var objectInspect = function inspect_(obj, options, depth, seen) {
      var opts = options || {};

      if (has$3(opts, 'quoteStyle') && opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double') {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }

      if (has$3(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number' ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }

      var customInspect = has$3(opts, 'customInspect') ? opts.customInspect : true;

      if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
        throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
      }

      if (has$3(opts, 'indent') && opts.indent !== null && opts.indent !== '\t' && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
        throw new TypeError('options "indent" must be "\\t", an integer > 0, or `null`');
      }

      if (typeof obj === 'undefined') {
        return 'undefined';
      }

      if (obj === null) {
        return 'null';
      }

      if (typeof obj === 'boolean') {
        return obj ? 'true' : 'false';
      }

      if (typeof obj === 'string') {
        return inspectString(obj, opts);
      }

      if (typeof obj === 'number') {
        if (obj === 0) {
          return Infinity / obj > 0 ? '0' : '-0';
        }

        return String(obj);
      }

      if (typeof obj === 'bigint') {
        return String(obj) + 'n';
      }

      var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;

      if (typeof depth === 'undefined') {
        depth = 0;
      }

      if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
        return isArray$4(obj) ? '[Array]' : '[Object]';
      }

      var indent = getIndent(opts, depth);

      if (typeof seen === 'undefined') {
        seen = [];
      } else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
      }

      function inspect(value, from, noIndent) {
        if (from) {
          seen = seen.slice();
          seen.push(from);
        }

        if (noIndent) {
          var newOpts = {
            depth: opts.depth
          };

          if (has$3(opts, 'quoteStyle')) {
            newOpts.quoteStyle = opts.quoteStyle;
          }

          return inspect_(value, newOpts, depth + 1, seen);
        }

        return inspect_(value, opts, depth + 1, seen);
      }

      if (typeof obj === 'function') {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + keys.join(', ') + ' }' : '');
      }

      if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? String(obj).replace(/^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
      }

      if (isElement(obj)) {
        var s = '<' + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];

        for (var i = 0; i < attrs.length; i++) {
          s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
        }

        s += '>';

        if (obj.childNodes && obj.childNodes.length) {
          s += '...';
        }

        s += '</' + String(obj.nodeName).toLowerCase() + '>';
        return s;
      }

      if (isArray$4(obj)) {
        if (obj.length === 0) {
          return '[]';
        }

        var xs = arrObjKeys(obj, inspect);

        if (indent && !singleLineValues(xs)) {
          return '[' + indentedJoin(xs, indent) + ']';
        }

        return '[ ' + xs.join(', ') + ' ]';
      }

      if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);

        if (parts.length === 0) {
          return '[' + String(obj) + ']';
        }

        return '{ [' + String(obj) + '] ' + parts.join(', ') + ' }';
      }

      if (typeof obj === 'object' && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === 'function') {
          return obj[inspectSymbol]();
        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
          return obj.inspect();
        }
      }

      if (isMap(obj)) {
        var mapParts = [];
        mapForEach.call(obj, function (value, key) {
          mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
        });
        return collectionOf('Map', mapSize.call(obj), mapParts, indent);
      }

      if (isSet(obj)) {
        var setParts = [];
        setForEach.call(obj, function (value) {
          setParts.push(inspect(value, obj));
        });
        return collectionOf('Set', setSize.call(obj), setParts, indent);
      }

      if (isWeakMap(obj)) {
        return weakCollectionOf('WeakMap');
      }

      if (isWeakSet(obj)) {
        return weakCollectionOf('WeakSet');
      }

      if (isWeakRef(obj)) {
        return weakCollectionOf('WeakRef');
      }

      if (isNumber$1(obj)) {
        return markBoxed(inspect(Number(obj)));
      }

      if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
      }

      if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }

      if (isString$1(obj)) {
        return markBoxed(inspect(String(obj)));
      }

      if (!isDate$1(obj) && !isRegExp$1(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? '' : 'null prototype';
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? toStr(obj).slice(8, -1) : protoTag ? 'Object' : '';
        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
        var tag = constructorTag + (stringTag || protoTag ? '[' + [].concat(stringTag || [], protoTag || []).join(': ') + '] ' : '');

        if (ys.length === 0) {
          return tag + '{}';
        }

        if (indent) {
          return tag + '{' + indentedJoin(ys, indent) + '}';
        }

        return tag + '{ ' + ys.join(', ') + ' }';
      }

      return String(obj);
    };

    function wrapQuotes(s, defaultStyle, opts) {
      var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
      return quoteChar + s + quoteChar;
    }

    function quote(s) {
      return String(s).replace(/"/g, '&quot;');
    }

    function isArray$4(obj) {
      return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
    }

    function isDate$1(obj) {
      return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
    }

    function isRegExp$1(obj) {
      return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
    }

    function isError(obj) {
      return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
    }

    function isString$1(obj) {
      return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
    }

    function isNumber$1(obj) {
      return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
    }

    function isBoolean(obj) {
      return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj));
    } // Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives


    function isSymbol(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === 'object' && obj instanceof Symbol;
      }

      if (typeof obj === 'symbol') {
        return true;
      }

      if (!obj || typeof obj !== 'object' || !symToString) {
        return false;
      }

      try {
        symToString.call(obj);
        return true;
      } catch (e) {}

      return false;
    }

    function isBigInt(obj) {
      if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
        return false;
      }

      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e) {}

      return false;
    }

    var hasOwn = Object.prototype.hasOwnProperty || function (key) {
      return key in this;
    };

    function has$3(obj, key) {
      return hasOwn.call(obj, key);
    }

    function toStr(obj) {
      return objectToString.call(obj);
    }

    function nameOf(f) {
      if (f.name) {
        return f.name;
      }

      var m = match.call(functionToString.call(f), /^function\s*([\w$]+)/);

      if (m) {
        return m[1];
      }

      return null;
    }

    function indexOf(xs, x) {
      if (xs.indexOf) {
        return xs.indexOf(x);
      }

      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) {
          return i;
        }
      }

      return -1;
    }

    function isMap(x) {
      if (!mapSize || !x || typeof x !== 'object') {
        return false;
      }

      try {
        mapSize.call(x);

        try {
          setSize.call(x);
        } catch (s) {
          return true;
        }

        return x instanceof Map; // core-js workaround, pre-v2.5.0
      } catch (e) {}

      return false;
    }

    function isWeakMap(x) {
      if (!weakMapHas || !x || typeof x !== 'object') {
        return false;
      }

      try {
        weakMapHas.call(x, weakMapHas);

        try {
          weakSetHas.call(x, weakSetHas);
        } catch (s) {
          return true;
        }

        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
      } catch (e) {}

      return false;
    }

    function isWeakRef(x) {
      if (!weakRefDeref || !x || typeof x !== 'object') {
        return false;
      }

      try {
        weakRefDeref.call(x);
        return true;
      } catch (e) {}

      return false;
    }

    function isSet(x) {
      if (!setSize || !x || typeof x !== 'object') {
        return false;
      }

      try {
        setSize.call(x);

        try {
          mapSize.call(x);
        } catch (m) {
          return true;
        }

        return x instanceof Set; // core-js workaround, pre-v2.5.0
      } catch (e) {}

      return false;
    }

    function isWeakSet(x) {
      if (!weakSetHas || !x || typeof x !== 'object') {
        return false;
      }

      try {
        weakSetHas.call(x, weakSetHas);

        try {
          weakMapHas.call(x, weakMapHas);
        } catch (s) {
          return true;
        }

        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
      } catch (e) {}

      return false;
    }

    function isElement(x) {
      if (!x || typeof x !== 'object') {
        return false;
      }

      if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
      }

      return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
    }

    function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
        return inspectString(str.slice(0, opts.maxStringLength), opts) + trailer;
      } // eslint-disable-next-line no-control-regex


      var s = str.replace(/(['\\])/g, '\\$1').replace(/[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s, 'single', opts);
    }

    function lowbyte(c) {
      var n = c.charCodeAt(0);
      var x = {
        8: 'b',
        9: 't',
        10: 'n',
        12: 'f',
        13: 'r'
      }[n];

      if (x) {
        return '\\' + x;
      }

      return '\\x' + (n < 0x10 ? '0' : '') + n.toString(16).toUpperCase();
    }

    function markBoxed(str) {
      return 'Object(' + str + ')';
    }

    function weakCollectionOf(type) {
      return type + ' { ? }';
    }

    function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : entries.join(', ');
      return type + ' (' + size + ') {' + joinedEntries + '}';
    }

    function singleLineValues(xs) {
      for (var i = 0; i < xs.length; i++) {
        if (indexOf(xs[i], '\n') >= 0) {
          return false;
        }
      }

      return true;
    }

    function getIndent(opts, depth) {
      var baseIndent;

      if (opts.indent === '\t') {
        baseIndent = '\t';
      } else if (typeof opts.indent === 'number' && opts.indent > 0) {
        baseIndent = Array(opts.indent + 1).join(' ');
      } else {
        return null;
      }

      return {
        base: baseIndent,
        prev: Array(depth + 1).join(baseIndent)
      };
    }

    function indentedJoin(xs, indent) {
      if (xs.length === 0) {
        return '';
      }

      var lineJoiner = '\n' + indent.prev + indent.base;
      return lineJoiner + xs.join(',' + lineJoiner) + '\n' + indent.prev;
    }

    function arrObjKeys(obj, inspect) {
      var isArr = isArray$4(obj);
      var xs = [];

      if (isArr) {
        xs.length = obj.length;

        for (var i = 0; i < obj.length; i++) {
          xs[i] = has$3(obj, i) ? inspect(obj[i], obj) : '';
        }
      }

      var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
      var symMap;

      if (hasShammedSymbols) {
        symMap = {};

        for (var k = 0; k < syms.length; k++) {
          symMap['$' + syms[k]] = syms[k];
        }
      }

      for (var key in obj) {
        // eslint-disable-line no-restricted-syntax
        if (!has$3(obj, key)) {
          continue;
        } // eslint-disable-line no-restricted-syntax, no-continue


        if (isArr && String(Number(key)) === key && key < obj.length) {
          continue;
        } // eslint-disable-line no-restricted-syntax, no-continue


        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
          // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
          continue; // eslint-disable-line no-restricted-syntax, no-continue
        } else if (/[^\w$]/.test(key)) {
          xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
        } else {
          xs.push(key + ': ' + inspect(obj[key], obj));
        }
      }

      if (typeof gOPS === 'function') {
        for (var j = 0; j < syms.length; j++) {
          if (isEnumerable.call(obj, syms[j])) {
            xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
          }
        }
      }

      return xs;
    }

    var GetIntrinsic = getIntrinsic;
    var callBound = callBound$1;
    var inspect = objectInspect;
    var $TypeError = GetIntrinsic('%TypeError%');
    var $WeakMap = GetIntrinsic('%WeakMap%', true);
    var $Map = GetIntrinsic('%Map%', true);
    var $weakMapGet = callBound('WeakMap.prototype.get', true);
    var $weakMapSet = callBound('WeakMap.prototype.set', true);
    var $weakMapHas = callBound('WeakMap.prototype.has', true);
    var $mapGet = callBound('Map.prototype.get', true);
    var $mapSet = callBound('Map.prototype.set', true);
    var $mapHas = callBound('Map.prototype.has', true);
    /*
     * This function traverses the list returning the node corresponding to the
     * given key.
     *
     * That node is also moved to the head of the list, so that if it's accessed
     * again we don't need to traverse the whole list. By doing so, all the recently
     * used nodes can be accessed relatively quickly.
     */

    var listGetNode = function (list, key) {
      // eslint-disable-line consistent-return
      for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
        if (curr.key === key) {
          prev.next = curr.next;
          curr.next = list.next;
          list.next = curr; // eslint-disable-line no-param-reassign

          return curr;
        }
      }
    };

    var listGet = function (objects, key) {
      var node = listGetNode(objects, key);
      return node && node.value;
    };

    var listSet = function (objects, key, value) {
      var node = listGetNode(objects, key);

      if (node) {
        node.value = value;
      } else {
        // Prepend the new node to the beginning of the list
        objects.next = {
          // eslint-disable-line no-param-reassign
          key: key,
          next: objects.next,
          value: value
        };
      }
    };

    var listHas = function (objects, key) {
      return !!listGetNode(objects, key);
    };

    var sideChannel = function getSideChannel() {
      var $wm;
      var $m;
      var $o;
      var channel = {
        assert: function (key) {
          if (!channel.has(key)) {
            throw new $TypeError('Side channel does not contain ' + inspect(key));
          }
        },
        get: function (key) {
          // eslint-disable-line consistent-return
          if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
            if ($wm) {
              return $weakMapGet($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapGet($m, key);
            }
          } else {
            if ($o) {
              // eslint-disable-line no-lonely-if
              return listGet($o, key);
            }
          }
        },
        has: function (key) {
          if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
            if ($wm) {
              return $weakMapHas($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapHas($m, key);
            }
          } else {
            if ($o) {
              // eslint-disable-line no-lonely-if
              return listHas($o, key);
            }
          }

          return false;
        },
        set: function (key, value) {
          if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
            if (!$wm) {
              $wm = new $WeakMap();
            }

            $weakMapSet($wm, key, value);
          } else if ($Map) {
            if (!$m) {
              $m = new $Map();
            }

            $mapSet($m, key, value);
          } else {
            if (!$o) {
              /*
               * Initialize the linked list as an empty node, so that we don't have
               * to special-case handling of the first node: we can always refer to
               * it as (previous node).next, instead of something like (list).head
               */
              $o = {
                key: {},
                next: null
              };
            }

            listSet($o, key, value);
          }
        }
      };
      return channel;
    };

    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: 'RFC1738',
      RFC3986: 'RFC3986'
    };
    var formats$3 = {
      'default': Format.RFC3986,
      formatters: {
        RFC1738: function (value) {
          return replace.call(value, percentTwenties, '+');
        },
        RFC3986: function (value) {
          return String(value);
        }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
    };

    var formats$2 = formats$3;
    var has$2 = Object.prototype.hasOwnProperty;
    var isArray$3 = Array.isArray;

    var hexTable = function () {
      var array = [];

      for (var i = 0; i < 256; ++i) {
        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
      }

      return array;
    }();

    var compactQueue = function compactQueue(queue) {
      while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];

        if (isArray$3(obj)) {
          var compacted = [];

          for (var j = 0; j < obj.length; ++j) {
            if (typeof obj[j] !== 'undefined') {
              compacted.push(obj[j]);
            }
          }

          item.obj[item.prop] = compacted;
        }
      }
    };

    var arrayToObject = function arrayToObject(source, options) {
      var obj = options && options.plainObjects ? Object.create(null) : {};

      for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== 'undefined') {
          obj[i] = source[i];
        }
      }

      return obj;
    };

    var merge$1 = function merge(target, source, options) {
      /* eslint no-param-reassign: 0 */
      if (!source) {
        return target;
      }

      if (typeof source !== 'object') {
        if (isArray$3(target)) {
          target.push(source);
        } else if (target && typeof target === 'object') {
          if (options && (options.plainObjects || options.allowPrototypes) || !has$2.call(Object.prototype, source)) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }

        return target;
      }

      if (!target || typeof target !== 'object') {
        return [target].concat(source);
      }

      var mergeTarget = target;

      if (isArray$3(target) && !isArray$3(source)) {
        mergeTarget = arrayToObject(target, options);
      }

      if (isArray$3(target) && isArray$3(source)) {
        source.forEach(function (item, i) {
          if (has$2.call(target, i)) {
            var targetItem = target[i];

            if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
              target[i] = merge(targetItem, item, options);
            } else {
              target.push(item);
            }
          } else {
            target[i] = item;
          }
        });
        return target;
      }

      return Object.keys(source).reduce(function (acc, key) {
        var value = source[key];

        if (has$2.call(acc, key)) {
          acc[key] = merge(acc[key], value, options);
        } else {
          acc[key] = value;
        }

        return acc;
      }, mergeTarget);
    };

    var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function (acc, key) {
        acc[key] = source[key];
        return acc;
      }, target);
    };

    var decode = function (str, decoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, ' ');

      if (charset === 'iso-8859-1') {
        // unescape never throws, no try...catch needed:
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      } // utf-8


      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e) {
        return strWithoutPlus;
      }
    };

    var encode$1 = function encode(str, defaultEncoder, charset, kind, format) {
      // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
      // It has been adapted here for stricter adherence to RFC 3986
      if (str.length === 0) {
        return str;
      }

      var string = str;

      if (typeof str === 'symbol') {
        string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== 'string') {
        string = String(str);
      }

      if (charset === 'iso-8859-1') {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
          return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
        });
      }

      var out = '';

      for (var i = 0; i < string.length; ++i) {
        var c = string.charCodeAt(i);

        if (c === 0x2D // -
        || c === 0x2E // .
        || c === 0x5F // _
        || c === 0x7E // ~
        || c >= 0x30 && c <= 0x39 // 0-9
        || c >= 0x41 && c <= 0x5A // a-z
        || c >= 0x61 && c <= 0x7A // A-Z
        || format === formats$2.RFC1738 && (c === 0x28 || c === 0x29) // ( )
        ) {
          out += string.charAt(i);
          continue;
        }

        if (c < 0x80) {
          out = out + hexTable[c];
          continue;
        }

        if (c < 0x800) {
          out = out + (hexTable[0xC0 | c >> 6] + hexTable[0x80 | c & 0x3F]);
          continue;
        }

        if (c < 0xD800 || c >= 0xE000) {
          out = out + (hexTable[0xE0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F]);
          continue;
        }

        i += 1;
        c = 0x10000 + ((c & 0x3FF) << 10 | string.charCodeAt(i) & 0x3FF);
        out += hexTable[0xF0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3F] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];
      }

      return out;
    };

    var compact = function compact(value) {
      var queue = [{
        obj: {
          o: value
        },
        prop: 'o'
      }];
      var refs = [];

      for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);

        for (var j = 0; j < keys.length; ++j) {
          var key = keys[j];
          var val = obj[key];

          if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
            queue.push({
              obj: obj,
              prop: key
            });
            refs.push(val);
          }
        }
      }

      compactQueue(queue);
      return value;
    };

    var isRegExp = function isRegExp(obj) {
      return Object.prototype.toString.call(obj) === '[object RegExp]';
    };

    var isBuffer$1 = function isBuffer(obj) {
      if (!obj || typeof obj !== 'object') {
        return false;
      }

      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };

    var combine = function combine(a, b) {
      return [].concat(a, b);
    };

    var maybeMap = function maybeMap(val, fn) {
      if (isArray$3(val)) {
        var mapped = [];

        for (var i = 0; i < val.length; i += 1) {
          mapped.push(fn(val[i]));
        }

        return mapped;
      }

      return fn(val);
    };

    var utils$h = {
      arrayToObject: arrayToObject,
      assign: assign,
      combine: combine,
      compact: compact,
      decode: decode,
      encode: encode$1,
      isBuffer: isBuffer$1,
      isRegExp: isRegExp,
      maybeMap: maybeMap,
      merge: merge$1
    };

    var getSideChannel = sideChannel;
    var utils$g = utils$h;
    var formats$1 = formats$3;
    var has$1 = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + '[]';
      },
      comma: 'comma',
      indices: function indices(prefix, key) {
        return prefix + '[' + key + ']';
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var isArray$2 = Array.isArray;
    var push = Array.prototype.push;

    var pushToArray = function (arr, valueOrArray) {
      push.apply(arr, isArray$2(valueOrArray) ? valueOrArray : [valueOrArray]);
    };

    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats$1['default'];
    var defaults$4 = {
      addQueryPrefix: false,
      allowDots: false,
      charset: 'utf-8',
      charsetSentinel: false,
      delimiter: '&',
      encode: true,
      encoder: utils$g.encode,
      encodeValuesOnly: false,
      format: defaultFormat,
      formatter: formats$1.formatters[defaultFormat],
      // deprecated
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };

    var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
      return typeof v === 'string' || typeof v === 'number' || typeof v === 'boolean' || typeof v === 'symbol' || typeof v === 'bigint';
    };

    var stringify$1 = function stringify(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
      var obj = object;

      if (sideChannel.has(object)) {
        throw new RangeError('Cyclic object value');
      }

      if (typeof filter === 'function') {
        obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === 'comma' && isArray$2(obj)) {
        obj = utils$g.maybeMap(obj, function (value) {
          if (value instanceof Date) {
            return serializeDate(value);
          }

          return value;
        });
      }

      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults$4.encoder, charset, 'key', format) : prefix;
        }

        obj = '';
      }

      if (isNonNullishPrimitive(obj) || utils$g.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults$4.encoder, charset, 'key', format);
          return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults$4.encoder, charset, 'value', format))];
        }

        return [formatter(prefix) + '=' + formatter(String(obj))];
      }

      var values = [];

      if (typeof obj === 'undefined') {
        return values;
      }

      var objKeys;

      if (generateArrayPrefix === 'comma' && isArray$2(obj)) {
        // we need to join elements in
        objKeys = [{
          value: obj.length > 0 ? obj.join(',') || null : undefined
        }];
      } else if (isArray$2(filter)) {
        objKeys = filter;
      } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
      }

      for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];
        var value = typeof key === 'object' && key.value !== undefined ? key.value : obj[key];

        if (skipNulls && value === null) {
          continue;
        }

        var keyPrefix = isArray$2(obj) ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(prefix, key) : prefix : prefix + (allowDots ? '.' + key : '[' + key + ']');
        sideChannel.set(object, true);
        var valueSideChannel = getSideChannel();
        pushToArray(values, stringify(value, keyPrefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));
      }

      return values;
    };

    var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
      if (!opts) {
        return defaults$4;
      }

      if (opts.encoder !== null && opts.encoder !== undefined && typeof opts.encoder !== 'function') {
        throw new TypeError('Encoder has to be a function.');
      }

      var charset = opts.charset || defaults$4.charset;

      if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
      }

      var format = formats$1['default'];

      if (typeof opts.format !== 'undefined') {
        if (!has$1.call(formats$1.formatters, opts.format)) {
          throw new TypeError('Unknown format option provided.');
        }

        format = opts.format;
      }

      var formatter = formats$1.formatters[format];
      var filter = defaults$4.filter;

      if (typeof opts.filter === 'function' || isArray$2(opts.filter)) {
        filter = opts.filter;
      }

      return {
        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults$4.addQueryPrefix,
        allowDots: typeof opts.allowDots === 'undefined' ? defaults$4.allowDots : !!opts.allowDots,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults$4.charsetSentinel,
        delimiter: typeof opts.delimiter === 'undefined' ? defaults$4.delimiter : opts.delimiter,
        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults$4.encode,
        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults$4.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults$4.encodeValuesOnly,
        filter: filter,
        format: format,
        formatter: formatter,
        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults$4.serializeDate,
        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults$4.skipNulls,
        sort: typeof opts.sort === 'function' ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults$4.strictNullHandling
      };
    };

    var stringify_1 = function (object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);
      var objKeys;
      var filter;

      if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
      } else if (isArray$2(options.filter)) {
        filter = options.filter;
        objKeys = filter;
      }

      var keys = [];

      if (typeof obj !== 'object' || obj === null) {
        return '';
      }

      var arrayFormat;

      if (opts && opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if (opts && 'indices' in opts) {
        arrayFormat = opts.indices ? 'indices' : 'repeat';
      } else {
        arrayFormat = 'indices';
      }

      var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

      if (!objKeys) {
        objKeys = Object.keys(obj);
      }

      if (options.sort) {
        objKeys.sort(options.sort);
      }

      var sideChannel = getSideChannel();

      for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (options.skipNulls && obj[key] === null) {
          continue;
        }

        pushToArray(keys, stringify$1(obj[key], key, generateArrayPrefix, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));
      }

      var joined = keys.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? '?' : '';

      if (options.charsetSentinel) {
        if (options.charset === 'iso-8859-1') {
          // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
          prefix += 'utf8=%26%2310003%3B&';
        } else {
          // encodeURIComponent('✓')
          prefix += 'utf8=%E2%9C%93&';
        }
      }

      return joined.length > 0 ? prefix + joined : '';
    };

    var utils$f = utils$h;
    var has = Object.prototype.hasOwnProperty;
    var isArray$1 = Array.isArray;
    var defaults$3 = {
      allowDots: false,
      allowPrototypes: false,
      allowSparse: false,
      arrayLimit: 20,
      charset: 'utf-8',
      charsetSentinel: false,
      comma: false,
      decoder: utils$f.decode,
      delimiter: '&',
      depth: 5,
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1000,
      parseArrays: true,
      plainObjects: false,
      strictNullHandling: false
    };

    var interpretNumericEntities = function (str) {
      return str.replace(/&#(\d+);/g, function ($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };

    var parseArrayValue = function (val, options) {
      if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {
        return val.split(',');
      }

      return val;
    }; // This is what browsers will submit when the ✓ character occurs in an
    // application/x-www-form-urlencoded body and the encoding of the page containing
    // the form is iso-8859-1, or when the submitted form has an accept-charset
    // attribute of iso-8859-1. Presumably also with other charsets that do not contain
    // the ✓ character, such as us-ascii.


    var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')
    // These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.

    var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

    var parseValues = function parseQueryStringValues(str, options) {
      var obj = {};
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
      var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);
      var skipIndex = -1; // Keep track of where the utf8 sentinel was found

      var i;
      var charset = options.charset;

      if (options.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
          if (parts[i].indexOf('utf8=') === 0) {
            if (parts[i] === charsetSentinel) {
              charset = 'utf-8';
            } else if (parts[i] === isoSentinel) {
              charset = 'iso-8859-1';
            }

            skipIndex = i;
            i = parts.length; // The eslint settings do not allow break;
          }
        }
      }

      for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
          continue;
        }

        var part = parts[i];
        var bracketEqualsPos = part.indexOf(']=');
        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;
        var key, val;

        if (pos === -1) {
          key = options.decoder(part, defaults$3.decoder, charset, 'key');
          val = options.strictNullHandling ? null : '';
        } else {
          key = options.decoder(part.slice(0, pos), defaults$3.decoder, charset, 'key');
          val = utils$f.maybeMap(parseArrayValue(part.slice(pos + 1), options), function (encodedVal) {
            return options.decoder(encodedVal, defaults$3.decoder, charset, 'value');
          });
        }

        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
          val = interpretNumericEntities(val);
        }

        if (part.indexOf('[]=') > -1) {
          val = isArray$1(val) ? [val] : val;
        }

        if (has.call(obj, key)) {
          obj[key] = utils$f.combine(obj[key], val);
        } else {
          obj[key] = val;
        }
      }

      return obj;
    };

    var parseObject = function (chain, val, options, valuesParsed) {
      var leaf = valuesParsed ? val : parseArrayValue(val, options);

      for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];

        if (root === '[]' && options.parseArrays) {
          obj = [].concat(leaf);
        } else {
          obj = options.plainObjects ? Object.create(null) : {};
          var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
          var index = parseInt(cleanRoot, 10);

          if (!options.parseArrays && cleanRoot === '') {
            obj = {
              0: leaf
            };
          } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {
            obj = [];
            obj[index] = leaf;
          } else {
            obj[cleanRoot] = leaf;
          }
        }

        leaf = obj;
      }

      return leaf;
    };

    var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
      if (!givenKey) {
        return;
      } // Transform dot notation to bracket notation


      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey; // The regex chunks

      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g; // Get the parent

      var segment = options.depth > 0 && brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key; // Stash the parent if it exists

      var keys = [];

      if (parent) {
        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
          if (!options.allowPrototypes) {
            return;
          }
        }

        keys.push(parent);
      } // Loop through children appending to the array until we hit depth


      var i = 0;

      while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;

        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options.allowPrototypes) {
            return;
          }
        }

        keys.push(segment[1]);
      } // If there's a remainder, just add whatever is left


      if (segment) {
        keys.push('[' + key.slice(segment.index) + ']');
      }

      return parseObject(keys, val, options, valuesParsed);
    };

    var normalizeParseOptions = function normalizeParseOptions(opts) {
      if (!opts) {
        return defaults$3;
      }

      if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
        throw new TypeError('Decoder has to be a function.');
      }

      if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
      }

      var charset = typeof opts.charset === 'undefined' ? defaults$3.charset : opts.charset;
      return {
        allowDots: typeof opts.allowDots === 'undefined' ? defaults$3.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults$3.allowPrototypes,
        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults$3.allowSparse,
        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults$3.arrayLimit,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults$3.charsetSentinel,
        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults$3.comma,
        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults$3.decoder,
        delimiter: typeof opts.delimiter === 'string' || utils$f.isRegExp(opts.delimiter) ? opts.delimiter : defaults$3.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: typeof opts.depth === 'number' || opts.depth === false ? +opts.depth : defaults$3.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults$3.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults$3.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults$3.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults$3.strictNullHandling
      };
    };

    var parse$2 = function (str, opts) {
      var options = normalizeParseOptions(opts);

      if (str === '' || str === null || typeof str === 'undefined') {
        return options.plainObjects ? Object.create(null) : {};
      }

      var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
      var obj = options.plainObjects ? Object.create(null) : {}; // Iterate over the keys and setup the new object

      var keys = Object.keys(tempObj);

      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');
        obj = utils$f.merge(obj, newObj, options);
      }

      if (options.allowSparse === true) {
        return obj;
      }

      return utils$f.compact(obj);
    };

    var stringify = stringify_1;
    var parse$1 = parse$2;
    var formats = formats$3;
    var lib = {
      formats: formats,
      parse: parse$1,
      stringify: stringify
    };

    var axios$2 = {exports: {}};

    var bind$2 = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);

        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }

        return fn.apply(thisArg, args);
      };
    };

    var bind$1 = bind$2;
    /*global toString:true*/
    // utils is a library of generic helper functions non-specific to axios

    var toString = Object.prototype.toString;
    /**
     * Determine if a value is an Array
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Array, otherwise false
     */

    function isArray(val) {
      return toString.call(val) === '[object Array]';
    }
    /**
     * Determine if a value is undefined
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if the value is undefined, otherwise false
     */


    function isUndefined(val) {
      return typeof val === 'undefined';
    }
    /**
     * Determine if a value is a Buffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Buffer, otherwise false
     */


    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
    }
    /**
     * Determine if a value is an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an ArrayBuffer, otherwise false
     */


    function isArrayBuffer(val) {
      return toString.call(val) === '[object ArrayBuffer]';
    }
    /**
     * Determine if a value is a FormData
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an FormData, otherwise false
     */


    function isFormData(val) {
      return typeof FormData !== 'undefined' && val instanceof FormData;
    }
    /**
     * Determine if a value is a view on an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
     */


    function isArrayBufferView(val) {
      var result;

      if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && val.buffer instanceof ArrayBuffer;
      }

      return result;
    }
    /**
     * Determine if a value is a String
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a String, otherwise false
     */


    function isString(val) {
      return typeof val === 'string';
    }
    /**
     * Determine if a value is a Number
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Number, otherwise false
     */


    function isNumber(val) {
      return typeof val === 'number';
    }
    /**
     * Determine if a value is an Object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Object, otherwise false
     */


    function isObject(val) {
      return val !== null && typeof val === 'object';
    }
    /**
     * Determine if a value is a plain Object
     *
     * @param {Object} val The value to test
     * @return {boolean} True if value is a plain Object, otherwise false
     */


    function isPlainObject(val) {
      if (toString.call(val) !== '[object Object]') {
        return false;
      }

      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    /**
     * Determine if a value is a Date
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Date, otherwise false
     */


    function isDate(val) {
      return toString.call(val) === '[object Date]';
    }
    /**
     * Determine if a value is a File
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a File, otherwise false
     */


    function isFile(val) {
      return toString.call(val) === '[object File]';
    }
    /**
     * Determine if a value is a Blob
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Blob, otherwise false
     */


    function isBlob(val) {
      return toString.call(val) === '[object Blob]';
    }
    /**
     * Determine if a value is a Function
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Function, otherwise false
     */


    function isFunction(val) {
      return toString.call(val) === '[object Function]';
    }
    /**
     * Determine if a value is a Stream
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Stream, otherwise false
     */


    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    /**
     * Determine if a value is a URLSearchParams object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a URLSearchParams object, otherwise false
     */


    function isURLSearchParams(val) {
      return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
    }
    /**
     * Trim excess whitespace off the beginning and end of a string
     *
     * @param {String} str The String to trim
     * @returns {String} The String freed of excess whitespace
     */


    function trim(str) {
      return str.replace(/^\s*/, '').replace(/\s*$/, '');
    }
    /**
     * Determine if we're running in a standard browser environment
     *
     * This allows axios to run in a web worker, and react-native.
     * Both environments support XMLHttpRequest, but not fully standard globals.
     *
     * web workers:
     *  typeof window -> undefined
     *  typeof document -> undefined
     *
     * react-native:
     *  navigator.product -> 'ReactNative'
     * nativescript
     *  navigator.product -> 'NativeScript' or 'NS'
     */


    function isStandardBrowserEnv() {
      if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {
        return false;
      }

      return typeof window !== 'undefined' && typeof document !== 'undefined';
    }
    /**
     * Iterate over an Array or an Object invoking a function for each item.
     *
     * If `obj` is an Array callback will be called passing
     * the value, index, and complete array for each item.
     *
     * If 'obj' is an Object callback will be called passing
     * the value, key, and complete object for each property.
     *
     * @param {Object|Array} obj The object to iterate
     * @param {Function} fn The callback to invoke for each item
     */


    function forEach(obj, fn) {
      // Don't bother if no value provided
      if (obj === null || typeof obj === 'undefined') {
        return;
      } // Force an array if not already something iterable


      if (typeof obj !== 'object') {
        /*eslint no-param-reassign:0*/
        obj = [obj];
      }

      if (isArray(obj)) {
        // Iterate over array values
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        // Iterate over object keys
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    /**
     * Accepts varargs expecting each argument to be an object, then
     * immutably merges the properties of each object and returns result.
     *
     * When multiple objects contain the same key the later object in
     * the arguments list will take precedence.
     *
     * Example:
     *
     * ```js
     * var result = merge({foo: 123}, {foo: 456});
     * console.log(result.foo); // outputs 456
     * ```
     *
     * @param {Object} obj1 Object to merge
     * @returns {Object} Result of all merge properties
     */


    function merge() {
      var result = {};

      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }

      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }

      return result;
    }
    /**
     * Extends object a by mutably adding to it the properties of object b.
     *
     * @param {Object} a The object to be extended
     * @param {Object} b The object to copy properties from
     * @param {Object} thisArg The object to bind function to
     * @return {Object} The resulting value of object a
     */


    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === 'function') {
          a[key] = bind$1(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    /**
     * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
     *
     * @param {string} content with BOM
     * @return {string} content value without BOM
     */


    function stripBOM(content) {
      if (content.charCodeAt(0) === 0xFEFF) {
        content = content.slice(1);
      }

      return content;
    }

    var utils$e = {
      isArray: isArray,
      isArrayBuffer: isArrayBuffer,
      isBuffer: isBuffer,
      isFormData: isFormData,
      isArrayBufferView: isArrayBufferView,
      isString: isString,
      isNumber: isNumber,
      isObject: isObject,
      isPlainObject: isPlainObject,
      isUndefined: isUndefined,
      isDate: isDate,
      isFile: isFile,
      isBlob: isBlob,
      isFunction: isFunction,
      isStream: isStream,
      isURLSearchParams: isURLSearchParams,
      isStandardBrowserEnv: isStandardBrowserEnv,
      forEach: forEach,
      merge: merge,
      extend: extend,
      trim: trim,
      stripBOM: stripBOM
    };

    var utils$d = utils$e;

    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
    }
    /**
     * Build a URL by appending params to the end
     *
     * @param {string} url The base of the url (e.g., http://www.google.com)
     * @param {object} [params] The params to be appended
     * @returns {string} The formatted url
     */


    var buildURL$3 = function buildURL(url, params, paramsSerializer) {
      /*eslint no-param-reassign:0*/
      if (!params) {
        return url;
      }

      var serializedParams;

      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils$d.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils$d.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === 'undefined') {
            return;
          }

          if (utils$d.isArray(val)) {
            key = key + '[]';
          } else {
            val = [val];
          }

          utils$d.forEach(val, function parseValue(v) {
            if (utils$d.isDate(v)) {
              v = v.toISOString();
            } else if (utils$d.isObject(v)) {
              v = JSON.stringify(v);
            }

            parts.push(encode(key) + '=' + encode(v));
          });
        });
        serializedParams = parts.join('&');
      }

      if (serializedParams) {
        var hashmarkIndex = url.indexOf('#');

        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }

        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
      }

      return url;
    };

    var utils$c = utils$e;

    function InterceptorManager$1() {
      this.handlers = [];
    }
    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */


    InterceptorManager$1.prototype.use = function use(fulfilled, rejected) {
      this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected
      });
      return this.handlers.length - 1;
    };
    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     */


    InterceptorManager$1.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     */


    InterceptorManager$1.prototype.forEach = function forEach(fn) {
      utils$c.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };

    var InterceptorManager_1 = InterceptorManager$1;

    var utils$b = utils$e;
    /**
     * Transform the data for a request or a response
     *
     * @param {Object|String} data The data to be transformed
     * @param {Array} headers The headers for the request or response
     * @param {Array|Function} fns A single function or Array of functions
     * @returns {*} The resulting transformed data
     */

    var transformData$1 = function transformData(data, headers, fns) {
      /*eslint no-param-reassign:0*/
      utils$b.forEach(fns, function transform(fn) {
        data = fn(data, headers);
      });
      return data;
    };

    var isCancel$1 = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };

    var utils$a = utils$e;

    var normalizeHeaderName$1 = function normalizeHeaderName(headers, normalizedName) {
      utils$a.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };

    /**
     * Update an Error with the specified config, error code, and response.
     *
     * @param {Error} error The error to update.
     * @param {Object} config The config.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The error.
     */


    var enhanceError$2 = function enhanceError(error, config, code, request, response) {
      error.config = config;

      if (code) {
        error.code = code;
      }

      error.request = request;
      error.response = response;
      error.isAxiosError = true;

      error.toJSON = function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code
        };
      };

      return error;
    };

    var enhanceError$1 = enhanceError$2;
    /**
     * Create an Error with the specified message, config, error code, request and response.
     *
     * @param {string} message The error message.
     * @param {Object} config The config.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The created error.
     */

    var createError$3 = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError$1(error, config, code, request, response);
    };

    var createError$2 = createError$3;
    /**
     * Resolve or reject a Promise based on response status.
     *
     * @param {Function} resolve A function that resolves the promise.
     * @param {Function} reject A function that rejects the promise.
     * @param {object} response The response.
     */

    var settle$2 = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;

      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError$2('Request failed with status code ' + response.status, response.config, null, response.request, response));
      }
    };

    var utils$9 = utils$e;
    var cookies$1 = utils$9.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
    function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils$9.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils$9.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils$9.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },
        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    }() : // Non standard browser env (web workers, react-native) lack needed support.
    function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() {
          return null;
        },
        remove: function remove() {}
      };
    }();

    /**
     * Determines whether the specified URL is absolute
     *
     * @param {string} url The URL to test
     * @returns {boolean} True if the specified URL is absolute, otherwise false
     */


    var isAbsoluteURL$1 = function isAbsoluteURL(url) {
      // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
      // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
      // by any combination of letters, digits, plus, period, or hyphen.
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };

    /**
     * Creates a new URL by combining the specified URLs
     *
     * @param {string} baseURL The base URL
     * @param {string} relativeURL The relative URL
     * @returns {string} The combined URL
     */


    var combineURLs$1 = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
    };

    var isAbsoluteURL = isAbsoluteURL$1;
    var combineURLs = combineURLs$1;
    /**
     * Creates a new URL by combining the baseURL with the requestedURL,
     * only when the requestedURL is not already an absolute URL.
     * If the requestURL is absolute, this function returns the requestedURL untouched.
     *
     * @param {string} baseURL The base URL
     * @param {string} requestedURL Absolute or relative URL to combine
     * @returns {string} The combined full path
     */

    var buildFullPath$2 = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }

      return requestedURL;
    };

    var utils$8 = utils$e; // Headers whose duplicates are ignored by node
    // c.f. https://nodejs.org/api/http.html#http_message_headers

    var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];
    /**
     * Parse headers into an object
     *
     * ```
     * Date: Wed, 27 Aug 2014 08:58:49 GMT
     * Content-Type: application/json
     * Connection: keep-alive
     * Transfer-Encoding: chunked
     * ```
     *
     * @param {String} headers Headers needing to be parsed
     * @returns {Object} Headers parsed into an object
     */

    var parseHeaders$1 = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;

      if (!headers) {
        return parsed;
      }

      utils$8.forEach(headers.split('\n'), function parser(line) {
        i = line.indexOf(':');
        key = utils$8.trim(line.substr(0, i)).toLowerCase();
        val = utils$8.trim(line.substr(i + 1));

        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }

          if (key === 'set-cookie') {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
          }
        }
      });
      return parsed;
    };

    var utils$7 = utils$e;
    var isURLSameOrigin$1 = utils$7.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
    // whether the request URL is of the same origin as current location.
    function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;
      /**
      * Parse a URL to discover it's components
      *
      * @param {String} url The URL to be parsed
      * @returns {Object}
      */

      function resolveURL(url) {
        var href = url;

        if (msie) {
          // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href); // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);
      /**
      * Determine if a URL shares the same origin as the current location
      *
      * @param {String} requestURL The URL to test
      * @returns {boolean} True if URL shares the same origin, otherwise false
      */

      return function isURLSameOrigin(requestURL) {
        var parsed = utils$7.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : // Non standard browser envs (web workers, react-native) lack needed support.
    function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }();

    var utils$6 = utils$e;
    var settle$1 = settle$2;
    var cookies = cookies$1;
    var buildURL$2 = buildURL$3;
    var buildFullPath$1 = buildFullPath$2;
    var parseHeaders = parseHeaders$1;
    var isURLSameOrigin = isURLSameOrigin$1;
    var createError$1 = createError$3;

    var xhr = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;

        if (utils$6.isFormData(requestData)) {
          delete requestHeaders['Content-Type']; // Let the browser set it
        }

        var request = new XMLHttpRequest(); // HTTP basic authentication

        if (config.auth) {
          var username = config.auth.username || '';
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
          requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
        }

        var fullPath = buildFullPath$1(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL$2(fullPath, config.params, config.paramsSerializer), true); // Set the request timeout in MS

        request.timeout = config.timeout; // Listen for ready state

        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          } // The request errored out and we didn't get a response, this will be
          // handled by onerror instead
          // With one exception: request that using file: protocol, most browsers
          // will return status as 0 even though it's a successful request


          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
            return;
          } // Prepare the response


          var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config,
            request: request
          };
          settle$1(resolve, reject, response); // Clean up request

          request = null;
        }; // Handle browser request cancellation (as opposed to a manual cancellation)


        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }

          reject(createError$1('Request aborted', config, 'ECONNABORTED', request)); // Clean up request

          request = null;
        }; // Handle low level network errors


        request.onerror = function handleError() {
          // Real errors are hidden from us by the browser
          // onerror should only fire if it's a network error
          reject(createError$1('Network Error', config, null, request)); // Clean up request

          request = null;
        }; // Handle timeout


        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';

          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }

          reject(createError$1(timeoutErrorMessage, config, 'ECONNABORTED', request)); // Clean up request

          request = null;
        }; // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.


        if (utils$6.isStandardBrowserEnv()) {
          // Add xsrf header
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        } // Add headers to the request


        if ('setRequestHeader' in request) {
          utils$6.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
              // Remove Content-Type if data is undefined
              delete requestHeaders[key];
            } else {
              // Otherwise add header to the request
              request.setRequestHeader(key, val);
            }
          });
        } // Add withCredentials to request if needed


        if (!utils$6.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        } // Add responseType to request if needed


        if (config.responseType) {
          try {
            request.responseType = config.responseType;
          } catch (e) {
            // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
            // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
            if (config.responseType !== 'json') {
              throw e;
            }
          }
        } // Handle progress if needed


        if (typeof config.onDownloadProgress === 'function') {
          request.addEventListener('progress', config.onDownloadProgress);
        } // Not all browsers support upload events


        if (typeof config.onUploadProgress === 'function' && request.upload) {
          request.upload.addEventListener('progress', config.onUploadProgress);
        }

        if (config.cancelToken) {
          // Handle cancellation
          config.cancelToken.promise.then(function onCanceled(cancel) {
            if (!request) {
              return;
            }

            request.abort();
            reject(cancel); // Clean up request

            request = null;
          });
        }

        if (!requestData) {
          requestData = null;
        } // Send the request


        request.send(requestData);
      });
    };

    var followRedirects = {exports: {}};

    var src = {exports: {}};

    var browser$1 = {exports: {}};

    /**
     * Helpers.
     */
    var s = 1000;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    /**
     * Parse or format the given `val`.
     *
     * Options:
     *
     *  - `long` verbose formatting [false]
     *
     * @param {String|Number} val
     * @param {Object} [options]
     * @throws {Error} throw an error if val is not a non-empty string or a number
     * @return {String|Number}
     * @api public
     */

    var ms = function (val, options) {
      options = options || {};
      var type = typeof val;

      if (type === 'string' && val.length > 0) {
        return parse(val);
      } else if (type === 'number' && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }

      throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
    };
    /**
     * Parse the given `str` and return milliseconds.
     *
     * @param {String} str
     * @return {Number}
     * @api private
     */


    function parse(str) {
      str = String(str);

      if (str.length > 100) {
        return;
      }

      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);

      if (!match) {
        return;
      }

      var n = parseFloat(match[1]);
      var type = (match[2] || 'ms').toLowerCase();

      switch (type) {
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
          return n * y;

        case 'weeks':
        case 'week':
        case 'w':
          return n * w;

        case 'days':
        case 'day':
        case 'd':
          return n * d;

        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
          return n * h;

        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
          return n * m;

        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
          return n * s;

        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
          return n;

        default:
          return undefined;
      }
    }
    /**
     * Short format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */


    function fmtShort(ms) {
      var msAbs = Math.abs(ms);

      if (msAbs >= d) {
        return Math.round(ms / d) + 'd';
      }

      if (msAbs >= h) {
        return Math.round(ms / h) + 'h';
      }

      if (msAbs >= m) {
        return Math.round(ms / m) + 'm';
      }

      if (msAbs >= s) {
        return Math.round(ms / s) + 's';
      }

      return ms + 'ms';
    }
    /**
     * Long format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */


    function fmtLong(ms) {
      var msAbs = Math.abs(ms);

      if (msAbs >= d) {
        return plural(ms, msAbs, d, 'day');
      }

      if (msAbs >= h) {
        return plural(ms, msAbs, h, 'hour');
      }

      if (msAbs >= m) {
        return plural(ms, msAbs, m, 'minute');
      }

      if (msAbs >= s) {
        return plural(ms, msAbs, s, 'second');
      }

      return ms + ' ms';
    }
    /**
     * Pluralization helper.
     */


    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
    }

    /**
     * This is the common logic for both the Node.js and web browser
     * implementations of `debug()`.
     */

    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = ms;
      createDebug.destroy = destroy;
      Object.keys(env).forEach(key => {
        createDebug[key] = env[key];
      });
      /**
      * The currently active debug mode names, and names to skip.
      */

      createDebug.names = [];
      createDebug.skips = [];
      /**
      * Map of special "%n" handling functions, for the debug "format" argument.
      *
      * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
      */

      createDebug.formatters = {};
      /**
      * Selects a color for a debug namespace
      * @param {String} namespace The namespace string for the for the debug instance to be colored
      * @return {Number|String} An ANSI color code for the given namespace
      * @api private
      */

      function selectColor(namespace) {
        let hash = 0;

        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0; // Convert to 32bit integer
        }

        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }

      createDebug.selectColor = selectColor;
      /**
      * Create a debugger with the given `namespace`.
      *
      * @param {String} namespace
      * @return {Function}
      * @api public
      */

      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;

        function debug(...args) {
          // Disabled?
          if (!debug.enabled) {
            return;
          }

          const self = debug; // Set `diff` timestamp

          const curr = Number(new Date());
          const ms = curr - (prevTime || curr);
          self.diff = ms;
          self.prev = prevTime;
          self.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);

          if (typeof args[0] !== 'string') {
            // Anything else let's inspect with %O
            args.unshift('%O');
          } // Apply any `formatters` transformations


          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            // If we encounter an escaped % then don't increase the array index
            if (match === '%%') {
              return '%';
            }

            index++;
            const formatter = createDebug.formatters[format];

            if (typeof formatter === 'function') {
              const val = args[index];
              match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

              args.splice(index, 1);
              index--;
            }

            return match;
          }); // Apply env-specific formatting (colors, etc.)

          createDebug.formatArgs.call(self, args);
          const logFn = self.log || createDebug.log;
          logFn.apply(self, args);
        }

        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

        Object.defineProperty(debug, 'enabled', {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }

            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }

            return enabledCache;
          },
          set: v => {
            enableOverride = v;
          }
        }); // Env-specific initialization logic for debug instances

        if (typeof createDebug.init === 'function') {
          createDebug.init(debug);
        }

        return debug;
      }

      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      /**
      * Enables a debug mode by namespaces. This can include modes
      * separated by a colon and wildcards.
      *
      * @param {String} namespaces
      * @api public
      */


      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
        const len = split.length;

        for (i = 0; i < len; i++) {
          if (!split[i]) {
            // ignore empty strings
            continue;
          }

          namespaces = split[i].replace(/\*/g, '.*?');

          if (namespaces[0] === '-') {
            createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
          } else {
            createDebug.names.push(new RegExp('^' + namespaces + '$'));
          }
        }
      }
      /**
      * Disable debug output.
      *
      * @return {String} namespaces
      * @api public
      */


      function disable() {
        const namespaces = [...createDebug.names.map(toNamespace), ...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)].join(',');
        createDebug.enable('');
        return namespaces;
      }
      /**
      * Returns true if the given mode name is enabled, false otherwise.
      *
      * @param {String} name
      * @return {Boolean}
      * @api public
      */


      function enabled(name) {
        if (name[name.length - 1] === '*') {
          return true;
        }

        let i;
        let len;

        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }

        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }

        return false;
      }
      /**
      * Convert regexp to namespace
      *
      * @param {RegExp} regxep
      * @return {String} namespace
      * @api private
      */


      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
      }
      /**
      * Coerce `val`.
      *
      * @param {Mixed} val
      * @return {Mixed}
      * @api private
      */


      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }

        return val;
      }
      /**
      * XXX DO NOT USE. This is a temporary stub function.
      * XXX It WILL be removed in the next major release.
      */


      function destroy() {
        console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
      }

      createDebug.enable(createDebug.load());
      return createDebug;
    }

    var common = setup;

    /* eslint-env browser */

    (function (module, exports) {
      /**
       * This is the web browser implementation of `debug()`.
       */
      exports.formatArgs = formatArgs;
      exports.save = save;
      exports.load = load;
      exports.useColors = useColors;
      exports.storage = localstorage();

      exports.destroy = (() => {
        let warned = false;
        return () => {
          if (!warned) {
            warned = true;
            console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
          }
        };
      })();
      /**
       * Colors.
       */


      exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
      /**
       * Currently only WebKit-based Web Inspectors, Firefox >= v31,
       * and the Firebug extension (any Firefox version) are known
       * to support "%c" CSS customizations.
       *
       * TODO: add a `localStorage` variable to explicitly enable/disable colors
       */
      // eslint-disable-next-line complexity

      function useColors() {
        // NB: In an Electron preload script, document will be defined but not fully
        // initialized. Since we know we're in Chrome, we'll just detect this case
        // explicitly
        if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
          return true;
        } // Internet Explorer and Edge do not support colors.


        if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
          return false;
        } // Is webkit? http://stackoverflow.com/a/16459606/376773
        // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


        return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
      }
      /**
       * Colorize log arguments if enabled.
       *
       * @api public
       */


      function formatArgs(args) {
        args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

        if (!this.useColors) {
          return;
        }

        const c = 'color: ' + this.color;
        args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
        // arguments passed either before or after the %c, so we need to
        // figure out the correct index to insert the CSS into

        let index = 0;
        let lastC = 0;
        args[0].replace(/%[a-zA-Z%]/g, match => {
          if (match === '%%') {
            return;
          }

          index++;

          if (match === '%c') {
            // We only are interested in the *last* %c
            // (the user may have provided their own)
            lastC = index;
          }
        });
        args.splice(lastC, 0, c);
      }
      /**
       * Invokes `console.debug()` when available.
       * No-op when `console.debug` is not a "function".
       * If `console.debug` is not available, falls back
       * to `console.log`.
       *
       * @api public
       */


      exports.log = console.debug || console.log || (() => {});
      /**
       * Save `namespaces`.
       *
       * @param {String} namespaces
       * @api private
       */


      function save(namespaces) {
        try {
          if (namespaces) {
            exports.storage.setItem('debug', namespaces);
          } else {
            exports.storage.removeItem('debug');
          }
        } catch (error) {// Swallow
          // XXX (@Qix-) should we be logging these?
        }
      }
      /**
       * Load `namespaces`.
       *
       * @return {String} returns the previously persisted debug modes
       * @api private
       */


      function load() {
        let r;

        try {
          r = exports.storage.getItem('debug');
        } catch (error) {// Swallow
          // XXX (@Qix-) should we be logging these?
        } // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


        if (!r && typeof process !== 'undefined' && 'env' in process) {
          r = process.env.DEBUG;
        }

        return r;
      }
      /**
       * Localstorage attempts to return the localstorage.
       *
       * This is necessary because safari throws
       * when a user disables cookies/localstorage
       * and you attempt to access it.
       *
       * @return {LocalStorage}
       * @api private
       */


      function localstorage() {
        try {
          // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
          // The Browser also has localStorage in the global context.
          return localStorage;
        } catch (error) {// Swallow
          // XXX (@Qix-) should we be logging these?
        }
      }

      module.exports = common(exports);
      const {
        formatters
      } = module.exports;
      /**
       * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
       */

      formatters.j = function (v) {
        try {
          return JSON.stringify(v);
        } catch (error) {
          return '[UnexpectedJSONParseError]: ' + error.message;
        }
      };
    })(browser$1, browser$1.exports);

    var node = {exports: {}};

    var hasFlag$1 = (flag, argv) => {
      argv = argv || process.argv;
      const prefix = flag.startsWith('-') ? '' : flag.length === 1 ? '-' : '--';
      const pos = argv.indexOf(prefix + flag);
      const terminatorPos = argv.indexOf('--');
      return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
    };

    const os = require$$0__default$1['default'];
    const hasFlag = hasFlag$1;
    const env = process.env;
    let forceColor;

    if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {
      forceColor = false;
    } else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {
      forceColor = true;
    }

    if ('FORCE_COLOR' in env) {
      forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
    }

    function translateLevel(level) {
      if (level === 0) {
        return false;
      }

      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }

    function supportsColor(stream) {
      if (forceColor === false) {
        return 0;
      }

      if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) {
        return 3;
      }

      if (hasFlag('color=256')) {
        return 2;
      }

      if (stream && !stream.isTTY && forceColor !== true) {
        return 0;
      }

      const min = forceColor ? 1 : 0;

      if (process.platform === 'win32') {
        // Node.js 7.5.0 is the first version of Node.js to include a patch to
        // libuv that enables 256 color output on Windows. Anything earlier and it
        // won't work. However, here we target Node.js 8 at minimum as it is an LTS
        // release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
        // release that supports 256 colors. Windows 10 build 14931 is the first release
        // that supports 16m/TrueColor.
        const osRelease = os.release().split('.');

        if (Number(process.versions.node.split('.')[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }

        return 1;
      }

      if ('CI' in env) {
        if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
          return 1;
        }

        return min;
      }

      if ('TEAMCITY_VERSION' in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }

      if (env.COLORTERM === 'truecolor') {
        return 3;
      }

      if ('TERM_PROGRAM' in env) {
        const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

        switch (env.TERM_PROGRAM) {
          case 'iTerm.app':
            return version >= 3 ? 3 : 2;

          case 'Apple_Terminal':
            return 2;
          // No default
        }
      }

      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }

      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }

      if ('COLORTERM' in env) {
        return 1;
      }

      if (env.TERM === 'dumb') {
        return min;
      }

      return min;
    }

    function getSupportLevel(stream) {
      const level = supportsColor(stream);
      return translateLevel(level);
    }

    var supportsColor_1 = {
      supportsColor: getSupportLevel,
      stdout: getSupportLevel(process.stdout),
      stderr: getSupportLevel(process.stderr)
    };

    /**
     * Module dependencies.
     */

    (function (module, exports) {
      const tty = require$$0__default$2['default'];
      const util = require$$0__default['default'];
      /**
       * This is the Node.js implementation of `debug()`.
       */

      exports.init = init;
      exports.log = log;
      exports.formatArgs = formatArgs;
      exports.save = save;
      exports.load = load;
      exports.useColors = useColors;
      exports.destroy = util.deprecate(() => {}, 'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
      /**
       * Colors.
       */

      exports.colors = [6, 2, 3, 4, 5, 1];

      try {
        // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
        // eslint-disable-next-line import/no-extraneous-dependencies
        const supportsColor = supportsColor_1;

        if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
          exports.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];
        }
      } catch (error) {// Swallow - we only care if `supports-color` is available; it doesn't have to be.
      }
      /**
       * Build up the default `inspectOpts` object from the environment variables.
       *
       *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
       */


      exports.inspectOpts = Object.keys(process.env).filter(key => {
        return /^debug_/i.test(key);
      }).reduce((obj, key) => {
        // Camel-case
        const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
          return k.toUpperCase();
        }); // Coerce string value into JS value

        let val = process.env[key];

        if (/^(yes|on|true|enabled)$/i.test(val)) {
          val = true;
        } else if (/^(no|off|false|disabled)$/i.test(val)) {
          val = false;
        } else if (val === 'null') {
          val = null;
        } else {
          val = Number(val);
        }

        obj[prop] = val;
        return obj;
      }, {});
      /**
       * Is stdout a TTY? Colored output is enabled when `true`.
       */

      function useColors() {
        return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
      }
      /**
       * Adds ANSI color escape codes if enabled.
       *
       * @api public
       */


      function formatArgs(args) {
        const {
          namespace: name,
          useColors
        } = this;

        if (useColors) {
          const c = this.color;
          const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
          const prefix = `  ${colorCode};1m${name} \u001B[0m`;
          args[0] = prefix + args[0].split('\n').join('\n' + prefix);
          args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
        } else {
          args[0] = getDate() + name + ' ' + args[0];
        }
      }

      function getDate() {
        if (exports.inspectOpts.hideDate) {
          return '';
        }

        return new Date().toISOString() + ' ';
      }
      /**
       * Invokes `util.format()` with the specified arguments and writes to stderr.
       */


      function log(...args) {
        return process.stderr.write(util.format(...args) + '\n');
      }
      /**
       * Save `namespaces`.
       *
       * @param {String} namespaces
       * @api private
       */


      function save(namespaces) {
        if (namespaces) {
          process.env.DEBUG = namespaces;
        } else {
          // If you set a process.env field to null or undefined, it gets cast to the
          // string 'null' or 'undefined'. Just delete instead.
          delete process.env.DEBUG;
        }
      }
      /**
       * Load `namespaces`.
       *
       * @return {String} returns the previously persisted debug modes
       * @api private
       */


      function load() {
        return process.env.DEBUG;
      }
      /**
       * Init logic for `debug` instances.
       *
       * Create a new `inspectOpts` object in case `useColors` is set
       * differently for a particular `debug` instance.
       */


      function init(debug) {
        debug.inspectOpts = {};
        const keys = Object.keys(exports.inspectOpts);

        for (let i = 0; i < keys.length; i++) {
          debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
        }
      }

      module.exports = common(exports);
      const {
        formatters
      } = module.exports;
      /**
       * Map %o to `util.inspect()`, all on a single line.
       */

      formatters.o = function (v) {
        this.inspectOpts.colors = this.useColors;
        return util.inspect(v, this.inspectOpts).split('\n').map(str => str.trim()).join(' ');
      };
      /**
       * Map %O to `util.inspect()`, allowing multiple lines if needed.
       */


      formatters.O = function (v) {
        this.inspectOpts.colors = this.useColors;
        return util.inspect(v, this.inspectOpts);
      };
    })(node, node.exports);

    /**
     * Detect Electron renderer / nwjs process, which is node, but we should
     * treat as a browser.
     */

    if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
      src.exports = browser$1.exports;
    } else {
      src.exports = node.exports;
    }

    var debug$1;

    var debug_1 = function () {
      if (!debug$1) {
        try {
          /* eslint global-require: off */
          debug$1 = src.exports("follow-redirects");
        } catch (error) {
          /* */
        }

        if (typeof debug$1 !== "function") {
          debug$1 = function () {
            /* */
          };
        }
      }

      debug$1.apply(null, arguments);
    };

    var url$1 = require$$0__default$3['default'];
    var URL = url$1.URL;
    var http$1 = require$$1__default['default'];
    var https$1 = require$$2__default['default'];
    var Writable = require$$3__default['default'].Writable;
    var assert = require$$4__default['default'];
    var debug = debug_1; // Create handlers that pass events from native requests

    var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
    var eventHandlers = Object.create(null);
    events.forEach(function (event) {
      eventHandlers[event] = function (arg1, arg2, arg3) {
        this._redirectable.emit(event, arg1, arg2, arg3);
      };
    }); // Error types with codes

    var RedirectionError = createErrorType("ERR_FR_REDIRECTION_FAILURE", "");
    var TooManyRedirectsError = createErrorType("ERR_FR_TOO_MANY_REDIRECTS", "Maximum number of redirects exceeded");
    var MaxBodyLengthExceededError = createErrorType("ERR_FR_MAX_BODY_LENGTH_EXCEEDED", "Request body larger than maxBodyLength limit");
    var WriteAfterEndError = createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end"); // An HTTP(S) request that can be redirected

    function RedirectableRequest(options, responseCallback) {
      // Initialize the request
      Writable.call(this);

      this._sanitizeOptions(options);

      this._options = options;
      this._ended = false;
      this._ending = false;
      this._redirectCount = 0;
      this._redirects = [];
      this._requestBodyLength = 0;
      this._requestBodyBuffers = []; // Attach a callback if passed

      if (responseCallback) {
        this.on("response", responseCallback);
      } // React to responses of native requests


      var self = this;

      this._onNativeResponse = function (response) {
        self._processResponse(response);
      }; // Perform the first request


      this._performRequest();
    }

    RedirectableRequest.prototype = Object.create(Writable.prototype);

    RedirectableRequest.prototype.abort = function () {
      abortRequest(this._currentRequest);
      this.emit("abort");
    }; // Writes buffered data to the current native request


    RedirectableRequest.prototype.write = function (data, encoding, callback) {
      // Writing is not allowed if end has been called
      if (this._ending) {
        throw new WriteAfterEndError();
      } // Validate input and shift parameters if necessary


      if (!(typeof data === "string" || typeof data === "object" && "length" in data)) {
        throw new TypeError("data should be a string, Buffer or Uint8Array");
      }

      if (typeof encoding === "function") {
        callback = encoding;
        encoding = null;
      } // Ignore empty buffers, since writing them doesn't invoke the callback
      // https://github.com/nodejs/node/issues/22066


      if (data.length === 0) {
        if (callback) {
          callback();
        }

        return;
      } // Only write when we don't exceed the maximum body length


      if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
        this._requestBodyLength += data.length;

        this._requestBodyBuffers.push({
          data: data,
          encoding: encoding
        });

        this._currentRequest.write(data, encoding, callback);
      } // Error when we exceed the maximum body length
      else {
        this.emit("error", new MaxBodyLengthExceededError());
        this.abort();
      }
    }; // Ends the current native request


    RedirectableRequest.prototype.end = function (data, encoding, callback) {
      // Shift parameters if necessary
      if (typeof data === "function") {
        callback = data;
        data = encoding = null;
      } else if (typeof encoding === "function") {
        callback = encoding;
        encoding = null;
      } // Write data if needed and end


      if (!data) {
        this._ended = this._ending = true;

        this._currentRequest.end(null, null, callback);
      } else {
        var self = this;
        var currentRequest = this._currentRequest;
        this.write(data, encoding, function () {
          self._ended = true;
          currentRequest.end(null, null, callback);
        });
        this._ending = true;
      }
    }; // Sets a header value on the current native request


    RedirectableRequest.prototype.setHeader = function (name, value) {
      this._options.headers[name] = value;

      this._currentRequest.setHeader(name, value);
    }; // Clears a header value on the current native request


    RedirectableRequest.prototype.removeHeader = function (name) {
      delete this._options.headers[name];

      this._currentRequest.removeHeader(name);
    }; // Global timeout for all underlying requests


    RedirectableRequest.prototype.setTimeout = function (msecs, callback) {
      var self = this;

      if (callback) {
        this.on("timeout", callback);
      }

      function destroyOnTimeout(socket) {
        socket.setTimeout(msecs);
        socket.removeListener("timeout", socket.destroy);
        socket.addListener("timeout", socket.destroy);
      } // Sets up a timer to trigger a timeout event


      function startTimer(socket) {
        if (self._timeout) {
          clearTimeout(self._timeout);
        }

        self._timeout = setTimeout(function () {
          self.emit("timeout");
          clearTimer();
        }, msecs);
        destroyOnTimeout(socket);
      } // Prevent a timeout from triggering


      function clearTimer() {
        clearTimeout(self._timeout);

        if (callback) {
          self.removeListener("timeout", callback);
        }

        if (!this.socket) {
          self._currentRequest.removeListener("socket", startTimer);
        }
      } // Start the timer when the socket is opened


      if (this.socket) {
        startTimer(this.socket);
      } else {
        this._currentRequest.once("socket", startTimer);
      }

      this.on("socket", destroyOnTimeout);
      this.once("response", clearTimer);
      this.once("error", clearTimer);
      return this;
    }; // Proxy all other public ClientRequest methods


    ["flushHeaders", "getHeader", "setNoDelay", "setSocketKeepAlive"].forEach(function (method) {
      RedirectableRequest.prototype[method] = function (a, b) {
        return this._currentRequest[method](a, b);
      };
    }); // Proxy all public ClientRequest properties

    ["aborted", "connection", "socket"].forEach(function (property) {
      Object.defineProperty(RedirectableRequest.prototype, property, {
        get: function () {
          return this._currentRequest[property];
        }
      });
    });

    RedirectableRequest.prototype._sanitizeOptions = function (options) {
      // Ensure headers are always present
      if (!options.headers) {
        options.headers = {};
      } // Since http.request treats host as an alias of hostname,
      // but the url module interprets host as hostname plus port,
      // eliminate the host property to avoid confusion.


      if (options.host) {
        // Use hostname if set, because it has precedence
        if (!options.hostname) {
          options.hostname = options.host;
        }

        delete options.host;
      } // Complete the URL object when necessary


      if (!options.pathname && options.path) {
        var searchPos = options.path.indexOf("?");

        if (searchPos < 0) {
          options.pathname = options.path;
        } else {
          options.pathname = options.path.substring(0, searchPos);
          options.search = options.path.substring(searchPos);
        }
      }
    }; // Executes the next native request (initial or redirect)


    RedirectableRequest.prototype._performRequest = function () {
      // Load the native protocol
      var protocol = this._options.protocol;
      var nativeProtocol = this._options.nativeProtocols[protocol];

      if (!nativeProtocol) {
        this.emit("error", new TypeError("Unsupported protocol " + protocol));
        return;
      } // If specified, use the agent corresponding to the protocol
      // (HTTP and HTTPS use different types of agents)


      if (this._options.agents) {
        var scheme = protocol.substr(0, protocol.length - 1);
        this._options.agent = this._options.agents[scheme];
      } // Create the native request


      var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
      this._currentUrl = url$1.format(this._options); // Set up event handlers

      request._redirectable = this;

      for (var e = 0; e < events.length; e++) {
        request.on(events[e], eventHandlers[events[e]]);
      } // End a redirected request
      // (The first request must be ended explicitly with RedirectableRequest#end)


      if (this._isRedirect) {
        // Write the request entity and end.
        var i = 0;
        var self = this;
        var buffers = this._requestBodyBuffers;

        (function writeNext(error) {
          // Only write if this request has not been redirected yet

          /* istanbul ignore else */
          if (request === self._currentRequest) {
            // Report any write errors

            /* istanbul ignore if */
            if (error) {
              self.emit("error", error);
            } // Write the next buffer if there are still left
            else if (i < buffers.length) {
              var buffer = buffers[i++];
              /* istanbul ignore else */

              if (!request.finished) {
                request.write(buffer.data, buffer.encoding, writeNext);
              }
            } // End the request if `end` has been called on us
            else if (self._ended) {
              request.end();
            }
          }
        })();
      }
    }; // Processes a response from the current native request


    RedirectableRequest.prototype._processResponse = function (response) {
      // Store the redirected response
      var statusCode = response.statusCode;

      if (this._options.trackRedirects) {
        this._redirects.push({
          url: this._currentUrl,
          headers: response.headers,
          statusCode: statusCode
        });
      } // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
      // that further action needs to be taken by the user agent in order to
      // fulfill the request. If a Location header field is provided,
      // the user agent MAY automatically redirect its request to the URI
      // referenced by the Location field value,
      // even if the specific status code is not understood.


      var location = response.headers.location;

      if (location && this._options.followRedirects !== false && statusCode >= 300 && statusCode < 400) {
        // Abort the current request
        abortRequest(this._currentRequest); // Discard the remainder of the response to avoid waiting for data

        response.destroy(); // RFC7231§6.4: A client SHOULD detect and intervene
        // in cyclical redirections (i.e., "infinite" redirection loops).

        if (++this._redirectCount > this._options.maxRedirects) {
          this.emit("error", new TooManyRedirectsError());
          return;
        } // RFC7231§6.4: Automatic redirection needs to done with
        // care for methods not known to be safe, […]
        // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change
        // the request method from POST to GET for the subsequent request.


        if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || // RFC7231§6.4.4: The 303 (See Other) status code indicates that
        // the server is redirecting the user agent to a different resource […]
        // A user agent can perform a retrieval request targeting that URI
        // (a GET or HEAD request if using HTTP) […]
        statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
          this._options.method = "GET"; // Drop a possible entity and headers related to it

          this._requestBodyBuffers = [];
          removeMatchingHeaders(/^content-/i, this._options.headers);
        } // Drop the Host header, as the redirect might lead to a different host


        var previousHostName = removeMatchingHeaders(/^host$/i, this._options.headers) || url$1.parse(this._currentUrl).hostname; // Create the redirected request

        var redirectUrl = url$1.resolve(this._currentUrl, location);
        debug("redirecting to", redirectUrl);
        this._isRedirect = true;
        var redirectUrlParts = url$1.parse(redirectUrl);
        Object.assign(this._options, redirectUrlParts); // Drop the Authorization header if redirecting to another host

        if (redirectUrlParts.hostname !== previousHostName) {
          removeMatchingHeaders(/^authorization$/i, this._options.headers);
        } // Evaluate the beforeRedirect callback


        if (typeof this._options.beforeRedirect === "function") {
          var responseDetails = {
            headers: response.headers
          };

          try {
            this._options.beforeRedirect.call(null, this._options, responseDetails);
          } catch (err) {
            this.emit("error", err);
            return;
          }

          this._sanitizeOptions(this._options);
        } // Perform the redirected request


        try {
          this._performRequest();
        } catch (cause) {
          var error = new RedirectionError("Redirected request failed: " + cause.message);
          error.cause = cause;
          this.emit("error", error);
        }
      } else {
        // The response is not a redirect; return it as-is
        response.responseUrl = this._currentUrl;
        response.redirects = this._redirects;
        this.emit("response", response); // Clean up

        this._requestBodyBuffers = [];
      }
    }; // Wraps the key/value object of protocols with redirect functionality


    function wrap(protocols) {
      // Default settings
      var exports = {
        maxRedirects: 21,
        maxBodyLength: 10 * 1024 * 1024
      }; // Wrap each protocol

      var nativeProtocols = {};
      Object.keys(protocols).forEach(function (scheme) {
        var protocol = scheme + ":";
        var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
        var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol); // Executes a request, following redirects

        function request(input, options, callback) {
          // Parse parameters
          if (typeof input === "string") {
            var urlStr = input;

            try {
              input = urlToOptions(new URL(urlStr));
            } catch (err) {
              /* istanbul ignore next */
              input = url$1.parse(urlStr);
            }
          } else if (URL && input instanceof URL) {
            input = urlToOptions(input);
          } else {
            callback = options;
            options = input;
            input = {
              protocol: protocol
            };
          }

          if (typeof options === "function") {
            callback = options;
            options = null;
          } // Set defaults


          options = Object.assign({
            maxRedirects: exports.maxRedirects,
            maxBodyLength: exports.maxBodyLength
          }, input, options);
          options.nativeProtocols = nativeProtocols;
          assert.equal(options.protocol, protocol, "protocol mismatch");
          debug("options", options);
          return new RedirectableRequest(options, callback);
        } // Executes a GET request, following redirects


        function get(input, options, callback) {
          var wrappedRequest = wrappedProtocol.request(input, options, callback);
          wrappedRequest.end();
          return wrappedRequest;
        } // Expose the properties on the wrapped protocol


        Object.defineProperties(wrappedProtocol, {
          request: {
            value: request,
            configurable: true,
            enumerable: true,
            writable: true
          },
          get: {
            value: get,
            configurable: true,
            enumerable: true,
            writable: true
          }
        });
      });
      return exports;
    }
    /* istanbul ignore next */


    function noop() {
      /* empty */
    } // from https://github.com/nodejs/node/blob/master/lib/internal/url.js


    function urlToOptions(urlObject) {
      var options = {
        protocol: urlObject.protocol,
        hostname: urlObject.hostname.startsWith("[") ?
        /* istanbul ignore next */
        urlObject.hostname.slice(1, -1) : urlObject.hostname,
        hash: urlObject.hash,
        search: urlObject.search,
        pathname: urlObject.pathname,
        path: urlObject.pathname + urlObject.search,
        href: urlObject.href
      };

      if (urlObject.port !== "") {
        options.port = Number(urlObject.port);
      }

      return options;
    }

    function removeMatchingHeaders(regex, headers) {
      var lastValue;

      for (var header in headers) {
        if (regex.test(header)) {
          lastValue = headers[header];
          delete headers[header];
        }
      }

      return lastValue;
    }

    function createErrorType(code, defaultMessage) {
      function CustomError(message) {
        Error.captureStackTrace(this, this.constructor);
        this.message = message || defaultMessage;
      }

      CustomError.prototype = new Error();
      CustomError.prototype.constructor = CustomError;
      CustomError.prototype.name = "Error [" + code + "]";
      CustomError.prototype.code = code;
      return CustomError;
    }

    function abortRequest(request) {
      for (var e = 0; e < events.length; e++) {
        request.removeListener(events[e], eventHandlers[events[e]]);
      }

      request.on("error", noop);
      request.abort();
    } // Exports


    followRedirects.exports = wrap({
      http: http$1,
      https: https$1
    });
    followRedirects.exports.wrap = wrap;

    var name = "axios";
    var version = "0.21.1";
    var description = "Promise based HTTP client for the browser and node.js";
    var main = "index.js";
    var scripts = {
    	test: "grunt test && bundlesize",
    	start: "node ./sandbox/server.js",
    	build: "NODE_ENV=production grunt build",
    	preversion: "npm test",
    	version: "npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",
    	postversion: "git push && git push --tags",
    	examples: "node ./examples/server.js",
    	coveralls: "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
    	fix: "eslint --fix lib/**/*.js"
    };
    var repository = {
    	type: "git",
    	url: "https://github.com/axios/axios.git"
    };
    var keywords = [
    	"xhr",
    	"http",
    	"ajax",
    	"promise",
    	"node"
    ];
    var author = "Matt Zabriskie";
    var license = "MIT";
    var bugs = {
    	url: "https://github.com/axios/axios/issues"
    };
    var homepage = "https://github.com/axios/axios";
    var devDependencies = {
    	bundlesize: "^0.17.0",
    	coveralls: "^3.0.0",
    	"es6-promise": "^4.2.4",
    	grunt: "^1.0.2",
    	"grunt-banner": "^0.6.0",
    	"grunt-cli": "^1.2.0",
    	"grunt-contrib-clean": "^1.1.0",
    	"grunt-contrib-watch": "^1.0.0",
    	"grunt-eslint": "^20.1.0",
    	"grunt-karma": "^2.0.0",
    	"grunt-mocha-test": "^0.13.3",
    	"grunt-ts": "^6.0.0-beta.19",
    	"grunt-webpack": "^1.0.18",
    	"istanbul-instrumenter-loader": "^1.0.0",
    	"jasmine-core": "^2.4.1",
    	karma: "^1.3.0",
    	"karma-chrome-launcher": "^2.2.0",
    	"karma-coverage": "^1.1.1",
    	"karma-firefox-launcher": "^1.1.0",
    	"karma-jasmine": "^1.1.1",
    	"karma-jasmine-ajax": "^0.1.13",
    	"karma-opera-launcher": "^1.0.0",
    	"karma-safari-launcher": "^1.0.0",
    	"karma-sauce-launcher": "^1.2.0",
    	"karma-sinon": "^1.0.5",
    	"karma-sourcemap-loader": "^0.3.7",
    	"karma-webpack": "^1.7.0",
    	"load-grunt-tasks": "^3.5.2",
    	minimist: "^1.2.0",
    	mocha: "^5.2.0",
    	sinon: "^4.5.0",
    	typescript: "^2.8.1",
    	"url-search-params": "^0.10.0",
    	webpack: "^1.13.1",
    	"webpack-dev-server": "^1.14.1"
    };
    var browser = {
    	"./lib/adapters/http.js": "./lib/adapters/xhr.js"
    };
    var jsdelivr = "dist/axios.min.js";
    var unpkg = "dist/axios.min.js";
    var typings = "./index.d.ts";
    var dependencies = {
    	"follow-redirects": "^1.10.0"
    };
    var bundlesize = [
    	{
    		path: "./dist/axios.min.js",
    		threshold: "5kB"
    	}
    ];
    var require$$9 = {
    	name: name,
    	version: version,
    	description: description,
    	main: main,
    	scripts: scripts,
    	repository: repository,
    	keywords: keywords,
    	author: author,
    	license: license,
    	bugs: bugs,
    	homepage: homepage,
    	devDependencies: devDependencies,
    	browser: browser,
    	jsdelivr: jsdelivr,
    	unpkg: unpkg,
    	typings: typings,
    	dependencies: dependencies,
    	bundlesize: bundlesize
    };

    var utils$5 = utils$e;
    var settle = settle$2;
    var buildFullPath = buildFullPath$2;
    var buildURL$1 = buildURL$3;
    var http = require$$1__default['default'];
    var https = require$$2__default['default'];
    var httpFollow = followRedirects.exports.http;
    var httpsFollow = followRedirects.exports.https;
    var url = require$$0__default$3['default'];
    var zlib = require$$8__default['default'];
    var pkg = require$$9;
    var createError = createError$3;
    var enhanceError = enhanceError$2;
    var isHttps = /https:?/;
    /**
     *
     * @param {http.ClientRequestArgs} options
     * @param {AxiosProxyConfig} proxy
     * @param {string} location
     */

    function setProxy(options, proxy, location) {
      options.hostname = proxy.host;
      options.host = proxy.host;
      options.port = proxy.port;
      options.path = location; // Basic proxy authorization

      if (proxy.auth) {
        var base64 = Buffer.from(proxy.auth.username + ':' + proxy.auth.password, 'utf8').toString('base64');
        options.headers['Proxy-Authorization'] = 'Basic ' + base64;
      } // If a proxy is used, any redirects must also pass through the proxy


      options.beforeRedirect = function beforeRedirect(redirection) {
        redirection.headers.host = redirection.host;
        setProxy(redirection, proxy, redirection.href);
      };
    }
    /*eslint consistent-return:0*/


    var http_1 = function httpAdapter(config) {
      return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {
        var resolve = function resolve(value) {
          resolvePromise(value);
        };

        var reject = function reject(value) {
          rejectPromise(value);
        };

        var data = config.data;
        var headers = config.headers; // Set User-Agent (required by some servers)
        // Only set header if it hasn't been set in config
        // See https://github.com/axios/axios/issues/69

        if (!headers['User-Agent'] && !headers['user-agent']) {
          headers['User-Agent'] = 'axios/' + pkg.version;
        }

        if (data && !utils$5.isStream(data)) {
          if (Buffer.isBuffer(data)) ; else if (utils$5.isArrayBuffer(data)) {
            data = Buffer.from(new Uint8Array(data));
          } else if (utils$5.isString(data)) {
            data = Buffer.from(data, 'utf-8');
          } else {
            return reject(createError('Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream', config));
          } // Add Content-Length header if data exists


          headers['Content-Length'] = data.length;
        } // HTTP basic authentication


        var auth = undefined;

        if (config.auth) {
          var username = config.auth.username || '';
          var password = config.auth.password || '';
          auth = username + ':' + password;
        } // Parse url


        var fullPath = buildFullPath(config.baseURL, config.url);
        var parsed = url.parse(fullPath);
        var protocol = parsed.protocol || 'http:';

        if (!auth && parsed.auth) {
          var urlAuth = parsed.auth.split(':');
          var urlUsername = urlAuth[0] || '';
          var urlPassword = urlAuth[1] || '';
          auth = urlUsername + ':' + urlPassword;
        }

        if (auth) {
          delete headers.Authorization;
        }

        var isHttpsRequest = isHttps.test(protocol);
        var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
        var options = {
          path: buildURL$1(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, ''),
          method: config.method.toUpperCase(),
          headers: headers,
          agent: agent,
          agents: {
            http: config.httpAgent,
            https: config.httpsAgent
          },
          auth: auth
        };

        if (config.socketPath) {
          options.socketPath = config.socketPath;
        } else {
          options.hostname = parsed.hostname;
          options.port = parsed.port;
        }

        var proxy = config.proxy;

        if (!proxy && proxy !== false) {
          var proxyEnv = protocol.slice(0, -1) + '_proxy';
          var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];

          if (proxyUrl) {
            var parsedProxyUrl = url.parse(proxyUrl);
            var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;
            var shouldProxy = true;

            if (noProxyEnv) {
              var noProxy = noProxyEnv.split(',').map(function trim(s) {
                return s.trim();
              });
              shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {
                if (!proxyElement) {
                  return false;
                }

                if (proxyElement === '*') {
                  return true;
                }

                if (proxyElement[0] === '.' && parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {
                  return true;
                }

                return parsed.hostname === proxyElement;
              });
            }

            if (shouldProxy) {
              proxy = {
                host: parsedProxyUrl.hostname,
                port: parsedProxyUrl.port,
                protocol: parsedProxyUrl.protocol
              };

              if (parsedProxyUrl.auth) {
                var proxyUrlAuth = parsedProxyUrl.auth.split(':');
                proxy.auth = {
                  username: proxyUrlAuth[0],
                  password: proxyUrlAuth[1]
                };
              }
            }
          }
        }

        if (proxy) {
          options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');
          setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);
        }

        var transport;
        var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);

        if (config.transport) {
          transport = config.transport;
        } else if (config.maxRedirects === 0) {
          transport = isHttpsProxy ? https : http;
        } else {
          if (config.maxRedirects) {
            options.maxRedirects = config.maxRedirects;
          }

          transport = isHttpsProxy ? httpsFollow : httpFollow;
        }

        if (config.maxBodyLength > -1) {
          options.maxBodyLength = config.maxBodyLength;
        } // Create the request


        var req = transport.request(options, function handleResponse(res) {
          if (req.aborted) return; // uncompress the response body transparently if required

          var stream = res; // return the last request in case of redirects

          var lastRequest = res.req || req; // if no content, is HEAD request or decompress disabled we should not decompress

          if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {
            switch (res.headers['content-encoding']) {
              /*eslint default-case:0*/
              case 'gzip':
              case 'compress':
              case 'deflate':
                // add the unzipper to the body stream processing pipeline
                stream = stream.pipe(zlib.createUnzip()); // remove the content-encoding in order to not confuse downstream operations

                delete res.headers['content-encoding'];
                break;
            }
          }

          var response = {
            status: res.statusCode,
            statusText: res.statusMessage,
            headers: res.headers,
            config: config,
            request: lastRequest
          };

          if (config.responseType === 'stream') {
            response.data = stream;
            settle(resolve, reject, response);
          } else {
            var responseBuffer = [];
            stream.on('data', function handleStreamData(chunk) {
              responseBuffer.push(chunk); // make sure the content length is not over the maxContentLength if specified

              if (config.maxContentLength > -1 && Buffer.concat(responseBuffer).length > config.maxContentLength) {
                stream.destroy();
                reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded', config, null, lastRequest));
              }
            });
            stream.on('error', function handleStreamError(err) {
              if (req.aborted) return;
              reject(enhanceError(err, config, null, lastRequest));
            });
            stream.on('end', function handleStreamEnd() {
              var responseData = Buffer.concat(responseBuffer);

              if (config.responseType !== 'arraybuffer') {
                responseData = responseData.toString(config.responseEncoding);

                if (!config.responseEncoding || config.responseEncoding === 'utf8') {
                  responseData = utils$5.stripBOM(responseData);
                }
              }

              response.data = responseData;
              settle(resolve, reject, response);
            });
          }
        }); // Handle errors

        req.on('error', function handleRequestError(err) {
          if (req.aborted && err.code !== 'ERR_FR_TOO_MANY_REDIRECTS') return;
          reject(enhanceError(err, config, null, req));
        }); // Handle request timeout

        if (config.timeout) {
          // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.
          // And timer callback will be fired, and abort() will be invoked before connection, then get "socket hang up" and code ECONNRESET.
          // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.
          // And then these socket which be hang up will devoring CPU little by little.
          // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.
          req.setTimeout(config.timeout, function handleRequestTimeout() {
            req.abort();
            reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', req));
          });
        }

        if (config.cancelToken) {
          // Handle cancellation
          config.cancelToken.promise.then(function onCanceled(cancel) {
            if (req.aborted) return;
            req.abort();
            reject(cancel);
          });
        } // Send the request


        if (utils$5.isStream(data)) {
          data.on('error', function handleStreamError(err) {
            reject(enhanceError(err, config, null, req));
          }).pipe(req);
        } else {
          req.end(data);
        }
      });
    };

    var utils$4 = utils$e;
    var normalizeHeaderName = normalizeHeaderName$1;
    var DEFAULT_CONTENT_TYPE = {
      'Content-Type': 'application/x-www-form-urlencoded'
    };

    function setContentTypeIfUnset(headers, value) {
      if (!utils$4.isUndefined(headers) && utils$4.isUndefined(headers['Content-Type'])) {
        headers['Content-Type'] = value;
      }
    }

    function getDefaultAdapter() {
      var adapter;

      if (typeof XMLHttpRequest !== 'undefined') {
        // For browsers use XHR adapter
        adapter = xhr;
      } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
        // For node use HTTP adapter
        adapter = http_1;
      }

      return adapter;
    }

    var defaults$2 = {
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, 'Accept');
        normalizeHeaderName(headers, 'Content-Type');

        if (utils$4.isFormData(data) || utils$4.isArrayBuffer(data) || utils$4.isBuffer(data) || utils$4.isStream(data) || utils$4.isFile(data) || utils$4.isBlob(data)) {
          return data;
        }

        if (utils$4.isArrayBufferView(data)) {
          return data.buffer;
        }

        if (utils$4.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
          return data.toString();
        }

        if (utils$4.isObject(data)) {
          setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
          return JSON.stringify(data);
        }

        return data;
      }],
      transformResponse: [function transformResponse(data) {
        /*eslint no-param-reassign:0*/
        if (typeof data === 'string') {
          try {
            data = JSON.parse(data);
          } catch (e) {
            /* Ignore */
          }
        }

        return data;
      }],

      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      }
    };
    defaults$2.headers = {
      common: {
        'Accept': 'application/json, text/plain, */*'
      }
    };
    utils$4.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
      defaults$2.headers[method] = {};
    });
    utils$4.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      defaults$2.headers[method] = utils$4.merge(DEFAULT_CONTENT_TYPE);
    });
    var defaults_1 = defaults$2;

    var utils$3 = utils$e;
    var transformData = transformData$1;
    var isCancel = isCancel$1;
    var defaults$1 = defaults_1;
    /**
     * Throws a `Cancel` if cancellation has been requested.
     */

    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
    }
    /**
     * Dispatch a request to the server using the configured adapter.
     *
     * @param {object} config The config that is to be used for the request
     * @returns {Promise} The Promise to be fulfilled
     */


    var dispatchRequest$1 = function dispatchRequest(config) {
      throwIfCancellationRequested(config); // Ensure headers exist

      config.headers = config.headers || {}; // Transform request data

      config.data = transformData(config.data, config.headers, config.transformRequest); // Flatten headers

      config.headers = utils$3.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
      utils$3.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
        delete config.headers[method];
      });
      var adapter = config.adapter || defaults$1.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config); // Transform response data

        response.data = transformData(response.data, response.headers, config.transformResponse);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config); // Transform response data

          if (reason && reason.response) {
            reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
          }
        }

        return Promise.reject(reason);
      });
    };

    var utils$2 = utils$e;
    /**
     * Config-specific merge-function which creates a new config-object
     * by merging two configuration objects together.
     *
     * @param {Object} config1
     * @param {Object} config2
     * @returns {Object} New object resulting from merging config2 to config1
     */

    var mergeConfig$2 = function mergeConfig(config1, config2) {
      // eslint-disable-next-line no-param-reassign
      config2 = config2 || {};
      var config = {};
      var valueFromConfig2Keys = ['url', 'method', 'data'];
      var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
      var defaultToConfig2Keys = ['baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer', 'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName', 'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress', 'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent', 'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'];
      var directMergeKeys = ['validateStatus'];

      function getMergedValue(target, source) {
        if (utils$2.isPlainObject(target) && utils$2.isPlainObject(source)) {
          return utils$2.merge(target, source);
        } else if (utils$2.isPlainObject(source)) {
          return utils$2.merge({}, source);
        } else if (utils$2.isArray(source)) {
          return source.slice();
        }

        return source;
      }

      function mergeDeepProperties(prop) {
        if (!utils$2.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (!utils$2.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(undefined, config1[prop]);
        }
      }

      utils$2.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
        if (!utils$2.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(undefined, config2[prop]);
        }
      });
      utils$2.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
      utils$2.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
        if (!utils$2.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(undefined, config2[prop]);
        } else if (!utils$2.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(undefined, config1[prop]);
        }
      });
      utils$2.forEach(directMergeKeys, function merge(prop) {
        if (prop in config2) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          config[prop] = getMergedValue(undefined, config1[prop]);
        }
      });
      var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
      var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(function filterAxiosKeys(key) {
        return axiosKeys.indexOf(key) === -1;
      });
      utils$2.forEach(otherKeys, mergeDeepProperties);
      return config;
    };

    var utils$1 = utils$e;
    var buildURL = buildURL$3;
    var InterceptorManager = InterceptorManager_1;
    var dispatchRequest = dispatchRequest$1;
    var mergeConfig$1 = mergeConfig$2;
    /**
     * Create a new instance of Axios
     *
     * @param {Object} instanceConfig The default config for the instance
     */

    function Axios$1(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    /**
     * Dispatch a request
     *
     * @param {Object} config The config specific for this request (merged with this.defaults)
     */


    Axios$1.prototype.request = function request(config) {
      /*eslint no-param-reassign:0*/
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof config === 'string') {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }

      config = mergeConfig$1(this.defaults, config); // Set config.method

      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = 'get';
      } // Hook up interceptors middleware


      var chain = [dispatchRequest, undefined];
      var promise = Promise.resolve(config);
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        chain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        chain.push(interceptor.fulfilled, interceptor.rejected);
      });

      while (chain.length) {
        promise = promise.then(chain.shift(), chain.shift());
      }

      return promise;
    };

    Axios$1.prototype.getUri = function getUri(config) {
      config = mergeConfig$1(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
    }; // Provide aliases for supported request methods


    utils$1.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
      /*eslint func-names:0*/
      Axios$1.prototype[method] = function (url, config) {
        return this.request(mergeConfig$1(config || {}, {
          method: method,
          url: url,
          data: (config || {}).data
        }));
      };
    });
    utils$1.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      /*eslint func-names:0*/
      Axios$1.prototype[method] = function (url, data, config) {
        return this.request(mergeConfig$1(config || {}, {
          method: method,
          url: url,
          data: data
        }));
      };
    });
    var Axios_1 = Axios$1;

    /**
     * A `Cancel` is an object that is thrown when an operation is canceled.
     *
     * @class
     * @param {string=} message The message.
     */


    function Cancel$1(message) {
      this.message = message;
    }

    Cancel$1.prototype.toString = function toString() {
      return 'Cancel' + (this.message ? ': ' + this.message : '');
    };

    Cancel$1.prototype.__CANCEL__ = true;
    var Cancel_1 = Cancel$1;

    var Cancel = Cancel_1;
    /**
     * A `CancelToken` is an object that can be used to request cancellation of an operation.
     *
     * @class
     * @param {Function} executor The executor function.
     */

    function CancelToken(executor) {
      if (typeof executor !== 'function') {
        throw new TypeError('executor must be a function.');
      }

      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      executor(function cancel(message) {
        if (token.reason) {
          // Cancellation has already been requested
          return;
        }

        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    /**
     * Throws a `Cancel` if cancellation has been requested.
     */


    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */


    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token: token,
        cancel: cancel
      };
    };

    var CancelToken_1 = CancelToken;

    /**
     * Syntactic sugar for invoking a function and expanding an array for arguments.
     *
     * Common use case would be to use `Function.prototype.apply`.
     *
     *  ```js
     *  function f(x, y, z) {}
     *  var args = [1, 2, 3];
     *  f.apply(null, args);
     *  ```
     *
     * With `spread` this example can be re-written.
     *
     *  ```js
     *  spread(function(x, y, z) {})([1, 2, 3]);
     *  ```
     *
     * @param {Function} callback
     * @returns {Function}
     */


    var spread = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };

    /**
     * Determines whether the payload is an error thrown by Axios
     *
     * @param {*} payload The value to test
     * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
     */


    var isAxiosError = function isAxiosError(payload) {
      return typeof payload === 'object' && payload.isAxiosError === true;
    };

    var utils = utils$e;
    var bind = bind$2;
    var Axios = Axios_1;
    var mergeConfig = mergeConfig$2;
    var defaults = defaults_1;
    /**
     * Create an instance of Axios
     *
     * @param {Object} defaultConfig The default config for the instance
     * @return {Axios} A new instance of Axios
     */

    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context); // Copy axios.prototype to instance

      utils.extend(instance, Axios.prototype, context); // Copy context to instance

      utils.extend(instance, context);
      return instance;
    } // Create the default instance to be exported


    var axios$1 = createInstance(defaults); // Expose Axios class to allow class inheritance

    axios$1.Axios = Axios; // Factory for creating new instances

    axios$1.create = function create(instanceConfig) {
      return createInstance(mergeConfig(axios$1.defaults, instanceConfig));
    }; // Expose Cancel & CancelToken


    axios$1.Cancel = Cancel_1;
    axios$1.CancelToken = CancelToken_1;
    axios$1.isCancel = isCancel$1; // Expose all/spread

    axios$1.all = function all(promises) {
      return Promise.all(promises);
    };

    axios$1.spread = spread; // Expose isAxiosError

    axios$1.isAxiosError = isAxiosError;
    axios$2.exports = axios$1; // Allow use of default import syntax in TypeScript

    axios$2.exports.default = axios$1;

    var axios = axios$2.exports;

    var Lang;
    (function (Lang) {
        Lang["CN"] = "cn";
        Lang["EN"] = "en";
    })(Lang || (Lang = {}));
    var NFTIssueParamsIconType;
    (function (NFTIssueParamsIconType) {
        NFTIssueParamsIconType["File"] = "pic";
        NFTIssueParamsIconType["TXId"] = "txId";
    })(NFTIssueParamsIconType || (NFTIssueParamsIconType = {}));
    var SdkType;
    (function (SdkType) {
        SdkType[SdkType["App"] = 1] = "App";
        SdkType[SdkType["Metaidjs"] = 2] = "Metaidjs";
        SdkType[SdkType["Dotwallet"] = 3] = "Dotwallet";
    })(SdkType || (SdkType = {}));

    var SDK = /** @class */ (function () {
        function SDK(options) {
            this.metaidjs = null;
            this.appMetaidjs = null;
            this.isApp = false;
            this.appId = '';
            this.appScrect = '';
            this.metaIdTag = '';
            this.showmoneyApi = '';
            this.type = SdkType.Metaidjs;
            this.initIng = false;
            this.callBackFail = null; // 统一回调错误处理
            this.metaIdTag = options.metaIdTag;
            this.getAccessToken = options.getAccessToken;
            this.metaidjsOptions = options.metaidjsOptions;
            this.dotwalletOptions = options.dotwalletOptions;
            if (options.callBackFail)
                this.callBackFail = options.callBackFail;
            // 初始化是否App环境
            // @ts-ignore
            var appMetaIdJs = window.appMetaIdJsV2
                ? window.appMetaIdJsV2
                : window.appMetaIdJs
                    ? window.appMetaIdJs
                    : null;
            if (appMetaIdJs) {
                this.appMetaidjs = appMetaIdJs;
                this.appId = options.appOptions.clientId;
                this.appScrect = options.appOptions.clientSecret;
                this.isApp = true;
            }
            this.appId = options.appOptions.clientId;
            this.appScrect = options.appOptions.clientSecret;
            this.initAxiosConfig();
        }
        SDK.prototype.initSdk = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.initIng = true;
                if (_this.type === SdkType.Metaidjs) {
                    _this.metaidjs = new MetaIdJs(__assign$1(__assign$1({}, _this.metaidjsOptions), { onLoaded: function () {
                            _this.initIng = false;
                            resolve();
                        }, onError: function (error) {
                            _this.initIng = false;
                            reject(error);
                        } }));
                }
                else if (_this.type === SdkType.Dotwallet) {
                    _this.dotwalletjs = new DotWallet(_this.dotwalletOptions);
                    _this.initIng = false;
                    resolve();
                }
                else {
                    _this.initIng = false;
                    resolve();
                }
            });
        };
        // 更改 sdk 环境类型
        SDK.prototype.changeSdkType = function (type) {
            this.type = type;
            if (type === SdkType.Dotwallet) {
                this.appId = this.dotwalletOptions.clientID;
                this.appScrect = this.dotwalletOptions.clientSecret;
            }
            else {
                this.appId = this.metaidjsOptions.oauthSettings.clientId;
                this.appScrect = this.metaidjsOptions.oauthSettings.clientSecret;
            }
        };
        SDK.prototype.isSdkFinish = function () {
            return this.appMetaidjs || this.metaidjs || this.dotwalletjs;
        };
        // 初始化Api配置
        SDK.prototype.initAxiosConfig = function () {
            var _this = this;
            this.axios = axios.create({
                baseURL: this.metaidjsOptions.baseApiUrl
            });
            // 添加响应拦截器
            this.axios.interceptors.response.use(function (response) {
                // 对响应数据做点什么
                return response.data;
            }, function (error) { return __awaiter$1(_this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.callBackFail) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.callBackFail(error)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: 
                        // 对响应错误做点什么
                        return [2 /*return*/, Promise.reject(error)];
                    }
                });
            }); });
        };
        // 跳转授权
        SDK.prototype.login = function () {
            if (this.type === SdkType.App) {
                return;
            }
            else if (this.type === SdkType.Metaidjs) {
                var url = this.metaidjsOptions.baseUri + "/userLogin?response_type=code&client_id=" + this.appId + "&redirect_uri=" + this.metaidjsOptions.redirectUrl + "&scope=app&from=" + this.metaidjsOptions.redirectUrl;
                window.location.href = url;
            }
            else {
                this.dotwalletjs.login();
            }
        };
        // getToken
        SDK.prototype.getToken = function (params) {
            if (this.type === SdkType.App) {
                return;
            }
            if (this.type === SdkType.Metaidjs) {
                return this.axios.post('/showmoney/oauth2/oauth/token', {
                    code: params.code,
                    grant_type: 'authorization_code',
                    redirect_uri: this.metaidjsOptions.redirectUrl,
                    scope: 'app',
                    client_id: this.appId,
                    client_secret: this.appScrect
                }, {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'
                    },
                    transformRequest: [
                        function (data) {
                            return lib.stringify(data);
                        }
                    ]
                });
            }
            else {
                return this.dotwalletjs.getToken(params);
            }
        };
        //  refreshToken
        SDK.prototype.refreshToken = function (params) {
            if (this.type === SdkType.App) {
                return;
            }
            if (this.type === SdkType.Metaidjs) {
                return this.axios.post('/showmoney/oauth2/oauth/token', {
                    grant_type: 'refresh_token',
                    client_id: this.appId,
                    client_secret: this.appScrect,
                    refresh_token: params.refreshToken
                }, {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'
                    },
                    transformRequest: [
                        function (data) {
                            return lib.stringify(data);
                        }
                    ]
                });
            }
            else {
                return this.dotwalletjs.refreshToken(params);
            }
        };
        SDK.prototype.getUserInfo = function () {
            var _this = this;
            return new Promise(function (resolve) {
                var _a, _b;
                var params = {
                    accessToken: _this.getAccessToken(),
                    callback: function (res) {
                        _this.callback(res, resolve);
                    }
                };
                if (_this.type === SdkType.App) {
                    var functionName = "getUserInfoCallBack";
                    // @ts-ignore
                    window[functionName] = params.callback;
                    (_a = _this.appMetaidjs) === null || _a === void 0 ? void 0 : _a.getUserInfo(_this.appId, _this.appScrect, functionName);
                }
                else if (SdkType.Metaidjs) {
                    (_b = _this.metaidjs) === null || _b === void 0 ? void 0 : _b.getUserInfo(params);
                }
                else {
                    // @ts-ignore
                    _this.dotwalletjs.getMetaIDUserInfo(params);
                }
            });
        };
        SDK.prototype.sendMetaDataTx = function (params) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var _a, _b;
                if (!params.payCurrency)
                    params.payCurrency = 'BSV';
                if (typeof params.needConfirm === 'undefined')
                    params.needConfirm = true;
                if (!params.encrypt)
                    params.encrypt = '0';
                if (!params.dataType)
                    params.dataType = 'application/json';
                var accessToken = _this.getAccessToken();
                if (_this.isApp) {
                    var functionName = "sendMetaDataTxCallBack";
                    // @ts-ignore
                    window[functionName] = params.callback;
                    (_a = _this.appMetaidjs) === null || _a === void 0 ? void 0 : _a.sendMetaDataTx(accessToken, JSON.stringify(params), functionName);
                }
                else {
                    __assign$1({ callback: function (res) {
                            _this.callback(res, resolve);
                        }, onCancel: function (res) {
                            reject(res);
                        }, metaIdTag: _this.metaIdTag, accessToken: accessToken }, params);
                    window.handleNotEnoughMoney = function (res) {
                        reject();
                    };
                    (_b = _this.metaidjs) === null || _b === void 0 ? void 0 : _b.sendMetaDataTx(__assign$1({ callback: function (res) {
                            _this.callback(res, resolve);
                        }, onCancel: function (res) {
                            reject(res);
                        }, accessToken: accessToken }, params));
                }
            });
        };
        SDK.prototype.eciesDecryptData = function (data) {
            var _this = this;
            return new Promise(function (resolve) {
                var _a, _b;
                var _params = {
                    callback: function (res) {
                        _this.callback(res, resolve);
                    },
                    accessToken: _this.getAccessToken(),
                    data: data
                };
                if (_this.type === SdkType.App) {
                    var functionName = "eciesDecryptDataCallBack";
                    // @ts-ignore
                    window[functionName] = _params.callback;
                    (_a = _this.appMetaidjs) === null || _a === void 0 ? void 0 : _a.decryptData(_params.accessToken, data, functionName);
                }
                else if (_this.type === SdkType.Metaidjs) {
                    (_b = _this.metaidjs) === null || _b === void 0 ? void 0 : _b.eciesDecryptData(_params);
                }
                else {
                    // 待兼容
                    // @ts-ignore
                    _this.dotwalletjs.ecdhDecryptData(_params);
                }
            });
        };
        // 获取用户余额
        SDK.prototype.getBalance = function () {
            var _this = this;
            return new Promise(function (resolve) {
                if (_this.isApp) ;
                else {
                    //@ts-ignore
                    _this.metaidjs.getBalance({
                        callback: function (res) {
                            _this.callback(res, resolve);
                        }
                    });
                }
            });
        };
        // 统一回调处理
        SDK.prototype.callback = function (res, resolve) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(res.code !== 200)) return [3 /*break*/, 2];
                            if (!this.callBackFail) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.callBackFail(res)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            resolve(res);
                            return [2 /*return*/];
                    }
                });
            });
        };
        // 处理附件
        SDK.prototype.setAttachments = function (_data, fileAttrs) {
            return new Promise(function (resolve) {
                var attachments = [];
                var data = __assign$1({}, _data);
                fileAttrs.map(function (item, index) {
                    for (var i in data) {
                        if (i === item.name) {
                            if (typeof data[i] !== 'string') {
                                attachments.push({
                                    fileName: data[i].name,
                                    fileType: data[i].data_type,
                                    data: data[i].hexData,
                                    encrypt: item.encrypt
                                });
                                data[i] = "![metafile](" + index + ")";
                            }
                        }
                    }
                });
                resolve({ data: data, attachments: attachments });
            });
        };
        // 文件转为MetaFile 格式，便于后续处理附件
        SDK.prototype.fileToMetaFile = function (file) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var fileType = file.type;
                var reader = new FileReader();
                var fileBinary;
                reader.onload = function () {
                    var arrayBuffer = reader.result;
                    var buffer = '';
                    var hex = '';
                    if (arrayBuffer) {
                        // @ts-ignore
                        buffer = Buffer.from(arrayBuffer);
                        // @ts-ignore
                        hex = buffer.toString('hex');
                        fileBinary = buffer;
                    }
                    var fileData = 'data:' + fileType + ';base64,' + _this.hexToBase64(hex);
                    var imgData = {
                        base64Data: fileData,
                        BufferData: fileBinary,
                        hexData: hex,
                        name: file.name,
                        raw: file,
                        data_type: fileType
                    };
                    /*
                        fileBinary二进制流
                        fileData 图片base64编码
                        fileType 文件名
                        */
                    resolve(imgData);
                };
                reader.onerror = function (error) {
                    reject(reject);
                };
                reader.readAsArrayBuffer(file);
            });
        };
        // 十六进制 转换为 图片
        SDK.prototype.hexToBase64 = function (str) {
            if (!str) {
                return 'https://showjob.oss-cn-hangzhou.aliyuncs.com/index/img_photo_default.png';
            }
            var a = [];
            for (var i_1 = 0, len_1 = str.length; i_1 < len_1; i_1 += 2) {
                a.push(parseInt(str.substr(i_1, 2), 16));
            }
            var binary = '';
            var bytes = new Uint8Array(a);
            var len = bytes.byteLength;
            for (var i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            var sty = window.btoa(binary);
            return sty;
        };
        SDK.prototype.createMetaFileProtocol = function (params) {
            var _a = params.data, name = _a.name, data = __rest(_a, ["name"]);
            var nameArry = name.split('.');
            var node_name = '';
            nameArry.map(function (item, index) {
                node_name += item;
                if (index === nameArry.length - 2) {
                    node_name += uuid.v4();
                }
            });
            return this.sendMetaDataTx({
                nodeName: 'NftIssue-6d3eaf759bbc',
                brfcId: '6d3eaf759bbc',
                path: '/Protocols/MetaFile',
                payCurrency: 'bsv',
                // payTo: [
                //     { address: 'XXXXXXXXXX', amount: 1000 }
                // ],
                data: JSON.stringify(__assign$1(__assign$1({}, data), { encoding: 'binary', node_name: node_name })),
                needConfirm: false
            });
        };
        // NFT
        // 检查NFT操作txid状态，成功后才可继续其他上链操作，否则容易双花
        SDK.prototype.checkNftTxIdStatus = function (txId, timer, parentResolve, parentReject) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                fetch("https://api.sensible.satoplay.cn/tx/" + txId)
                    .then(function (response) {
                    return response.json();
                })
                    .then(function (response) {
                    debugger;
                    if (response.code === 0) {
                        if (parentResolve)
                            parentResolve();
                        else
                            resolve();
                    }
                    else {
                        // 超过30次还不成功就 回调失败
                        if (timer && timer > 30) {
                            if (parentReject)
                                parentReject();
                            else
                                reject();
                        }
                        else {
                            setTimeout(function () {
                                _this.checkNftTxIdStatus(txId, timer ? timer + 1 : 1, parentResolve ? parentResolve : resolve, parentReject ? parentReject : reject);
                            }, 1000);
                        }
                    }
                })
                    .catch(function () {
                    if (parentReject)
                        parentReject();
                    else
                        reject();
                });
            });
        };
        // 铸造 nft 1. genesisNFT  2.createNftDataProtocol 3.issueNFT
        SDK.prototype.createNFT = function (params) {
            var _this = this;
            return new Promise(function (resolve, reject) { return __awaiter$1(_this, void 0, void 0, function () {
                var nftTotal, codeHash, genesis, genesisTxId, sensibleId, _params, amount, issueOperate, res;
                var _this = this;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            nftTotal = params.nftTotal, codeHash = params.codeHash, genesis = params.genesis, genesisTxId = params.genesisTxId, sensibleId = params.sensibleId, _params = __rest(params, ["nftTotal", "codeHash", "genesis", "genesisTxId", "sensibleId"]);
                            amount = 0;
                            issueOperate = function () { return __awaiter$1(_this, void 0, void 0, function () {
                                var issueRes;
                                return __generator$1(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!!params.checkOnly) return [3 /*break*/, 2];
                                            return [4 /*yield*/, this.checkNftTxIdStatus(genesisTxId).catch(function () {
                                                    return reject('createNFT error');
                                                })];
                                        case 1:
                                            _a.sent();
                                            _a.label = 2;
                                        case 2: return [4 /*yield*/, this.issueNFT(__assign$1({ genesisId: genesis, genesisTxid: genesisTxId, codehash: codeHash, sensibleId: sensibleId }, _params))];
                                        case 3:
                                            issueRes = _a.sent();
                                            if (issueRes.code === 200) {
                                                if (issueRes.data.amount) {
                                                    amount += issueRes.data.amount;
                                                }
                                                if (params.checkOnly) {
                                                    resolve(Math.ceil(amount));
                                                }
                                                else {
                                                    resolve(__assign$1(__assign$1({}, issueRes.data), { codehash: codeHash, sensibleId: sensibleId, genesisId: genesis, genesisTxid: genesisTxId }));
                                                }
                                            }
                                            else {
                                                reject('createNFT error');
                                            }
                                            return [2 /*return*/];
                                    }
                                });
                            }); };
                            if (!(!codeHash || !genesis || !genesisTxId || !sensibleId)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.genesisNFT({
                                    nftTotal: nftTotal ? nftTotal : '1',
                                    checkOnly: params.checkOnly ? true : false
                                })];
                        case 1:
                            res = _a.sent();
                            if (res.code === 200) {
                                if (res.data.amount) {
                                    amount += res.data.amount;
                                    codeHash = '';
                                    genesis = '';
                                    genesisTxId = '';
                                    sensibleId = '';
                                }
                                else {
                                    codeHash = res.data.codehash;
                                    genesis = res.data.genesisId;
                                    genesisTxId = res.data.genesisTxid;
                                    sensibleId = res.data.sensibleId;
                                }
                                debugger;
                                issueOperate();
                            }
                            else {
                                reject('createNFT error');
                            }
                            return [3 /*break*/, 3];
                        case 2:
                            issueOperate();
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); });
        };
        SDK.prototype.genesisNFT = function (params) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var _a, _b;
                var _params = {
                    data: {
                        nftTotal: params.nftTotal,
                        signersRaw: [
                            {
                                satotxApiPrefix: 'https://satotx.showpay.top,https://cnsatotx.showpay.top',
                                satotxPubKey: '5b94858991d384c61ffd97174e895fcd4f62e4fea618916dc095fe4c149bbdf1188c9b33bc15cbe963a63b2522e70b80a5b722ac0e6180407917403755df4de27d69cc115c683a99face8c823cbccf73c7f0d546f1300b9ee2e96aea85542527f33b649f1885caebe19cf75d9a645807f03565c65bd4c99c8f6bb000644cfb56969eac3e9331c254b08aa279ceb64c47ef66be3f071e28b3a5a21e48cdfc3335d8b52e80a09a104a791ace6a2c1b4da88c52f9cc28c54a324e126ec91a988c1fe4e21afc8a84d0e876e01502386f74e7fc24fc32aa249075dd222361aea119d4824db2a797d58886e93bdd60556e504bb190b76a451a4e7b0431973c0410e71e808d0962415503931bbde3dfce5186b371c5bf729861f239ef626b7217d071dfd62bac877a847f2ac2dca07597a0bb9dc1969bed40606c025c4ff7b53a4a6bd921642199c16ede8165ed28da161739fa8d33f9f483212759498c1219d246092d14c9ae63808f58f03c8ca746904ba51fa326d793cea80cda411c85d35894bdb5'
                            },
                            {
                                satotxApiPrefix: 'https://satotx2.showpay.top,https://cnsatotx2.showpay.top',
                                satotxPubKey: '09539fcf01e83c7c649164ddd0dd42463ef10a98c665cd0d9f791446a3c4c2dd3916f6e76075b36a06f40731821f6b7dbb8bea8effa4ea461fecce4b6b2d45ca4dd923028fd6dc6ce49512616ca55f01162e5d2f85faa22ec40bc35d4978204a9b07a53f04297b886fa4abb095034f106f8ff0fd172e1e96bf7198cd5b9944ec1af32328a156877769ecabd41489a7ac858fd35cd8d93e68f33053077cf50bb397b66d160598963d1b663b3bce6371877df0e33866e4d9557b0bde7a2a930c274fa9e697d9f17ad88528ecab1be32a9d518bb950fc8264f2056d4f395fcdc12dd59cb8945013105ed52433326e3fa067237f17ab62e65557c7538e634daf11288b7eaab537abf2cc2a90159632fb9bb8fac01085b70024e01e42cd431db70d004963e46da8733c18fd5ffaaecfd67c860ae37441271ba545f86cae72690a5a3261e0125a2bf069fe28a1e1431b4cac29f8a43cbefbe22d5ae4b92441f8915881560271ee31379d365da38f1a5fa1414d6ad71943a083cce0ee45d47f81ff3c9d'
                            },
                            {
                                satotxApiPrefix: 'https://satotx3.showpay.top,https://cnsatotx3.showpay.top',
                                satotxPubKey: '8e37df222f9af47980ad72d31b2619b49460c7be3a4c1034c0e7f43146d80058e52bfc53b0608db5a9ec5cb832c326f785f5c4e4349cc9fd647839738f465573d1707ef84d14c41ad857a1a8e5a075ae953be4c52481ee3b8e85891613dcf99c1f7bf3a51cd67ed92f9b71d77b8517a57af5fb4e2bad7197031e00c1d8b85d0abc62fb98952d9ddfb43b47c01590ef0a365aed89b179505ccfd1d70effe4d375d5e774578434f8f9bb2281100b6e1daf8df4a40af35853c91aee2dc7f578034fa534586985e4df30b7a85efab943f68f01b46f72ced16655ac4f7e7f0439e0e6b43803dc7e262512c57ef862d41b98344ea6e725683846d91209ad87097cb4ae7092cc2c4ebd39383905e61eeaae495d8b3a57f9da8cca760b9546635cef2a8728c4209891ad1e5cbeb75d2b798f0dabd1eceaf4b297186fd2a45ed58fbaed886a4dc2f8690c9070061b9481e446319b7f0a54f9d94e7505e87e3d81bcd664ecc29acc2942361e60b30fa965cdc88185163c2857644d837c9d839bb9f6b8e6dd'
                            },
                            {
                                satotxApiPrefix: 'https://s1.satoplay.cn,https://s1.satoplay.com',
                                satotxPubKey: '2c8c0117aa5edba9a4539e783b6a1bdbc1ad88ad5b57f3d9c5cba55001c45e1fedb877ebc7d49d1cfa8aa938ccb303c3a37732eb0296fee4a6642b0ff1976817b603404f64c41ec098f8cd908caf64b4a3aada220ff61e252ef6d775079b69451367eda8fdb37bc55c8bfd69610e1f31b9d421ff44e3a0cfa7b11f334374827256a0b91ce80c45ffb798798e7bd6b110134e1a3c3fa89855a19829aab3922f55da92000495737e99e0094e6c4dbcc4e8d8de5459355c21ff055d039a202076e4ca263b745a885ef292eec0b5a5255e6ecc45534897d9572c3ebe97d36626c7b1e775159e00b17d03bc6d127260e13a252afd89bab72e8daf893075f18c1840cb394f18a9817913a9462c6ffc8951bee50a05f38da4c9090a4d6868cb8c955e5efb4f3be4e7cf0be1c399d78a6f6dd26a0af8492dca67843c6da9915bae571aa9f4696418ab1520dd50dd05f5c0c7a51d2843bd4d9b6b3b79910e98f3d98099fd86d71b2fac290e32bdacb31943a8384a7668c32a66be127b74390b4b0dec6455'
                            },
                            {
                                satotxApiPrefix: 'https://satotx.metasv.com',
                                satotxPubKey: '19d9193ee2e95d09445d28408e8a3da730b2d557cd8d39a7ae4ebbfbceb17ed5d745623529ad33d043511f3e205c1f92b6322833424d19823c3b611b3adabb74e1006e0e93a8f1e0b97ab801c6060a4c060f775998d9f003568ab4ea7633a0395eb761c36106e229394f2c271b8522a44a5ae759254f5d22927923ba85b3729460ecccca07a5556299aa7f2518814c74a2a4d48b48013d609002631f2d93c906d07077ef58d473e3d971362d1129c1ab9b8f9b1365519f0c023c1cadad5ab57240d19e256e08022fd0708951ff90a8af0655aff806c6382d0a72c13f1e52b88222d7dfc6357179b06ffcf937f9da3b0419908aa589a731e26bbaba2fa0b754bf722e338c5627b11dc24aadc4d83c35851c034936cf0df18167e856a5f0a7121d23cd48b3f8a420869a37bd1362905d7f76ff18a991f75a0f9d1bcfc18416d76691cc357cbdcc8cc0df9dbd9318a40e08adb2fb4e78b3c47bdf07eeed4f3f4e0f7e81e37460a09b857e0194c72ec03bb564b5b409d8a1b84c153186ecbb4cfdfd'
                            }
                        ],
                        checkOnly: params.checkOnly,
                        seriesName: params.seriesName
                    },
                    callback: function (res) {
                        debugger;
                        _this.callback(res, resolve);
                    }
                };
                if (_this.isApp) {
                    var functionName = "genesisNFTCallBack";
                    window[functionName] = _params.callback;
                    var accessToken = _this.getAccessToken();
                    (_a = _this.appMetaidjs) === null || _a === void 0 ? void 0 : _a.genesisNFT(accessToken, JSON.stringify(_params.data), functionName);
                }
                else {
                    debugger;
                    // @ts-ignore
                    (_b = _this.metaidjs) === null || _b === void 0 ? void 0 : _b.genesisNFT(_params);
                }
            });
        };
        SDK.prototype.checkUserCanIssueNft = function (params) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                fetch(_this.showmoneyApi + "/aggregation/v2/app/nftOnShow/getMyNftIssueEligibility/" + params.metaId + "/" + params.address + "/0/" + params.language)
                    .then(function (response) {
                    return response.json();
                })
                    .then(function (response) {
                    if (response.code === 0) {
                        resolve(response);
                    }
                    else {
                        resolve(response);
                    }
                })
                    .catch(function () {
                    reject();
                });
            });
        };
        // nft 铸造
        SDK.prototype.issueNFT = function (params) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var _a, _b;
                var _params = {
                    data: __assign$1({ payTo: [{ address: _this.nftAppAddress, amount: 10000 }] }, params),
                    callback: function (res) {
                        _this.callback(res, resolve);
                    }
                };
                if (_this.isApp) {
                    var functionName = "issueNFTCallBack";
                    // @ts-ignore
                    window[functionName] = _params.callback;
                    var accessToken = _this.getAccessToken();
                    (_a = _this.appMetaidjs) === null || _a === void 0 ? void 0 : _a.issueNFT(accessToken, JSON.stringify(_params.data), functionName);
                }
                else {
                    // @ts-ignore
                    (_b = _this.metaidjs) === null || _b === void 0 ? void 0 : _b.issueNFT(_params);
                }
            });
        };
        // metaidjs nft 购买
        SDK.prototype.nftBuy = function (params) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var _a, _b;
                var amount = params.amount, data = __rest(params, ["amount"]);
                var _params = {
                    data: __assign$1(__assign$1({}, data), { payTo: [
                            {
                                address: _this.nftAppAddress,
                                amount: Math.ceil(new Decimal(amount * 0.05).toNumber())
                            }
                        ] }),
                    callback: function (res) {
                        _this.callback(res, resolve);
                    }
                };
                if (_this.isApp) {
                    var accessToken = _this.getAccessToken();
                    var functionName = "nftBuyCallBack";
                    // @ts-ignore
                    window[functionName] = _params.callback;
                    // @ts-ignore
                    (_a = _this.appMetaidjs) === null || _a === void 0 ? void 0 : _a.nftBuy(accessToken, JSON.stringify(_params.data), functionName);
                }
                else {
                    // @ts-ignore
                    (_b = _this.metaidjs) === null || _b === void 0 ? void 0 : _b.nftBuy(_params);
                }
            });
        };
        // nft 上架/销售
        SDK.prototype.nftSell = function (params) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var _a, _b;
                var _params = {
                    data: __assign$1(__assign$1({}, params), { payTo: [{ address: _this.nftAppAddress, amount: 10000 }] }),
                    callback: function (res) {
                        debugger;
                        _this.callback(res, resolve);
                    }
                };
                if (_this.isApp) {
                    var accessToken = _this.getAccessToken();
                    var functionName = "nftSellCallBack";
                    // @ts-ignore
                    window[functionName] = _params.callback;
                    // @ts-ignore
                    (_a = _this.appMetaidjs) === null || _a === void 0 ? void 0 : _a.nftSell(accessToken, JSON.stringify(_params.data), functionName);
                }
                else {
                    // @ts-ignore
                    (_b = _this.metaidjs) === null || _b === void 0 ? void 0 : _b.nftSell(_params);
                }
            });
        };
        // nft 下架/取消销售
        SDK.prototype.nftCancel = function (params) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var _a, _b;
                var _params = {
                    data: __assign$1({ outputIndex: 0, payTo: [{ address: _this.nftAppAddress, amount: 10000 }] }, params),
                    callback: function (res) {
                        _this.callback(res, resolve);
                    }
                    // onCancel: (msg: any) => {
                    //   debugger
                    // }
                };
                if (_this.isApp) {
                    var accessToken = _this.getAccessToken();
                    var functionName = "nftCancelCallBack";
                    window[functionName] = _params.callback;
                    (_a = _this.appMetaidjs) === null || _a === void 0 ? void 0 : _a.nftCancel(accessToken, JSON.stringify(_params.data), functionName);
                }
                else {
                    debugger;
                    // @ts-ignore
                    (_b = _this.metaidjs) === null || _b === void 0 ? void 0 : _b.nftCancel(_params);
                }
            });
        };
        return SDK;
    }());

    exports.SDK = SDK;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
